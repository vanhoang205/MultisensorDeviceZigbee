###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               28/Jul/2020  15:39:11
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\Source\zcl_MultiSensor.c
#    Command line       =  
#        -f C:\Users\TS-577\AppData\Local\Temp\EW372F.tmp
#        ("C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\Source\zcl_MultiSensor.c"
#        -D xBDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
#        NV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK
#        -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_GROUPS -D ZCL_REPORT -D
#        ZCL_REPORTING_DEVICE -lC "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000) -f
#        "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\Source\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\Source\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Japanese_JPN.932
#    List file          =  
#        C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\EndDeviceEB\List\zcl_MultiSensor.lst
#    Object file        =  
#        C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\EndDeviceEB\Obj\zcl_MultiSensor.r51
#
###############################################################################

C:\Users\TS-577\Desktop\Zigbee workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\Source\zcl_MultiSensor.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampletemperaturesensor.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6            Description:    Zigbee Cluster Library - sample device application.
      7          
      8          
      9            Copyright 2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee Multi Sensor, based on Z-Stack 3.0.
     42          
     43            - MultiSensor Object includes 6 sensors:
     44                + Illuminance Sensor - Report to linux gateway after period time
     45                + Temperature Sensor - Report to linux gateway after change value with step 1 celcius
     46                + Humidity Sensor - Report to linux gateway after change value with step 1%RH
     47                + Occupancy Sensor - Report to linux gateway after change value
     48                + TVOC Sensor - Report to linux gateway after period time
     49                + Co2 Sensor - Report to linux gateway after period time
     50            - Multi sensor device act as end device with always power on 
     51            - Multi sensor device will receive date of sensors from stm32 with protocol follwed:
     52               |XXXX,YYYY,ZZZZ,DDDD,KKKK,LLLL\r\n| : format packet
     53          
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "ZComDef.h"
     60          #include "OSAL.h"
     61          #include "AF.h"
     62          #include "ZDApp.h"
     63          #include "ZDObject.h"
     64          #include "ZDProfile.h"
     65          
     66          #include "zcl.h"
     67          #include "zcl_general.h"
     68          #include "zcl_ha.h"
     69          #include "zcl_ms.h"
     70          
     71          #include "zcl_MultiSensor.h"
     72          
     73          #include "onboard.h"
     74          
     75          /* HAL */
     76          #include "hal_led.h"
     77          #include "hal_key.h"
     78          #include "hal_uart.h"
     79          
     80          #include "bdb_interface.h"   
     81          /*********************************************************************
     82           * MACROS
     83           */
     84          
     85          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     86          
     87          #define UART_NONE       0
     88          #define UART_PERIOD     1
     89          #define UART_TEMP       2
     90          #define UART_HUM        3
     91          #define UART_PIR        4
     92          /*********************************************************************
     93           * CONSTANTS
     94           */
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          /*********************************************************************
    101           * GLOBAL VARIABLES
    102           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          byte zclMultiSensor_TaskID;
   \                     zclMultiSensor_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          afAddrType_t zclMultiSensor_dstAddr;
   \                     zclMultiSensor_dstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    105          extern int16 zdpExternalStateTaskID;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          static devStates_t NwkStateShadow = DEV_HOLD;
   \                     NwkStateShadow:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    107          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          uint16 gTimeCounter;
   \                     gTimeCounter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          uint8 holdKeyCounter;
   \                     holdKeyCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          uint8 uartFlag;
   \                     uartFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          uint8 signTempFlag;
   \                     signTempFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    112          /*********************************************************************
    113           * GLOBAL FUNCTIONS
    114           */
    115          
    116          /*********************************************************************
    117           * LOCAL VARIABLES
    118           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    119          static endPointDesc_t multiSensor_Ep =
   \                     multiSensor_Ep:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for multiSensor_Ep>`
   \   000007                REQUIRE __INIT_XDATA_I
    120          {
    121            MULTISENSOR_ENDPOINT,           
    122            0,
    123            &zclMultiSensor_TaskID,
    124            (SimpleDescriptionFormat_t *)NULL,        // No Simple description for this test endpoint
    125            (afNetworkLatencyReq_t)0                  // No Network Latency req
    126          };
    127          
    128          /*********************************************************************
    129           * LOCAL FUNCTIONS
    130           */
    131            
    132          // Functions to process other events relate to hardware
    133          static void zclMultiSensor_HandleKeys( byte shift, byte keys );
    134          static void zclMultiSensor_BasicResetCB( void );
    135          static void zclMultiSensor_BatteryWarningCB( uint8 voltLevel);
    136          
    137          // Function to process Commisioning
    138          static void zclMultiSensor_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg);
    139          
    140          // Functions to process ZCL Foundation incoming Command/Response messages
    141          static void zclMultiSensor_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    142          #ifdef ZCL_READ
    143          static uint8 zclMultiSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    144          #endif
    145          #ifdef ZCL_WRITE
    146          static uint8 zclMultiSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    147          #endif
    148          
    149          #ifdef ZCL_REPORT
    150          // Functions to process ZCL REPORT message
    151          static void zclMultiSensor_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
    152          static uint8 zclMultiSensor_ProcessInConfigReportCmd( zclIncomingMsg_t *pInMsg );
    153          static uint8 zclMultiSensor_ProcessInReadReportCfgCmd( zclIncomingMsg_t *pInMsg );
    154          static void zclMultiSensor_CheckReportConfig(void);
    155          static uint8 SendZclAttrReport(uint8 srcEp, uint16 clusterId, zclReportCmd_t *pReportCmd, uint8 datalen);
    156          static void zclMultiSensor_CheckAndSendClusterAttrReport( uint8 endpoint, uint16 clusterId,
    157                                                                    zclConfigReportRecsList *pConfigReportRecsList );
    158          static void sendZclAttrChangeReport(uint16 clusterId, uint16 attrID, uint8 *currentValue);
    159          //-- MOD END
    160          #endif
    161          
    162          static uint8 zclMultiSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    163          
    164          // Functions to process UART interface
    165          static void zclMultiSensor_UART_Init(void);
    166          void uartEventApplicationCB(uint8 port, uint8 event);
    167          
    168          
    169          
    170          
    171          /*********************************************************************
    172           * STATUS STRINGS
    173           */
    174          
    175          /*********************************************************************
    176           * CONSTANTS
    177           */
    178          
    179          /*********************************************************************
    180           * ZCL General Profile Callback table
    181           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    182          static zclGeneral_AppCallbacks_t zclMultiSensor_CmdCallbacks =
   \                     zclMultiSensor_CmdCallbacks:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zclMultiSensor_CmdCallbacks>`
   \   000012                REQUIRE __INIT_XDATA_I
    183          {
    184          // ************************************ Callback List of Multi Sensor Endpoint *********************************************/  
    185              zclMultiSensor_BasicResetCB,                    // Basic Cluster Reset command
    186              NULL,                                           // Identify Trigger Effect command
    187              NULL,             				    // On/Off cluster command
    188              NULL,                                           // On/Off cluster enhanced command Off with Effect
    189              NULL,                                           // On/Off cluster enhanced command On with Recall Global Scene
    190              NULL,                                           // On/Off cluster enhanced command On with Timed Off
    191            #ifdef ZCL_LEVEL_CTRL
    192              NULL,                                           // Level Control Move to Level command
    193              NULL,                                           // Level Control Move command
    194              NULL,                                           // Level Control Step command
    195              NULL,                                           // Level Control Stop command
    196            #endif
    197            #ifdef ZCL_GROUPS
    198              NULL,                                           // Group Response commands
    199            #endif
    200            #ifdef ZCL_SCENES
    201              NULL,                                           // Scene Store Request command
    202              NULL,                                           // Scene Recall Request command
    203              NULL,                                           // Scene Response command
    204            #endif
    205            #ifdef ZCL_ALARMS
    206              NULL,                                           // Alarm (Response) commands
    207            #endif
    208            #ifdef SE_UK_EXT
    209              NULL,                                           // Get Event Log command
    210              NULL,                                           // Publish Event Log command
    211            #endif
    212              NULL,                                           // RSSI Location command
    213              NULL                                            // RSSI Location Response command
    214          };
    215          
    216          
    217          /*********************************************************************
    218           * @fn          zclMultiSensor_Init
    219           *
    220           * @brief       Initialization function for the zclGeneral layer.
    221           *
    222           * @param       none
    223          *
    224          * @return      none
    225          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    226          void zclMultiSensor_Init( byte task_id )
   \                     zclMultiSensor_Init:
    227          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
    228            zclMultiSensor_TaskID = task_id;
   \   00000B   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   00000E   F0           MOVX      @DPTR,A
    229            
    230            // Register the Simple Descriptor for this application
    231            bdb_RegisterSimpleDescriptor( &zclMultiSensor_SimpleDesc );
   \   00000F                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   00000F   7A..         MOV       R2,#zclMultiSensor_SimpleDesc & 0xff
   \   000011   7B..         MOV       R3,#(zclMultiSensor_SimpleDesc >> 8) & 0xff
   \   000013   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    232            
    233            // Register the ZCL General Cluster Library callback functions
    234            zclGeneral_RegisterCmdCallbacks( MULTISENSOR_ENDPOINT, &zclMultiSensor_CmdCallbacks );
   \   000016                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000016   7A..         MOV       R2,#zclMultiSensor_CmdCallbacks & 0xff
   \   000018   7B..         MOV       R3,#(zclMultiSensor_CmdCallbacks >> 8) & 0xff
   \   00001A   7908         MOV       R1,#0x8
   \   00001C   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    235          
    236          
    237            // Register the application's attribute list
    238            zclMultiSensor_ResetAttributesToDefaultValues();
   \   00001F                ; Setup parameters for call to function zclMultiSensor_ResetAttributesToDefaultValues
   \   00001F   12....       LCALL     ??zclMultiSensor_ResetAttributesToDefaultValues; Banked call to: zclMultiSensor_ResetAttributesToDefaultValues
    239            zcl_registerAttrList( MULTISENSOR_ENDPOINT, zclMultiSensor_NumAttributes, zclMultiSensor_Attrs );    
   \   000022                ; Setup parameters for call to function zcl_registerAttrList
   \   000022   7C..         MOV       R4,#zclMultiSensor_Attrs & 0xff
   \   000024   7D..         MOV       R5,#(zclMultiSensor_Attrs >> 8) & 0xff
   \   000026   90....       MOV       DPTR,#zclMultiSensor_NumAttributes
   \   000029   E4           CLR       A
   \   00002A   93           MOVC      A,@A+DPTR
   \   00002B   FA           MOV       R2,A
   \   00002C   7908         MOV       R1,#0x8
   \   00002E   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    240            
    241            // Register the Application to receive the unprocessed Foundation command/response messages
    242            zcl_registerForMsg( zclMultiSensor_TaskID );
   \   000031                ; Setup parameters for call to function zcl_registerForMsg
   \   000031   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F9           MOV       R1,A
   \   000036   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    243              
    244            // Register low voltage NV memory protection application callback
    245            RegisterVoltageWarningCB( zclMultiSensor_BatteryWarningCB );
   \   000039                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   000039   7A..         MOV       R2,#`??zclMultiSensor_BatteryWarningCB::?relay` & 0xff
   \   00003B   7B..         MOV       R3,#(`??zclMultiSensor_BatteryWarningCB::?relay` >> 8) & 0xff
   \   00003D   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    246            
    247            // Register for all key events - This app will handle all key events
    248            RegisterForKeys( zclMultiSensor_TaskID );
   \   000040                ; Setup parameters for call to function RegisterForKeys
   \   000040   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F9           MOV       R1,A
   \   000045   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    249            
    250            zclMultiSensor_UART_Init();
   \   000048   85..82       MOV       DPL,?XSP + 0
   \   00004B   85..83       MOV       DPH,?XSP + 1
   \   00004E   7401         MOV       A,#0x1
   \   000050   F0           MOVX      @DPTR,A
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   7402         MOV       A,#0x2
   \   000056   F0           MOVX      @DPTR,A
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   E4           CLR       A
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   7403         MOV       A,#0x3
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   7430         MOV       A,#0x30
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   E4           CLR       A
   \   000066   F0           MOVX      @DPTR,A
   \   000067   740A         MOV       A,#0xa
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   744B         MOV       A,#0x4b
   \   00006E   F0           MOVX      @DPTR,A
   \   00006F   A3           INC       DPTR
   \   000070   E4           CLR       A
   \   000071   F0           MOVX      @DPTR,A
   \   000072   7412         MOV       A,#0x12
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   7407         MOV       A,#0x7
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   A3           INC       DPTR
   \   00007B   E4           CLR       A
   \   00007C   F0           MOVX      @DPTR,A
   \   00007D   7405         MOV       A,#0x5
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   7406         MOV       A,#0x6
   \   000084   F0           MOVX      @DPTR,A
   \   000085   7416         MOV       A,#0x16
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   7401         MOV       A,#0x1
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   741B         MOV       A,#0x1b
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   74..         MOV       A,#`??uartEventApplicationCB::?relay` & 0xff
   \   000094   F0           MOVX      @DPTR,A
   \   000095   A3           INC       DPTR
   \   000096   74..         MOV       A,#(`??uartEventApplicationCB::?relay` >> 8) & 0xff
   \   000098   F0           MOVX      @DPTR,A
   \   000099                ; Setup parameters for call to function HalUARTOpen
   \   000099   AA..         MOV       R2,?XSP + 0
   \   00009B   AB..         MOV       R3,?XSP + 1
   \   00009D   7900         MOV       R1,#0x0
   \   00009F   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    251             
    252          #ifdef ZCL_REPORT
    253            // Register the application's config report record list
    254            zcl_registerConfigReportRecList( MULTISENSOR_ENDPOINT,
    255                                             zclMultiSensor_NumConfigReportRecs, zclMultiSensor_ConfigReportRecs );
   \   0000A2                ; Setup parameters for call to function zcl_registerConfigReportRecList
   \   0000A2   7C..         MOV       R4,#zclMultiSensor_ConfigReportRecs & 0xff
   \   0000A4   7D..         MOV       R5,#(zclMultiSensor_ConfigReportRecs >> 8) & 0xff
   \   0000A6   90....       MOV       DPTR,#zclMultiSensor_NumConfigReportRecs
   \   0000A9   E4           CLR       A
   \   0000AA   93           MOVC      A,@A+DPTR
   \   0000AB   FA           MOV       R2,A
   \   0000AC   7908         MOV       R1,#0x8
   \   0000AE   12....       LCALL     `??zcl_registerConfigReportRecList::?relay`; Banked call to: zcl_registerConfigReportRecList
    256          #endif
    257            
    258            // Register commissioning status callback
    259            bdb_RegisterCommissioningStatusCB( zclMultiSensor_ProcessCommissioningStatus );
   \   0000B1                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   0000B1   7A..         MOV       R2,#`??zclMultiSensor_ProcessCommissioningStatus::?r` & 0xff
   \   0000B3   7B..         MOV       R3,#(`??zclMultiSensor_ProcessCommissioningStatus::?r` >> 8) & 0xff
   \   0000B5   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    260            
    261            //Register for Endpoints
    262            afRegister( &multiSensor_Ep );
   \   0000B8                ; Setup parameters for call to function afRegister
   \   0000B8   7A..         MOV       R2,#multiSensor_Ep & 0xff
   \   0000BA   7B..         MOV       R3,#(multiSensor_Ep >> 8) & 0xff
   \   0000BC   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    263          
    264            bdb_StartCommissioning( BDB_COMMISSIONING_MODE_NWK_STEERING);
   \   0000BF                ; Setup parameters for call to function bdb_StartCommissioning
   \   0000BF   7902         MOV       R1,#0x2
   \   0000C1   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    265            zdpExternalStateTaskID = zclMultiSensor_TaskID;
   \   0000C4   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   0000CB   F0           MOVX      @DPTR,A
   \   0000CC   A3           INC       DPTR
   \   0000CD   E4           CLR       A
   \   0000CE   F0           MOVX      @DPTR,A
    266            
    267          }
   \   0000CF   741D         MOV       A,#0x1d
   \   0000D1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D4   7F01         MOV       R7,#0x1
   \   0000D6   02....       LJMP      ?BANKED_LEAVE_XDATA
    268          
    269          
    270          /*********************************************************************
    271           * @fn          zclSample_event_loop
    272           *
    273           * @brief       Event Loop Processor for zclGeneral.
    274           *
    275           * @param       none
    276           *
    277           * @return      none
    278           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          uint16 zclMultiSensor_event_loop( uint8 task_id, uint16 events )
   \                     zclMultiSensor_event_loop:
    280          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    281            afIncomingMSGPacket_t *MSGpkt;
    282          
    283            (void)task_id;  // Intentionally unreferenced parameter
    284          
    285            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   7029         JNZ       ??zclMultiSensor_event_loop_0
    286            {
    287              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclMultiSensor_TaskID )) )
    288              {
    289                switch ( MSGpkt->hdr.event )
    290                {
    291                  case ZCL_INCOMING_MSG:
    292                    // Incoming ZCL Foundation command/response messages
    293                    zclMultiSensor_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    294                    break;
    295                    
    296                  case ZDO_STATE_CHANGE:
    297                     NwkStateShadow = (devStates_t)(MSGpkt->hdr.status);
    298                    break;
    299                    
    300                  case KEY_CHANGE:
    301                    zclMultiSensor_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    302                    break;
    303          
    304                  default:
    305                    break;
    306                }
    307          
    308                // Release the memory
    309                osal_msg_deallocate( (uint8 *)MSGpkt );
    310              }
    311              
    312              // return unprocessed events
    313              return (events ^ SYS_EVENT_MSG);
    314            }
    315            
    316          #if ZG_BUILD_ENDDEVICE_TYPE    
    317            if ( events & MULTISENSOR_END_DEVICE_REJOIN_EVT )
   \   000012   EA           MOV       A,R2
   \   000013   5402         ANL       A,#0x2
   \   000015   605C         JZ        ??zclMultiSensor_event_loop_1
    318            {
    319              bdb_ZedAttemptRecoverNwk();
   \   000017                ; Setup parameters for call to function bdb_ZedAttemptRecoverNwk
   \   000017   12....       LCALL     `??bdb_ZedAttemptRecoverNwk::?relay`; Banked call to: bdb_ZedAttemptRecoverNwk
    320              return ( events ^ MULTISENSOR_END_DEVICE_REJOIN_EVT );
   \   00001A   EE           MOV       A,R6
   \   00001B   6402         XRL       A,#0x2
   \   00001D   02....       LJMP      ??zclMultiSensor_event_loop_2 & 0xFFFF
    321            }
   \                     ??zclMultiSensor_event_loop_3:
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   A2E0         MOV       C,0xE0 /* A   */.0
   \   000026   500C         JNC       ??zclMultiSensor_event_loop_4
   \   000028                ; Setup parameters for call to function osal_set_event
   \   000028   7A08         MOV       R2,#0x8
   \   00002A   7B00         MOV       R3,#0x0
   \   00002C   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \                     ??zclMultiSensor_event_loop_4:
   \   000034                ; Setup parameters for call to function osal_msg_deallocate
   \   000034   AA..         MOV       R2,?V0
   \   000036   AB..         MOV       R3,?V1
   \   000038   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclMultiSensor_event_loop_0:
   \   00003B                ; Setup parameters for call to function osal_msg_receive
   \   00003B   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000043   8A..         MOV       ?V0,R2
   \   000045   8B..         MOV       ?V1,R3
   \   000047   EA           MOV       A,R2
   \   000048   4B           ORL       A,R3
   \   000049   6020         JZ        ??zclMultiSensor_event_loop_5
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   24CC         ADD       A,#-0x34
   \   000052   600A         JZ        ??zclMultiSensor_event_loop_6
   \   000054   2474         ADD       A,#0x74
   \   000056   60C8         JZ        ??zclMultiSensor_event_loop_3
   \   000058   24EF         ADD       A,#-0x11
   \   00005A   6007         JZ        ??zclMultiSensor_event_loop_7
   \   00005C   80D6         SJMP      ??zclMultiSensor_event_loop_4
   \                     ??zclMultiSensor_event_loop_6:
   \   00005E                ; Setup parameters for call to function zclMultiSensor_ProcessIncomingMsg
   \   00005E   12....       LCALL     `??zclMultiSensor_ProcessIncomingMsg::?relay`; Banked call to: zclMultiSensor_ProcessIncomingMsg
   \   000061   80D1         SJMP      ??zclMultiSensor_event_loop_4
   \                     ??zclMultiSensor_event_loop_7:
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   90....       MOV       DPTR,#NwkStateShadow
   \   000068   F0           MOVX      @DPTR,A
   \   000069   80C9         SJMP      ??zclMultiSensor_event_loop_4
   \                     ??zclMultiSensor_event_loop_5:
   \   00006B   EE           MOV       A,R6
   \   00006C   FA           MOV       R2,A
   \   00006D   EF           MOV       A,R7
   \   00006E   6480         XRL       A,#0x80
   \   000070   02....       LJMP      ??zclMultiSensor_event_loop_8 & 0xFFFF
    322          #endif
    323            
    324            if ( events & MULTISENSOR_CHECK_REPORT__EVT )
   \                     ??zclMultiSensor_event_loop_1:
   \   000073   EA           MOV       A,R2
   \   000074   5404         ANL       A,#0x4
   \   000076   6008         JZ        ??zclMultiSensor_event_loop_9
    325            {
    326              zclMultiSensor_CheckReportConfig();
   \   000078                ; Setup parameters for call to function zclMultiSensor_CheckReportConfig
   \   000078   12....       LCALL     `??zclMultiSensor_CheckReportConfig::?relay`; Banked call to: zclMultiSensor_CheckReportConfig
    327              return ( events ^ MULTISENSOR_CHECK_REPORT__EVT );
   \   00007B   EE           MOV       A,R6
   \   00007C   6404         XRL       A,#0x4
   \   00007E   807B         SJMP      ??zclMultiSensor_event_loop_2
    328            }
    329            
    330            if ( events & MULTISENSOR_CHECK_HOLD_KEY_EVT)
   \                     ??zclMultiSensor_event_loop_9:
   \   000080   EA           MOV       A,R2
   \   000081   5408         ANL       A,#0x8
   \   000083   607B         JZ        ??zclMultiSensor_event_loop_10
    331            {
    332              if ( HalKeyRead() & HAL_KEY_SW_1 )
   \   000085                ; Setup parameters for call to function HalKeyRead
   \   000085   12....       LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000088   E9           MOV       A,R1
   \   000089   F8           MOV       R0,A
   \   00008A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00008C   90....       MOV       DPTR,#holdKeyCounter
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   5012         JNC       ??zclMultiSensor_event_loop_11
    333              {
    334                holdKeyCounter++;
   \   000092   04           INC       A
   \   000093   F0           MOVX      @DPTR,A
    335                osal_start_timerEx( zclMultiSensor_TaskID, MULTISENSOR_CHECK_HOLD_KEY_EVT, 1000 );
   \   000094                ; Setup parameters for call to function osal_start_timerEx
   \   000094   90....       MOV       DPTR,#__Constant_3e8
   \   000097   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00009A   7A08         MOV       R2,#0x8
   \   00009C   12....       LCALL     ?Subroutine20 & 0xFFFF
    336              }
   \                     ??CrossCallReturnLabel_25:
   \   00009F   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A2   8054         SJMP      ??zclMultiSensor_event_loop_12
    337              else {
    338                if ( holdKeyCounter >= 5 )
   \                     ??zclMultiSensor_event_loop_11:
   \   0000A4   C3           CLR       C
   \   0000A5   9405         SUBB      A,#0x5
   \   0000A7   404A         JC        ??zclMultiSensor_event_loop_13
    339                {
    340                  if(NwkStateShadow == DEV_END_DEVICE)
   \   0000A9   90....       MOV       DPTR,#NwkStateShadow
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   6406         XRL       A,#0x6
   \   0000AF   7038         JNZ       ??zclMultiSensor_event_loop_14
    341                  {
    342                    NLME_LeaveReq_t leaveReq;        
    343                    leaveReq.extAddr = NULL;
   \   0000B1   85..82       MOV       DPL,?XSP + 0
   \   0000B4   85..83       MOV       DPH,?XSP + 1
   \   0000B7   E4           CLR       A
   \   0000B8   F0           MOVX      @DPTR,A
   \   0000B9   A3           INC       DPTR
   \   0000BA   F0           MOVX      @DPTR,A
    344                    leaveReq.removeChildren = FALSE;
   \   0000BB   7402         MOV       A,#0x2
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   E4           CLR       A
   \   0000C1   F0           MOVX      @DPTR,A
    345                    leaveReq.rejoin = FALSE;
   \   0000C2   7403         MOV       A,#0x3
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   E4           CLR       A
   \   0000C8   F0           MOVX      @DPTR,A
    346                    leaveReq.silent = FALSE;
   \   0000C9   7404         MOV       A,#0x4
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   E4           CLR       A
   \   0000CF   F0           MOVX      @DPTR,A
    347                    if ( NLME_LeaveReq( &leaveReq ) == ZSuccess )
   \   0000D0                ; Setup parameters for call to function NLME_LeaveReq
   \   0000D0   AA..         MOV       R2,?XSP + 0
   \   0000D2   AB..         MOV       R3,?XSP + 1
   \   0000D4   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   0000D7   E9           MOV       A,R1
   \   0000D8   7019         JNZ       ??zclMultiSensor_event_loop_13
    348                    {
    349                      HalLedBlink(HAL_LED_1, 12, 50, 100);
   \   0000DA                ; Setup parameters for call to function HalLedBlink
   \   0000DA   7C64         MOV       R4,#0x64
   \   0000DC   7D00         MOV       R5,#0x0
   \   0000DE   7B32         MOV       R3,#0x32
   \   0000E0   7A0C         MOV       R2,#0xc
   \   0000E2   7901         MOV       R1,#0x1
   \   0000E4   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   0000E7   800A         SJMP      ??zclMultiSensor_event_loop_13
    350                    }
    351                  }
    352                  else 
    353                  {
    354                  zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE | ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \                     ??zclMultiSensor_event_loop_14:
   \   0000E9                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000E9   7A03         MOV       R2,#0x3
   \   0000EB   79FF         MOV       R1,#-0x1
   \   0000ED   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    355                  SystemResetSoft();
   \   0000F0                ; Setup parameters for call to function Onboard_soft_reset
   \   0000F0   12....       LCALL     Onboard_soft_reset & 0xFFFF
    356                  }
    357                }
    358                holdKeyCounter = 0;
   \                     ??zclMultiSensor_event_loop_13:
   \   0000F3   90....       MOV       DPTR,#holdKeyCounter
   \   0000F6   E4           CLR       A
   \   0000F7   F0           MOVX      @DPTR,A
    359              }
    360             return ( events ^ MULTISENSOR_CHECK_HOLD_KEY_EVT );   
   \                     ??zclMultiSensor_event_loop_12:
   \   0000F8   EE           MOV       A,R6
   \   0000F9   6408         XRL       A,#0x8
   \                     ??zclMultiSensor_event_loop_2:
   \   0000FB   FA           MOV       R2,A
   \   0000FC   EF           MOV       A,R7
   \                     ??zclMultiSensor_event_loop_8:
   \   0000FD   FB           MOV       R3,A
   \   0000FE   8004         SJMP      ??zclMultiSensor_event_loop_15
    361            }
    362            // Discard unknown events
    363            return 0;
   \                     ??zclMultiSensor_event_loop_10:
   \   000100   7A00         MOV       R2,#0x0
   \   000102   7B00         MOV       R3,#0x0
   \                     ??zclMultiSensor_event_loop_15:
   \   000104   7405         MOV       A,#0x5
   \   000106                REQUIRE ?Subroutine0
   \   000106                ; // Fall through to label ?Subroutine0
    364          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F04         MOV       R7,#0x4
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00000A   7404         MOV       A,#0x4
   \   00000C   22           RET
    365          
    366          
    367          /*********************************************************************
    368           * @fn      zclMultiSensor_LcdDisplayMainMode
    369           *
    370           * @brief   Called to display the main screen on the LCD.
    371           *
    372           * @param   none
    373           *
    374           * @return  none
    375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          static void zclMultiSensor_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg)
   \                     zclMultiSensor_ProcessCommissioningStatus:
    377          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    378              switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   14           DEC       A
   \   00000B   6006         JZ        ??zclMultiSensor_ProcessCommissioningStatus_0
   \   00000D   24FC         ADD       A,#-0x4
   \   00000F   600B         JZ        ??zclMultiSensor_ProcessCommissioningStatus_1
   \   000011   802F         SJMP      ??zclMultiSensor_ProcessCommissioningStatus_2
    379              {
    380                case BDB_COMMISSIONING_FORMATION:         // Not used
    381                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    382                  {
    383                    //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
    384                  }
    385                  else
    386                  {
    387                    //Want to try other channels?
    388                    //try with bdb_setChannelAttribute
    389                  }
    390                break;
    391              case BDB_COMMISSIONING_NWK_STEERING:
    392                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \                     ??zclMultiSensor_ProcessCommissioningStatus_0:
   \   000013   8A82         MOV       DPL,R2
   \   000015   8B83         MOV       DPH,R3
   \   000017   E0           MOVX      A,@DPTR
   \   000018   7028         JNZ       ??zclMultiSensor_ProcessCommissioningStatus_2
   \   00001A   8009         SJMP      ??zclMultiSensor_ProcessCommissioningStatus_3
    393                {
    394                  //YOUR JOB:
    395                  //We are on the nwk, what now?
    396                  //Flash 6 times to notify that this devigce is on network
    397                  HalLedBlink(HAL_LED_1, 6, 50, 200);
    398                }
    399                  else
    400                  {
    401                    //See the possible errors for nwk steering procedure
    402                    //No suitable networks found
    403                    //Want to try other channels?
    404                    //try with bdb_setChannelAttribute
    405                  }
    406                break;
    407              case BDB_COMMISSIONING_FINDING_BINDING:
    408                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    409                  {
    410                    //YOUR JOB:
    411                  }
    412                  else
    413                  {
    414                    //YOUR JOB:
    415                    //retry?, wait for user interaction?
    416                  }
    417                break;
    418              case BDB_COMMISSIONING_INITIALIZATION:
    419                  //Initialization notification can only be successful. Failure on initialization 
    420                  //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    421                  
    422                  //YOUR JOB:
    423                  //We are on a network, what now?
    424                  
    425                break;
    426          #if ZG_BUILD_ENDDEVICE_TYPE    
    427              case BDB_COMMISSIONING_PARENT_LOST:
    428                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
   \                     ??zclMultiSensor_ProcessCommissioningStatus_1:
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   8B83         MOV       DPH,R3
   \   000020   E0           MOVX      A,@DPTR
   \   000021   640D         XRL       A,#0xd
   \   000023   700F         JNZ       ??zclMultiSensor_ProcessCommissioningStatus_4
    429                {
    430                  //We did recover from losing parent
    431                  //Flash 6 times to notify this device is on network
    432                  HalLedBlink(HAL_LED_1, 6, 50, 200);
   \                     ??zclMultiSensor_ProcessCommissioningStatus_3:
   \   000025                ; Setup parameters for call to function HalLedBlink
   \   000025   7CC8         MOV       R4,#-0x38
   \   000027   7D00         MOV       R5,#0x0
   \   000029   7B32         MOV       R3,#0x32
   \   00002B   7A06         MOV       R2,#0x6
   \   00002D   7901         MOV       R1,#0x1
   \   00002F   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   000032   800E         SJMP      ??zclMultiSensor_ProcessCommissioningStatus_2
    433                }
    434                else
    435                {
    436                  //Parent not found, attempt to rejoin again after a fixed delay
    437                  osal_start_timerEx(zclMultiSensor_TaskID, MULTISENSOR_END_DEVICE_REJOIN_EVT, MULTISENSOR_END_DEVICE_REJOIN_DELAY);
   \                     ??zclMultiSensor_ProcessCommissioningStatus_4:
   \   000034                ; Setup parameters for call to function osal_start_timerEx
   \   000034   90....       MOV       DPTR,#__Constant_3e8
   \   000037   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00003A   7A02         MOV       R2,#0x2
   \   00003C   12....       LCALL     ?Subroutine20 & 0xFFFF
    438                }
    439              break;
    440          #endif 
    441              }
   \                     ??CrossCallReturnLabel_26:
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
    442          }
   \                     ??zclMultiSensor_ProcessCommissioningStatus_2:
   \   000042                REQUIRE ?Subroutine1
   \   000042                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    443          
    444          /*********************************************************************
    445           * @fn      zclMultiSensor_BasicResetCB
    446           *
    447           * @brief   Callback from the ZCL General Cluster Library
    448           *          to set all the Basic Cluster attributes to default values.
    449           *
    450           * @param   none
    451           *
    452           * @return  none
    453           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    454          static void zclMultiSensor_BasicResetCB( void )
   \                     zclMultiSensor_BasicResetCB:
    455          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    456            zclMultiSensor_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclMultiSensor_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     ??zclMultiSensor_ResetAttributesToDefaultValues; Banked call to: zclMultiSensor_ResetAttributesToDefaultValues
    457          }
   \   000007   80..         SJMP      ?Subroutine1
    458          
    459          /*********************************************************************
    460           * @fn      zclMultiSensor_BatteryWarningCB
    461           *
    462           * @brief   Called to handle battery-low situation.
    463           *
    464           * @param   voltLevel - level of severity
    465           *
    466           * @return  none
    467           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    468          void zclMultiSensor_BatteryWarningCB( uint8 voltLevel )
   \                     zclMultiSensor_BatteryWarningCB:
    469          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    470            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
    471            {
    472              // Send warning message to the gateway and blink LED
    473            }
    474            else if ( voltLevel == VOLT_LEVEL_BAD )
    475            {
    476              // Shut down the system
    477            }
    478          }
   \   000000   02....       LJMP      ?BRET
    479          
    480          /******************************************************************************
    481           *
    482           *  Functions for processing ZCL Foundation incoming Command/Response messages
    483           *
    484           *****************************************************************************/
    485          
    486          /*********************************************************************
    487           * @fn      zclMultiSensor_ProcessIncomingMsg
    488           *
    489           * @brief   Process ZCL Foundation incoming message
    490           *
    491           * @param   pInMsg - pointer to the received message
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          static void zclMultiSensor_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
   \                     zclMultiSensor_ProcessIncomingMsg:
    496          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    497            switch ( pInMsg->zclHdr.commandID )
   \   00000A   EA           MOV       A,R2
   \   00000B   2417         ADD       A,#0x17
   \   00000D   FE           MOV       R6,A
   \   00000E   E4           CLR       A
   \   00000F   3B           ADDC      A,R3
   \   000010   FF           MOV       R7,A
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   14           DEC       A
   \   00001E   6012         JZ        ??zclMultiSensor_ProcessIncomingMsg_0
   \   000020   24FD         ADD       A,#-0x3
   \   000022   601B         JZ        ??zclMultiSensor_ProcessIncomingMsg_1
   \   000024   24FE         ADD       A,#-0x2
   \   000026   6024         JZ        ??zclMultiSensor_ProcessIncomingMsg_2
   \   000028   24FE         ADD       A,#-0x2
   \   00002A   6036         JZ        ??zclMultiSensor_ProcessIncomingMsg_3
   \   00002C   24FE         ADD       A,#-0x2
   \   00002E   6037         JZ        ??zclMultiSensor_ProcessIncomingMsg_4
   \   000030   801D         SJMP      ??zclMultiSensor_ProcessIncomingMsg_5
    498            {
    499          #ifdef ZCL_READ
    500              case ZCL_CMD_READ_RSP:
    501                zclMultiSensor_ProcessInReadRspCmd( pInMsg );
   \                     ??zclMultiSensor_ProcessIncomingMsg_0:
   \   000032   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F9           MOV       R1,A
   \   000037   E8           MOV       A,R0
   \   000038   C3           CLR       C
   \   000039   99           SUBB      A,R1
   \   00003A   5013         JNC       ??zclMultiSensor_ProcessIncomingMsg_5
   \   00003C   08           INC       R0
   \   00003D   80F6         SJMP      ??CrossCallReturnLabel_30
    502                break;
    503          #endif
    504          #ifdef ZCL_WRITE
    505              case ZCL_CMD_WRITE_RSP:
    506                zclMultiSensor_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclMultiSensor_ProcessIncomingMsg_1:
   \   00003F   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F9           MOV       R1,A
   \   000044   E8           MOV       A,R0
   \   000045   C3           CLR       C
   \   000046   99           SUBB      A,R1
   \   000047   5006         JNC       ??zclMultiSensor_ProcessIncomingMsg_5
   \   000049   08           INC       R0
   \   00004A   80F6         SJMP      ??CrossCallReturnLabel_31
    507                break;
    508          #endif
    509          #ifdef ZCL_REPORT
    510              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    511              case ZCL_CMD_CONFIG_REPORT:
    512                zclMultiSensor_ProcessInConfigReportCmd( pInMsg );
   \                     ??zclMultiSensor_ProcessIncomingMsg_2:
   \   00004C                ; Setup parameters for call to function zclMultiSensor_ProcessInConfigReportCmd
   \   00004C   12....       LCALL     `??zclMultiSensor_ProcessInConfigReportCmd::?rel`; Banked call to: zclMultiSensor_ProcessInConfigReportCmd
    513                break;
    514                case ZCL_CMD_READ_REPORT_CFG:
    515                zclMultiSensor_ProcessInReadReportCfgCmd( pInMsg );
    516                break;
    517              case ZCL_CMD_CONFIG_REPORT_RSP:
    518                //zclMultiSensor_ProcessInConfigReportRspCmd( pInMsg );
    519                break;
    520              case ZCL_CMD_READ_REPORT_CFG_RSP:
    521                //zclMultiSensor_ProcessInReadReportCfgRspCmd( pInMsg );
    522                break;
    523          
    524              case ZCL_CMD_REPORT:
    525                zclMultiSensor_ProcessInReportCmd( pInMsg );
    526                break;
    527          #endif
    528              case ZCL_CMD_DEFAULT_RSP:
    529                zclMultiSensor_ProcessInDefaultRspCmd( pInMsg );
    530                break;
    531                
    532              default:
    533                break;
    534            }
    535          
    536            if ( pInMsg->attrCmd )
   \                     ??zclMultiSensor_ProcessIncomingMsg_5:
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000056   EA           MOV       A,R2
   \   000057   4B           ORL       A,R3
   \   000058   6003         JZ        ??zclMultiSensor_ProcessIncomingMsg_6
    537            {
    538              osal_mem_free( pInMsg->attrCmd );
   \   00005A                ; Setup parameters for call to function osal_mem_free
   \   00005A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    539            }
    540          }
   \                     ??zclMultiSensor_ProcessIncomingMsg_6:
   \   00005D   740C         MOV       A,#0xc
   \   00005F   02....       LJMP      ?Subroutine0 & 0xFFFF
   \                     ??zclMultiSensor_ProcessIncomingMsg_3:
   \   000062                ; Setup parameters for call to function zclMultiSensor_ProcessInReadReportCfgCmd
   \   000062   12....       LCALL     `??zclMultiSensor_ProcessInReadReportCfgCmd::?re`; Banked call to: zclMultiSensor_ProcessInReadReportCfgCmd
   \   000065   80E8         SJMP      ??zclMultiSensor_ProcessIncomingMsg_5
   \                     ??zclMultiSensor_ProcessIncomingMsg_4:
   \   000067   8E82         MOV       DPL,R6
   \   000069   8F83         MOV       DPH,R7
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F5..         MOV       ?V0,A
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   F5..         MOV       ?V1,A
   \   000072   85..82       MOV       DPL,?XSP + 0
   \   000075   85..83       MOV       DPH,?XSP + 1
   \   000078   E4           CLR       A
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   A3           INC       DPTR
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   7408         MOV       A,#0x8
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   7402         MOV       A,#0x2
   \   000083   F0           MOVX      @DPTR,A
   \   000084   EA           MOV       A,R2
   \   000085   2408         ADD       A,#0x8
   \   000087   F8           MOV       R0,A
   \   000088   E4           CLR       A
   \   000089   3B           ADDC      A,R3
   \   00008A   F9           MOV       R1,A
   \   00008B   E8           MOV       A,R0
   \   00008C   FA           MOV       R2,A
   \   00008D   E9           MOV       A,R1
   \   00008E   8882         MOV       DPL,R0
   \   000090   F583         MOV       DPH,A
   \   000092   E0           MOVX      A,@DPTR
   \   000093   F5..         MOV       ?V2,A
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   F5..         MOV       ?V3,A
   \   000099   78..         MOV       R0,#?V2
   \   00009B   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zclMultiSensor_ProcessIncoming_0`:
   \   00009E   0000         DW        0
   \   0000A0   0600         DW        6
   \   0000A2   0004         DW        1024
   \   0000A4   ....         DW        ??zclMultiSensor_ProcessIncomingMsg_7
   \   0000A6   0204         DW        1026
   \   0000A8   ....         DW        ??zclMultiSensor_ProcessIncomingMsg_8
   \   0000AA   0504         DW        1029
   \   0000AC   ....         DW        ??zclMultiSensor_ProcessIncomingMsg_9
   \   0000AE   0604         DW        1030
   \   0000B0   ....         DW        ??zclMultiSensor_ProcessIncomingMsg_10
   \   0000B2   000C         DW        3072
   \   0000B4   ....         DW        ??zclMultiSensor_ProcessIncomingMsg_11
   \   0000B6   010C         DW        3073
   \   0000B8   ....         DW        ??zclMultiSensor_ProcessIncomingMsg_12
   \   0000BA   ....         DW        ??zclMultiSensor_ProcessIncomingMsg_13
   \                     ??zclMultiSensor_ProcessIncomingMsg_12:
   \   0000BC   7409         MOV       A,#0x9
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   7407         MOV       A,#0x7
   \   0000C3   802B         SJMP      ??zclMultiSensor_ProcessIncomingMsg_14
   \                     ??zclMultiSensor_ProcessIncomingMsg_11:
   \   0000C5   7409         MOV       A,#0x9
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   7406         MOV       A,#0x6
   \   0000CC   8022         SJMP      ??zclMultiSensor_ProcessIncomingMsg_14
   \                     ??zclMultiSensor_ProcessIncomingMsg_10:
   \   0000CE   7409         MOV       A,#0x9
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   7404         MOV       A,#0x4
   \   0000D5   8019         SJMP      ??zclMultiSensor_ProcessIncomingMsg_14
   \                     ??zclMultiSensor_ProcessIncomingMsg_9:
   \   0000D7   7409         MOV       A,#0x9
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   7403         MOV       A,#0x3
   \   0000DE   8010         SJMP      ??zclMultiSensor_ProcessIncomingMsg_14
   \                     ??zclMultiSensor_ProcessIncomingMsg_8:
   \   0000E0   7409         MOV       A,#0x9
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   7402         MOV       A,#0x2
   \   0000E7   8007         SJMP      ??zclMultiSensor_ProcessIncomingMsg_14
   \                     ??zclMultiSensor_ProcessIncomingMsg_7:
   \   0000E9   7409         MOV       A,#0x9
   \   0000EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EE   7401         MOV       A,#0x1
   \                     ??zclMultiSensor_ProcessIncomingMsg_14:
   \   0000F0   F0           MOVX      @DPTR,A
   \                     ??zclMultiSensor_ProcessIncomingMsg_13:
   \   0000F1                ; Setup parameters for call to function zcl_SendReportCmd
   \   0000F1   75..00       MOV       ?V2,#0x0
   \   0000F4   78..         MOV       R0,#?V2
   \   0000F6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F9   78..         MOV       R0,#?V2
   \   0000FB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FE   75..01       MOV       ?V2,#0x1
   \   000101   78..         MOV       R0,#?V2
   \   000103   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000106   78..         MOV       R0,#?V0
   \   000108   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010B   8A82         MOV       DPL,R2
   \   00010D   8983         MOV       DPH,R1
   \   00010F   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000112   7405         MOV       A,#0x5
   \   000114   12....       LCALL     ?XSTACK_DISP101_8
   \   000117   7908         MOV       R1,#0x8
   \   000119   12....       LCALL     `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   00011C   7405         MOV       A,#0x5
   \   00011E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000121   E9           MOV       A,R1
   \   000122   7003         JNZ       $+5
   \   000124   02....       LJMP      ??zclMultiSensor_ProcessIncomingMsg_5 & 0xFFFF
   \                     ??zclMultiSensor_ProcessIncomingMsg_15:
   \   000127   80FE         SJMP      ??zclMultiSensor_ProcessIncomingMsg_15

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000007   8882         MOV       DPL,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   7800         MOV       R0,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET
    541          
    542          #ifdef ZCL_READ
    543          /*********************************************************************
    544           * @fn      zclMultiSensor_ProcessInReadRspCmd
    545           *
    546           * @brief   Process the "Profile" Read Response Command
    547           *
    548           * @param   pInMsg - incoming message to process
    549           *
    550           * @return  none
    551           */
    552          static uint8 zclMultiSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    553          {
    554            zclReadRspCmd_t *readRspCmd;
    555            uint8 i;
    556          
    557            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    558            for ( i = 0; i < readRspCmd->numAttr; i++ )
    559            {
    560              // Notify the originator of the results of the original read attributes
    561              // attempt and, for each successfull request, the value of the requested
    562              // attribute
    563            }
    564          
    565            return ( TRUE );
    566          }
    567          #endif // ZCL_READ
    568          
    569          #ifdef ZCL_WRITE
    570          /*********************************************************************
    571           * @fn      zclMultiSensor_ProcessInWriteRspCmd
    572           *
    573           * @brief   Process the "Profile" Write Response Command
    574           *
    575           * @param   pInMsg - incoming message to process
    576           *
    577           * @return  none
    578           */
    579          static uint8 zclMultiSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    580          {
    581            zclWriteRspCmd_t *writeRspCmd;
    582            uint8 i;
    583          
    584            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    585            for ( i = 0; i < writeRspCmd->numAttr; i++ )
    586            {
    587              // Notify the device of the results of the its original write attributes
    588              // command.
    589            }
    590          
    591            return ( TRUE );
    592          }
    593          #endif // ZCL_WRITE
    594          
    595          /*********************************************************************
    596           * @fn      zclMultiSensor_ProcessInDefaultRspCmd
    597           *
    598           * @brief   Process the "Profile" Default Response Command
    599           *
    600           * @param   pInMsg - incoming message to process
    601           *
    602           * @return  none
    603           */
    604          static uint8 zclMultiSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    605          {
    606            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    607          
    608            // Device is notified of the Default Response command.
    609            (void)pInMsg;
    610          
    611            return ( TRUE );
    612          }
    613          
    614          /*********************************************************************
    615           * @fn      zclSampleTemperatureSensor_HandleKeys
    616           *
    617           * @brief   Handles all key events for this device.
    618           *
    619           * @param   shift - true if in shift/alt.
    620           * @param   keys - bit field for key events. Valid entries:
    621           *                 HAL_KEY_SW_5
    622          *                 HAL_KEY_SW_4
    623          *                 HAL_KEY_SW_3
    624          *                 HAL_KEY_SW_2
    625          *                 HAL_KEY_SW_1
    626          *
    627          * @return  none
    628          */
    629          static void zclMultiSensor_HandleKeys( byte shift, byte keys )
    630          {
    631            if ( keys & HAL_KEY_SW_1 )
    632            {
    633              osal_set_event( zclMultiSensor_TaskID, MULTISENSOR_CHECK_HOLD_KEY_EVT);
    634            }
    635          }
    636          
    637          static void zclMultiSensor_UART_Init(void)
    638          {
    639            halUARTCfg_t uartConfig;
    640            
    641            // configure UART
    642            uartConfig.configured           = TRUE;
    643            uartConfig.baudRate             = HAL_UART_BR_38400;
    644            uartConfig.flowControl          = FALSE;
    645            uartConfig.flowControlThreshold = 48;
    646            uartConfig.rx.maxBufSize        = 75;
    647            uartConfig.tx.maxBufSize        = 7;
    648            uartConfig.idleTimeout          = 6;
    649            uartConfig.intEnable            = TRUE;
    650            uartConfig.callBackFunc         = uartEventApplicationCB;
    651            
    652            HalUARTOpen( HAL_UART_PORT_0, &uartConfig);
    653          }
    654          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    655          void uartEventApplicationCB(uint8 port, uint8 event)
   \                     uartEventApplicationCB:
    656          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
    657              uint16 valueOfSensors[NUMBER_OF_SENSOR] = {0};
   \   00000C   90....       MOV       DPTR,#`?<Constant {0, 0, 0}>`
   \   00000F   7401         MOV       A,#0x1
   \   000011   12....       LCALL     ?XSTACK_DISP102_8
   \   000014   7406         MOV       A,#0x6
   \   000016   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    658              int16 valueOfTemp = 0;
   \   000019   FE           MOV       R6,A
   \   00001A   FF           MOV       R7,A
    659              uint16 valueOfHum = 0;
   \   00001B   F5..         MOV       ?V0,A
   \   00001D   F5..         MOV       ?V1,A
    660              uint8 valueOfPir = 0;
   \   00001F   75..00       MOV       ?V2,#0x0
    661              int fieldIndex = 0;         
   \   000022   F5..         MOV       ?V4,A
   \   000024   F5..         MOV       ?V5,A
    662              
    663              if ( event & HAL_UART_RX_TIMEOUT) 
   \   000026   EA           MOV       A,R2
   \   000027   A2E2         MOV       C,0xE0 /* A   */.2
   \   000029   4040         JC        ??uartEventApplicationCB_0
   \   00002B   02....       LJMP      ??uartEventApplicationCB_1 & 0xFFFF
    664              {
    665                while ( Hal_UART_RxBufLen(port) > 0 )
    666                {
    667                  uint8 ch;
    668                  HalUARTRead(port, &ch, 1);
    669                  
    670                  if ( ch >= '0' && ch <= '9' )     // is this an ascii digit between 0 and 9 ?
    671                  {
    672                    if ( uartFlag == UART_PERIOD )
    673                    {
    674                      valueOfSensors[fieldIndex] = (valueOfSensors[fieldIndex] * 10) + (ch - '0');
   \                     ??uartEventApplicationCB_2:
   \   00002E   A8..         MOV       R0,?V4
   \   000030   E8           MOV       A,R0
   \   000031   28           ADD       A,R0
   \   000032   F8           MOV       R0,A
   \   000033   E5..         MOV       A,?V5
   \   000035   33           RLC       A
   \   000036   F9           MOV       R1,A
   \   000037   7401         MOV       A,#0x1
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   E582         MOV       A,DPL
   \   00003E   28           ADD       A,R0
   \   00003F   F8           MOV       R0,A
   \   000040   E583         MOV       A,DPH
   \   000042   39           ADDC      A,R1
   \   000043   F9           MOV       R1,A
   \   000044   8882         MOV       DPL,R0
   \   000046   F583         MOV       DPH,A
   \   000048   12....       LCALL     ??Subroutine53_0 & 0xFFFF
    675                    }
   \                     ??CrossCallReturnLabel_113:
   \   00004B   EC           MOV       A,R4
   \   00004C   75F00A       MOV       B,#0xa
   \   00004F   A4           MUL       AB
   \   000050   FC           MOV       R4,A
   \   000051   85F0..       MOV       ?V7,B
   \   000054   75F00A       MOV       B,#0xa
   \   000057   ED           MOV       A,R5
   \   000058   A4           MUL       AB
   \   000059   25..         ADD       A,?V7
   \   00005B   FD           MOV       R5,A
   \   00005C   EC           MOV       A,R4
   \   00005D   2A           ADD       A,R2
   \   00005E   FA           MOV       R2,A
   \   00005F   ED           MOV       A,R5
   \   000060   3B           ADDC      A,R3
   \   000061   FB           MOV       R3,A
   \   000062   8882         MOV       DPL,R0
   \   000064   8983         MOV       DPH,R1
   \   000066   EA           MOV       A,R2
   \   000067   F0           MOVX      @DPTR,A
   \   000068   A3           INC       DPTR
   \   000069   EB           MOV       A,R3
   \                     ??uartEventApplicationCB_3:
   \   00006A   F0           MOVX      @DPTR,A
   \                     ??uartEventApplicationCB_0:
   \   00006B                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   00006B   A9..         MOV       R1,?V3
   \   00006D   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000070   EA           MOV       A,R2
   \   000071   4B           ORL       A,R3
   \   000072   7003         JNZ       $+5
   \   000074   02....       LJMP      ??uartEventApplicationCB_4 & 0xFFFF
   \   000077                ; Setup parameters for call to function HalUARTRead
   \   000077   7C01         MOV       R4,#0x1
   \   000079   7D00         MOV       R5,#0x0
   \   00007B   AA..         MOV       R2,?XSP + 0
   \   00007D   AB..         MOV       R3,?XSP + 1
   \   00007F   A9..         MOV       R1,?V3
   \   000081   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   000084   85..82       MOV       DPL,?XSP + 0
   \   000087   85..83       MOV       DPH,?XSP + 1
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   24D0         ADD       A,#-0x30
   \   00008D   C3           CLR       C
   \   00008E   940A         SUBB      A,#0xa
   \   000090   E0           MOVX      A,@DPTR
   \   000091   506E         JNC       ??uartEventApplicationCB_5
   \   000093   F8           MOV       R0,A
   \   000094   24D0         ADD       A,#-0x30
   \   000096   FA           MOV       R2,A
   \   000097   E4           CLR       A
   \   000098   34FF         ADDC      A,#-0x1
   \   00009A   FB           MOV       R3,A
   \   00009B   90....       MOV       DPTR,#uartFlag
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   6401         XRL       A,#0x1
   \   0000A1   608B         JZ        ??uartEventApplicationCB_2
    676                    else if ( uartFlag == UART_TEMP)
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   6402         XRL       A,#0x2
   \   0000A6   701F         JNZ       ??uartEventApplicationCB_6
    677                    {
    678                      valueOfTemp = ( valueOfTemp * 10 ) + (ch - '0');
   \   0000A8   EE           MOV       A,R6
   \   0000A9   75F00A       MOV       B,#0xa
   \   0000AC   A4           MUL       AB
   \   0000AD   FE           MOV       R6,A
   \   0000AE   AAF0         MOV       R2,B
   \   0000B0   75F00A       MOV       B,#0xa
   \   0000B3   EF           MOV       A,R7
   \   0000B4   A4           MUL       AB
   \   0000B5   2A           ADD       A,R2
   \   0000B6   FF           MOV       R7,A
   \   0000B7   EE           MOV       A,R6
   \   0000B8   28           ADD       A,R0
   \   0000B9   F8           MOV       R0,A
   \   0000BA   E4           CLR       A
   \   0000BB   3F           ADDC      A,R7
   \   0000BC   F9           MOV       R1,A
   \   0000BD   E8           MOV       A,R0
   \   0000BE   24D0         ADD       A,#-0x30
   \   0000C0   FE           MOV       R6,A
   \   0000C1   E9           MOV       A,R1
   \   0000C2   34FF         ADDC      A,#-0x1
   \   0000C4   FF           MOV       R7,A
   \   0000C5   80A4         SJMP      ??uartEventApplicationCB_0
    679                    }
    680                    else if ( uartFlag == UART_HUM )
   \                     ??uartEventApplicationCB_6:
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   6403         XRL       A,#0x3
   \   0000CA   701F         JNZ       ??uartEventApplicationCB_7
    681                    {
    682                      valueOfHum = ( valueOfHum * 10 ) + (ch - '0');
   \   0000CC   E5..         MOV       A,?V0
   \   0000CE   75F00A       MOV       B,#0xa
   \   0000D1   A4           MUL       AB
   \   0000D2   F5..         MOV       ?V0,A
   \   0000D4   A8F0         MOV       R0,B
   \   0000D6   75F00A       MOV       B,#0xa
   \   0000D9   E5..         MOV       A,?V1
   \   0000DB   A4           MUL       AB
   \   0000DC   28           ADD       A,R0
   \   0000DD   F5..         MOV       ?V1,A
   \   0000DF   E5..         MOV       A,?V0
   \   0000E1   2A           ADD       A,R2
   \   0000E2   F5..         MOV       ?V0,A
   \   0000E4   E5..         MOV       A,?V1
   \   0000E6   3B           ADDC      A,R3
   \   0000E7   F5..         MOV       ?V1,A
   \   0000E9   8080         SJMP      ??uartEventApplicationCB_0
    683                    }
    684                    else if ( uartFlag == UART_PIR )
   \                     ??uartEventApplicationCB_7:
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   6404         XRL       A,#0x4
   \   0000EE   6003         JZ        $+5
   \   0000F0   02....       LJMP      ??uartEventApplicationCB_0 & 0xFFFF
    685                    {
    686                      valueOfPir = ( valueOfPir * 10 ) + (ch - '0');
   \   0000F3   75F00A       MOV       B,#0xa
   \   0000F6   E5..         MOV       A,?V2
   \   0000F8   A4           MUL       AB
   \   0000F9   28           ADD       A,R0
   \   0000FA   24D0         ADD       A,#-0x30
   \   0000FC   F5..         MOV       ?V2,A
   \   0000FE   02....       LJMP      ??uartEventApplicationCB_0 & 0xFFFF
    687                    }
    688                  }
    689                  else if (ch == ',')     // comma is our separator, so move on to the next field
   \                     ??uartEventApplicationCB_5:
   \   000101   642C         XRL       A,#0x2c
   \   000103   7029         JNZ       ??uartEventApplicationCB_8
    690                  {
    691                    if ( uartFlag == UART_PERIOD )
   \   000105   90....       MOV       DPTR,#uartFlag
   \   000108   E0           MOVX      A,@DPTR
   \   000109   6401         XRL       A,#0x1
   \   00010B   6003         JZ        $+5
   \   00010D   02....       LJMP      ??uartEventApplicationCB_0 & 0xFFFF
    692                    {
    693                      if (fieldIndex < NUMBER_OF_SENSOR - 1)
   \   000110   C3           CLR       C
   \   000111   E5..         MOV       A,?V4
   \   000113   9402         SUBB      A,#0x2
   \   000115   E5..         MOV       A,?V5
   \   000117   9400         SUBB      A,#0x0
   \   000119   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00011B   65D0         XRL       A,PSW
   \   00011D   33           RLC       A
   \   00011E   4003         JC        $+5
   \   000120   02....       LJMP      ??uartEventApplicationCB_0 & 0xFFFF
    694                        fieldIndex++;       // increment field index
   \   000123   05..         INC       ?V4
   \   000125   E5..         MOV       A,?V4
   \   000127   7002         JNZ       ??uartEventApplicationCB_9
   \   000129   05..         INC       ?V5
   \                     ??uartEventApplicationCB_9:
   \   00012B   02....       LJMP      ??uartEventApplicationCB_0 & 0xFFFF
    695                    }
    696          
    697                  }
    698                  else if ( ch == 'O' )
   \                     ??uartEventApplicationCB_8:
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   644F         XRL       A,#0x4f
   \   000131   7008         JNZ       ??uartEventApplicationCB_10
    699                  {
    700                    
    701                    uartFlag = UART_PIR;
   \   000133   90....       MOV       DPTR,#uartFlag
   \   000136   7404         MOV       A,#0x4
   \   000138   02....       LJMP      ??uartEventApplicationCB_3 & 0xFFFF
    702                  }
    703                  else if ( ch == 'P' )
   \                     ??uartEventApplicationCB_10:
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   6450         XRL       A,#0x50
   \   00013E   7008         JNZ       ??uartEventApplicationCB_11
    704                  {
    705                    uartFlag = UART_PERIOD;
   \   000140   90....       MOV       DPTR,#uartFlag
   \                     ??uartEventApplicationCB_12:
   \   000143   7401         MOV       A,#0x1
   \   000145   02....       LJMP      ??uartEventApplicationCB_3 & 0xFFFF
    706                  }
    707                  else if ( ch == 'T' )
   \                     ??uartEventApplicationCB_11:
   \   000148   E0           MOVX      A,@DPTR
   \   000149   6454         XRL       A,#0x54
   \   00014B   7008         JNZ       ??uartEventApplicationCB_13
    708                  {
    709                    uartFlag = UART_TEMP;
   \   00014D   90....       MOV       DPTR,#uartFlag
   \   000150   7402         MOV       A,#0x2
   \   000152   02....       LJMP      ??uartEventApplicationCB_3 & 0xFFFF
    710                  }
    711                  else if ( ch == 'H' )
   \                     ??uartEventApplicationCB_13:
   \   000155   E0           MOVX      A,@DPTR
   \   000156   6448         XRL       A,#0x48
   \   000158   7008         JNZ       ??uartEventApplicationCB_14
    712                  {
    713                    uartFlag = UART_HUM;
   \   00015A   90....       MOV       DPTR,#uartFlag
   \   00015D   7403         MOV       A,#0x3
   \   00015F   02....       LJMP      ??uartEventApplicationCB_3 & 0xFFFF
    714                  }
    715                  else if ( ch == '-' )
   \                     ??uartEventApplicationCB_14:
   \   000162   E0           MOVX      A,@DPTR
   \   000163   642D         XRL       A,#0x2d
   \   000165   7005         JNZ       ??uartEventApplicationCB_15
    716                  {
    717                    signTempFlag = TRUE;
   \   000167   90....       MOV       DPTR,#signTempFlag
   \   00016A   80D7         SJMP      ??uartEventApplicationCB_12
    718                  }
    719                  else
    720                  {
    721          //          // any character not a digit or comma ends the acquisition of fields
    722          //          // In this project, it's the newline character sent by the STM32 MCU
    723                    if(uartFlag == UART_PERIOD )
   \                     ??uartEventApplicationCB_15:
   \   00016C   90....       MOV       DPTR,#uartFlag
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   6401         XRL       A,#0x1
   \   000172   702E         JNZ       ??uartEventApplicationCB_16
    724                    {
    725                      zclMultiSensor_Light_MeasuredValue = valueOfSensors[INDEX_LIGHT];
   \   000174   7401         MOV       A,#0x1
   \   000176   12....       LCALL     ?XSTACK_DISP0_8
   \   000179   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00017C   90....       MOV       DPTR,#zclMultiSensor_Light_MeasuredValue
   \   00017F   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    726                      zclMultiSensor_TVOC_MeasuredValue = valueOfSensors[INDEX_TVOC];
   \                     ??CrossCallReturnLabel_81:
   \   000182   7403         MOV       A,#0x3
   \   000184   12....       LCALL     ?XSTACK_DISP0_8
   \   000187   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00018A   90....       MOV       DPTR,#zclMultiSensor_TVOC_MeasuredValue
   \   00018D   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    727                      zclMultiSensor_CO2_MeasuredValue = valueOfSensors[INDEX_CO2];
   \                     ??CrossCallReturnLabel_82:
   \   000190   7405         MOV       A,#0x5
   \   000192   12....       LCALL     ?XSTACK_DISP0_8
   \   000195   12....       LCALL     ??Subroutine43_0 & 0xFFFF
    728                    }
   \                     ??CrossCallReturnLabel_64:
   \   000198   90....       MOV       DPTR,#zclMultiSensor_CO2_MeasuredValue
   \   00019B   E8           MOV       A,R0
   \   00019C   F0           MOVX      @DPTR,A
   \   00019D   A3           INC       DPTR
   \   00019E   E9           MOV       A,R1
   \   00019F   02....       LJMP      ??uartEventApplicationCB_3 & 0xFFFF
    729                    else if ( uartFlag == UART_HUM )
   \                     ??uartEventApplicationCB_16:
   \   0001A2   E0           MOVX      A,@DPTR
   \   0001A3   6403         XRL       A,#0x3
   \   0001A5   7028         JNZ       ??uartEventApplicationCB_17
    730                    {
    731                      zclMultiSensor_Humidity_MeasuredValue = valueOfHum;
   \   0001A7   90....       MOV       DPTR,#zclMultiSensor_Humidity_MeasuredValue
   \   0001AA   E5..         MOV       A,?V0
   \   0001AC   F0           MOVX      @DPTR,A
   \   0001AD   A3           INC       DPTR
   \   0001AE   E5..         MOV       A,?V1
   \   0001B0   F0           MOVX      @DPTR,A
    732                      sendZclAttrChangeReport( ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY, ATTRID_MS_RELATIVE_HUMIDITY_MEASURED_VALUE, (uint8 *)&zclMultiSensor_Humidity_MeasuredValue);
   \   0001B1                ; Setup parameters for call to function sendZclAttrChangeReport
   \   0001B1   75....       MOV       ?V8,#zclMultiSensor_Humidity_MeasuredValue & 0xff
   \   0001B4   75....       MOV       ?V9,#(zclMultiSensor_Humidity_MeasuredValue >> 8) & 0xff
   \   0001B7   78..         MOV       R0,#?V8
   \   0001B9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BC   7C00         MOV       R4,#0x0
   \   0001BE   7D00         MOV       R5,#0x0
   \   0001C0   7A05         MOV       R2,#0x5
   \                     ??uartEventApplicationCB_18:
   \   0001C2   7B04         MOV       R3,#0x4
   \   0001C4   12....       LCALL     `??sendZclAttrChangeReport::?relay`; Banked call to: sendZclAttrChangeReport
   \   0001C7   7402         MOV       A,#0x2
   \   0001C9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001CC   02....       LJMP      ??uartEventApplicationCB_0 & 0xFFFF
    733                    }
    734                    else if ( uartFlag == UART_TEMP )
   \                     ??uartEventApplicationCB_17:
   \   0001CF   E0           MOVX      A,@DPTR
   \   0001D0   6402         XRL       A,#0x2
   \   0001D2   7031         JNZ       ??uartEventApplicationCB_19
    735                    {
    736                      if (signTempFlag)
   \   0001D4   90....       MOV       DPTR,#signTempFlag
   \   0001D7   E0           MOVX      A,@DPTR
   \   0001D8   6010         JZ        ??uartEventApplicationCB_20
    737                      {
    738                        zclMultiSensor_Temperature_MeasuredValue = (-1) * valueOfTemp;  
   \   0001DA   C3           CLR       C
   \   0001DB   E4           CLR       A
   \   0001DC   9E           SUBB      A,R6
   \   0001DD   F8           MOV       R0,A
   \   0001DE   E4           CLR       A
   \   0001DF   9F           SUBB      A,R7
   \   0001E0   F9           MOV       R1,A
   \   0001E1   90....       MOV       DPTR,#zclMultiSensor_Temperature_MeasuredValue
   \   0001E4   E8           MOV       A,R0
   \   0001E5   F0           MOVX      @DPTR,A
   \   0001E6   A3           INC       DPTR
   \   0001E7   E9           MOV       A,R1
   \   0001E8   8007         SJMP      ??uartEventApplicationCB_21
    739                      }
    740                      else
    741                      {
    742                        zclMultiSensor_Temperature_MeasuredValue = valueOfTemp;  
   \                     ??uartEventApplicationCB_20:
   \   0001EA   90....       MOV       DPTR,#zclMultiSensor_Temperature_MeasuredValue
   \   0001ED   EE           MOV       A,R6
   \   0001EE   F0           MOVX      @DPTR,A
   \   0001EF   A3           INC       DPTR
   \   0001F0   EF           MOV       A,R7
   \                     ??uartEventApplicationCB_21:
   \   0001F1   F0           MOVX      @DPTR,A
    743                      }
    744                      sendZclAttrChangeReport( ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT, ATTRID_MS_TEMPERATURE_MEASURED_VALUE, (uint8 *)&zclMultiSensor_Temperature_MeasuredValue);
   \   0001F2                ; Setup parameters for call to function sendZclAttrChangeReport
   \   0001F2   75....       MOV       ?V8,#zclMultiSensor_Temperature_MeasuredValue & 0xff
   \   0001F5   75....       MOV       ?V9,#(zclMultiSensor_Temperature_MeasuredValue >> 8) & 0xff
   \   0001F8   78..         MOV       R0,#?V8
   \   0001FA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001FD   7C00         MOV       R4,#0x0
   \   0001FF   7D00         MOV       R5,#0x0
   \   000201   7A02         MOV       R2,#0x2
   \   000203   80BD         SJMP      ??uartEventApplicationCB_18
    745                    }
    746          
    747                    else if ( uartFlag == UART_PIR )
   \                     ??uartEventApplicationCB_19:
   \   000205   E0           MOVX      A,@DPTR
   \   000206   6404         XRL       A,#0x4
   \   000208   6003         JZ        $+5
   \   00020A   02....       LJMP      ??uartEventApplicationCB_0 & 0xFFFF
    748                    {
    749                      zclMultiSensor_Pir_Status = (uint8)valueOfPir;
   \   00020D   E5..         MOV       A,?V2
   \   00020F   90....       MOV       DPTR,#zclMultiSensor_Pir_Status
   \   000212   F0           MOVX      @DPTR,A
    750                      sendZclAttrChangeReport( ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING, ATTRID_MS_OCCUPANCY_SENSING_CONFIG_OCCUPANCY, &zclMultiSensor_Pir_Status);
   \   000213                ; Setup parameters for call to function sendZclAttrChangeReport
   \   000213   75....       MOV       ?V8,#zclMultiSensor_Pir_Status & 0xff
   \   000216   75....       MOV       ?V9,#(zclMultiSensor_Pir_Status >> 8) & 0xff
   \   000219   78..         MOV       R0,#?V8
   \   00021B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00021E   7C00         MOV       R4,#0x0
   \   000220   7D00         MOV       R5,#0x0
   \   000222   7A06         MOV       R2,#0x6
   \   000224   809C         SJMP      ??uartEventApplicationCB_18
    751                    }
    752                  }
    753                }
    754                uartFlag = UART_NONE;
   \                     ??uartEventApplicationCB_4:
   \   000226   90....       MOV       DPTR,#uartFlag
   \   000229   E4           CLR       A
   \   00022A   F0           MOVX      @DPTR,A
    755                signTempFlag = FALSE;
   \   00022B   90....       MOV       DPTR,#signTempFlag
   \   00022E   F0           MOVX      @DPTR,A
    756              }
    757          }
   \                     ??uartEventApplicationCB_1:
   \   00022F   7407         MOV       A,#0x7
   \   000231   12....       LCALL     ?DEALLOC_XSTACK8
   \   000234   7F0A         MOV       R7,#0xa
   \   000236   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    758          
    759          #ifdef ZCL_REPORT
    760          /*********************************************************************
    761          * @fn      zclMultiSensor_CheckAndSendClusterAttrReport
    762          *
    763          * @brief   Check if there is a reportable attribute in all cluster is timeout to report
    764          *
    765          * @param   none
    766          *
    767          * @return  none
    768          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    769          static void zclMultiSensor_CheckAndSendClusterAttrReport( uint8 endpoint, uint16 clusterId,
   \                     zclMultiSensor_CheckAndSendClusterAttrReport:
    770                                                                               zclConfigReportRecsList *pConfigReportRecsList )
    771          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V4,R1
   \   00000C   8A..         MOV       ?V12,R2
   \   00000E   8B..         MOV       ?V13,R3
   \   000010   8C..         MOV       ?V8,R4
   \   000012   8D..         MOV       ?V9,R5
    772            uint8 numAttr = 0;
   \   000014   75..00       MOV       ?V0,#0x0
    773            uint8 x;
    774            uint16 len;
    775            zclReportCmd_t *pReportCmd;
    776            zclConfigReportRec_t *pConfigReportRec = NULL;
    777            zclAttrRec_t attrRec;
    778            
    779            for (x = 0; x < pConfigReportRecsList->numConfigReportRec; x++)
   \   000017   75..00       MOV       ?V1,#0x0
   \   00001A   8044         SJMP      ??zclMultiSensor_CheckAndSendClusterAttrReport_0
    780            {
    781              pConfigReportRec = &(pConfigReportRecsList->configReportRecs[x]);
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_1:
   \   00001C   E5..         MOV       A,?V1
   \   00001E   75F012       MOV       B,#0x12
   \   000021   A4           MUL       AB
   \   000022   F8           MOV       R0,A
   \   000023   A9F0         MOV       R1,B
   \   000025   8C82         MOV       DPL,R4
   \   000027   8D83         MOV       DPH,R5
   \   000029   12....       LCALL     ?Subroutine16 & 0xFFFF
    782              
    783              if (pConfigReportRec->clusterId == clusterId &&
    784                  pConfigReportRec->cfgReportRec.maxReportInt != 0xFFFF)
   \                     ??CrossCallReturnLabel_18:
   \   00002C   6A           XRL       A,R2
   \   00002D   7003         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_2
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6B           XRL       A,R3
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_2:
   \   000032   702A         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_3
   \   000034   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000037   7003         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_4
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F4           CPL       A
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_4:
   \   00003C   6020         JZ        ??zclMultiSensor_CheckAndSendClusterAttrReport_3
    785              {
    786                if (pConfigReportRec->timeup == 0xFFFF || pConfigReportRec->timeup == gTimeCounter)
   \   00003E   85..82       MOV       DPL,?V2
   \   000041   85..83       MOV       DPH,?V3
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000049   7003         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_5
   \   00004B   74FF         MOV       A,#-0x1
   \   00004D   69           XRL       A,R1
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_5:
   \   00004E   600C         JZ        ??zclMultiSensor_CheckAndSendClusterAttrReport_6
   \   000050   90....       MOV       DPTR,#gTimeCounter
   \   000053   E0           MOVX      A,@DPTR
   \   000054   68           XRL       A,R0
   \   000055   7003         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_7
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   69           XRL       A,R1
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_7:
   \   00005A   7002         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_3
    787                {
    788                  numAttr++;
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_6:
   \   00005C   05..         INC       ?V0
    789                }
    790              }
    791            }
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_3:
   \   00005E   05..         INC       ?V1
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_0:
   \   000060   8C82         MOV       DPL,R4
   \   000062   8D83         MOV       DPH,R5
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F8           MOV       R0,A
   \   000069   E5..         MOV       A,?V1
   \   00006B   C3           CLR       C
   \   00006C   98           SUBB      A,R0
   \   00006D   40AD         JC        ??zclMultiSensor_CheckAndSendClusterAttrReport_1
    792            
    793            if (numAttr != 0)
   \   00006F   E5..         MOV       A,?V0
   \   000071   601F         JZ        ??zclMultiSensor_CheckAndSendClusterAttrReport_8
    794            {
    795              // we need to send a report - allocate space for it
    796              len = sizeof(zclReportCmd_t) + (numAttr * sizeof(zclReport_t));
   \   000073   75F005       MOV       B,#0x5
   \   000076   A4           MUL       AB
   \   000077   A9F0         MOV       R1,B
   \   000079   2401         ADD       A,#0x1
   \   00007B   FE           MOV       R6,A
   \   00007C   E4           CLR       A
   \   00007D   39           ADDC      A,R1
   \   00007E   FF           MOV       R7,A
    797              pReportCmd = (zclReportCmd_t *)zcl_mem_alloc( len );
   \   00007F                ; Setup parameters for call to function osal_mem_alloc
   \   00007F   EE           MOV       A,R6
   \   000080   FA           MOV       R2,A
   \   000081   EF           MOV       A,R7
   \   000082   FB           MOV       R3,A
   \   000083   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000086   85..82       MOV       DPL,?XSP + 0
   \   000089   85..83       MOV       DPH,?XSP + 1
   \   00008C   12....       LCALL     ?Subroutine4 & 0xFFFF
    798              pReportCmd->numAttr = numAttr;
    799            }
   \                     ??CrossCallReturnLabel_0:
   \   00008F   E5..         MOV       A,?V0
   \   000091   F0           MOVX      @DPTR,A
    800            
    801            numAttr = 0;
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_8:
   \   000092   75..00       MOV       ?V0,#0x0
    802            
    803            for (x = 0; x < pConfigReportRecsList->numConfigReportRec; x++ )
   \   000095   75..00       MOV       ?V1,#0x0
   \   000098   8012         SJMP      ??zclMultiSensor_CheckAndSendClusterAttrReport_9
    804            {
    805              zclReport_t *reportRec;
    806              pConfigReportRec = &(pConfigReportRecsList->configReportRecs[x]);
    807              
    808              if (pConfigReportRec->clusterId == clusterId && pConfigReportRec->cfgReportRec.maxReportInt != 0xFFFF)      // need report
    809              {
    810                if (pConfigReportRec->timeup == 0xFFFF || pConfigReportRec->timeup == gTimeCounter)       //timeup to report
    811                {
    812                  // fill the record in *pReportCmd
    813                  reportRec = &(pReportCmd->attrList[numAttr]);
    814                  zcl_memset( reportRec, 0, sizeof(zclReport_t));
    815                  numAttr++;
    816                  zclFindAttrRec(endpoint, pConfigReportRec->clusterId, pConfigReportRec->cfgReportRec.attrID, &attrRec);
    817                  
    818                  reportRec->attrID = attrRec.attr.attrId;
    819                  reportRec->dataType = attrRec.attr.dataType;
    820                  reportRec->attrData = attrRec.attr.dataPtr;
    821                  
    822                  if (pConfigReportRec->cfgReportRec.minReportInt == 0)
    823                    pConfigReportRec->timeup = gTimeCounter + pConfigReportRec->cfgReportRec.maxReportInt;
    824                  else
    825                    pConfigReportRec->timeup = gTimeCounter + pConfigReportRec->cfgReportRec.minReportInt;
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_10:
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   28           ADD       A,R0
   \   00009C   F8           MOV       R0,A
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   39           ADDC      A,R1
   \   0000A0   F9           MOV       R1,A
   \   0000A1   85..82       MOV       DPL,?V14
   \   0000A4   85..83       MOV       DPH,?V15
   \   0000A7   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000AA   05..         INC       ?V1
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_9:
   \   0000AC   85..82       MOV       DPL,?V8
   \   0000AF   85..83       MOV       DPH,?V9
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   F8           MOV       R0,A
   \   0000B7   E5..         MOV       A,?V1
   \   0000B9   C3           CLR       C
   \   0000BA   98           SUBB      A,R0
   \   0000BB   4003         JC        $+5
   \   0000BD   02....       LJMP      ??zclMultiSensor_CheckAndSendClusterAttrReport_11 & 0xFFFF
   \   0000C0   E5..         MOV       A,?V1
   \   0000C2   75F012       MOV       B,#0x12
   \   0000C5   A4           MUL       AB
   \   0000C6   F8           MOV       R0,A
   \   0000C7   A9F0         MOV       R1,B
   \   0000C9   85..82       MOV       DPL,?V8
   \   0000CC   85..83       MOV       DPH,?V9
   \   0000CF   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000D2   65..         XRL       A,?V12
   \   0000D4   7004         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_12
   \   0000D6   A3           INC       DPTR
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   65..         XRL       A,?V13
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_12:
   \   0000DA   70CE         JNZ       ??CrossCallReturnLabel_83
   \   0000DC   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000DF   7003         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_13
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F4           CPL       A
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_13:
   \   0000E4   60C4         JZ        ??CrossCallReturnLabel_83
   \   0000E6   E5..         MOV       A,?V2
   \   0000E8   2402         ADD       A,#0x2
   \   0000EA   F5..         MOV       ?V14,A
   \   0000EC   E4           CLR       A
   \   0000ED   35..         ADDC      A,?V3
   \   0000EF   F5..         MOV       ?V15,A
   \   0000F1   85..82       MOV       DPL,?V14
   \   0000F4   F583         MOV       DPH,A
   \   0000F6   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000F9   7003         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_14
   \   0000FB   74FF         MOV       A,#-0x1
   \   0000FD   69           XRL       A,R1
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_14:
   \   0000FE   600C         JZ        ??zclMultiSensor_CheckAndSendClusterAttrReport_15
   \   000100   90....       MOV       DPTR,#gTimeCounter
   \   000103   E0           MOVX      A,@DPTR
   \   000104   68           XRL       A,R0
   \   000105   7003         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_16
   \   000107   A3           INC       DPTR
   \   000108   E0           MOVX      A,@DPTR
   \   000109   69           XRL       A,R1
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_16:
   \   00010A   709E         JNZ       ??CrossCallReturnLabel_83
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_15:
   \   00010C   E5..         MOV       A,?V0
   \   00010E   75F005       MOV       B,#0x5
   \   000111   A4           MUL       AB
   \   000112   F8           MOV       R0,A
   \   000113   A9F0         MOV       R1,B
   \   000115   85..82       MOV       DPL,?XSP + 0
   \   000118   85..83       MOV       DPH,?XSP + 1
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   28           ADD       A,R0
   \   00011D   FA           MOV       R2,A
   \   00011E   A3           INC       DPTR
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   39           ADDC      A,R1
   \   000121   8A82         MOV       DPL,R2
   \   000123   F583         MOV       DPH,A
   \   000125   A3           INC       DPTR
   \   000126   8582..       MOV       ?V6,DPL
   \   000129   8583..       MOV       ?V7,DPH
   \   00012C                ; Setup parameters for call to function osal_memset
   \   00012C   7C05         MOV       R4,#0x5
   \   00012E   7D00         MOV       R5,#0x0
   \   000130   7900         MOV       R1,#0x0
   \   000132   AA..         MOV       R2,?V6
   \   000134   AB..         MOV       R3,?V7
   \   000136   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   000139   05..         INC       ?V0
   \   00013B                ; Setup parameters for call to function zclFindAttrRec
   \   00013B   7402         MOV       A,#0x2
   \   00013D   12....       LCALL     ?XSTACK_DISP100_8
   \   000140   88..         MOV       ?V10,R0
   \   000142   89..         MOV       ?V11,R1
   \   000144   78..         MOV       R0,#?V10
   \   000146   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000149   85..82       MOV       DPL,?V2
   \   00014C   85..83       MOV       DPH,?V3
   \   00014F   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000152   85..82       MOV       DPL,?V2
   \   000155   85..83       MOV       DPH,?V3
   \   000158   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00015B   A9..         MOV       R1,?V4
   \   00015D   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000160   12....       LCALL     ?DEALLOC_XSTACK8
   \   000163   7404         MOV       A,#0x4
   \   000165   12....       LCALL     ?XSTACK_DISP0_8
   \   000168   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00016B   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00016E   7406         MOV       A,#0x6
   \   000170   12....       LCALL     ?XSTACK_DISP0_8
   \   000173   E0           MOVX      A,@DPTR
   \   000174   85..82       MOV       DPL,?V6
   \   000177   85..83       MOV       DPH,?V7
   \   00017A   A3           INC       DPTR
   \   00017B   A3           INC       DPTR
   \   00017C   F0           MOVX      @DPTR,A
   \   00017D   7408         MOV       A,#0x8
   \   00017F   12....       LCALL     ?XSTACK_DISP0_8
   \   000182   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000185   A3           INC       DPTR
   \   000186   A3           INC       DPTR
   \   000187   A3           INC       DPTR
   \   000188   E8           MOV       A,R0
   \   000189   F0           MOVX      @DPTR,A
   \   00018A   A3           INC       DPTR
   \   00018B   E9           MOV       A,R1
   \   00018C   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00018F   A3           INC       DPTR
   \   000190   A3           INC       DPTR
   \   000191   A3           INC       DPTR
   \   000192   A3           INC       DPTR
   \   000193   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000196   E8           MOV       A,R0
   \   000197   49           ORL       A,R1
   \   000198   90....       MOV       DPTR,#gTimeCounter
   \   00019B   6003         JZ        $+5
   \   00019D   02....       LJMP      ??zclMultiSensor_CheckAndSendClusterAttrReport_10 & 0xFFFF
   \   0001A0   12....       LCALL     ??Subroutine43_0 & 0xFFFF
    826                }
    827              }
    828            }
   \                     ??CrossCallReturnLabel_66:
   \   0001A3   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0001A6   02....       LJMP      ??zclMultiSensor_CheckAndSendClusterAttrReport_10 & 0xFFFF
    829            
    830            if (numAttr != 0)
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_11:
   \   0001A9   E5..         MOV       A,?V0
   \   0001AB   601E         JZ        ??zclMultiSensor_CheckAndSendClusterAttrReport_17
    831            {
    832              SendZclAttrReport( endpoint, clusterId, pReportCmd, len);
   \   0001AD                ; Setup parameters for call to function SendZclAttrReport
   \   0001AD   EE           MOV       A,R6
   \   0001AE   F5..         MOV       ?V0,A
   \   0001B0   78..         MOV       R0,#?V0
   \   0001B2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B5   7401         MOV       A,#0x1
   \   0001B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BA   12....       LCALL     ??Subroutine53_0 & 0xFFFF
    833            }
   \                     ??CrossCallReturnLabel_114:
   \   0001BD   AA..         MOV       R2,?V12
   \   0001BF   AB..         MOV       R3,?V13
   \   0001C1   A9..         MOV       R1,?V4
   \   0001C3   12....       LCALL     `??SendZclAttrReport::?relay`; Banked call to: SendZclAttrReport
   \   0001C6   7401         MOV       A,#0x1
   \   0001C8   12....       LCALL     ?DEALLOC_XSTACK8
    834          }
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_17:
   \   0001CB                REQUIRE ?Subroutine2
   \   0001CB                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   740A         MOV       A,#0xa
   \   000002                REQUIRE ??Subroutine42_0
   \   000002                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F10         MOV       R7,#0x10
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F4           CPL       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E5..         MOV       A,?V2
   \   000002   240C         ADD       A,#0xc
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V3
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   74FF         MOV       A,#-0x1
   \   000005   68           XRL       A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   85..82       MOV       DPL,?V6
   \   000006   85..83       MOV       DPH,?V7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   28           ADD       A,R0
   \   000006   F5..         MOV       ?V2,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   39           ADDC      A,R1
   \   00000B   F5..         MOV       ?V3,A
   \   00000D   85..82       MOV       DPL,?V2
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000007   F583         MOV       DPH,A
   \   000009   8882         MOV       DPL,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendReadReportCfgRspCmd
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine50_0
   \   000006                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007                REQUIRE ??Subroutine53_0
   \   000007                ; // Fall through to label ??Subroutine53_0
    835          
    836          /*********************************************************************
    837          * @fn      SendZclAttrReport
    838          *
    839          * @brief   Send the attr report. Let ZCL_CMD_REPORT event handler handle this
    840          *
    841          * @param   srcEp - source endpoint
    842          *          clusterID - cluster id
    843          *          pReportCmd - pointer to the report command packet
    844          *          dataLen - data length of the report command
    845          *
    846          * @return  none
    847          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    848          static uint8 SendZclAttrReport(uint8 srcEp, uint16 clusterId, zclReportCmd_t *pReportCmd,
   \                     SendZclAttrReport:
    849                                         uint8 datalen)
    850          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    851            // this is for the inner-app osal msg, not OTA msg, thus some fields are not important
    852            zclIncomingMsg_t *pMsg;       
    853            
    854            // pMsg will be released by zclMultiSensor_event_loop()
    855            pMsg = (zclIncomingMsg_t *)osal_msg_allocate(sizeof(zclIncomingMsg_t) + (datalen));
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   740E         MOV       A,#0xe
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   2419         ADD       A,#0x19
   \   000017   FA           MOV       R2,A
   \   000018   E4           CLR       A
   \   000019   3400         ADDC      A,#0x0
   \   00001B   FB           MOV       R3,A
   \   00001C   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    856            
    857            if (pMsg == NULL)
   \   00001F   EA           MOV       A,R2
   \   000020   4B           ORL       A,R3
   \   000021   7004         JNZ       ??SendZclAttrReport_0
    858            {
    859              return FALSE;
   \   000023   7900         MOV       R1,#0x0
   \   000025   8073         SJMP      ??SendZclAttrReport_1
    860            }
    861            
    862            if (pMsg)
    863            {
    864                pMsg->hdr.event = ZCL_INCOMING_MSG;
   \                     ??SendZclAttrReport_0:
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   7434         MOV       A,#0x34
   \   00002D   F0           MOVX      @DPTR,A
    865                pMsg->hdr.status = 0;
   \   00002E   A3           INC       DPTR
   \   00002F   E4           CLR       A
   \   000030   12....       LCALL     ?Subroutine11 & 0xFFFF
    866                //pMsg->zclHdr.fc = NULL;         // not important
    867                pMsg->zclHdr.manuCode = 0;        // not important
   \                     ??CrossCallReturnLabel_12:
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   12....       LCALL     ?Subroutine11 & 0xFFFF
    868                pMsg->zclHdr.transSeqNum = 0;     // not important
   \                     ??CrossCallReturnLabel_13:
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   12....       LCALL     ?Subroutine9 & 0xFFFF
    869                pMsg->zclHdr.commandID = ZCL_CMD_REPORT;
   \                     ??CrossCallReturnLabel_10:
   \   00003D   740A         MOV       A,#0xa
   \   00003F   12....       LCALL     ?Subroutine8 & 0xFFFF
    870                pMsg->clusterId = clusterId;
   \                     ??CrossCallReturnLabel_8:
   \   000042   E5..         MOV       A,?V0
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   E5..         MOV       A,?V1
   \   000048   F0           MOVX      @DPTR,A
    871                pMsg->srcAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000049   EA           MOV       A,R2
   \   00004A   2412         ADD       A,#0x12
   \   00004C   F582         MOV       DPL,A
   \   00004E   E4           CLR       A
   \   00004F   3B           ADDC      A,R3
   \   000050   F583         MOV       DPH,A
   \   000052   7402         MOV       A,#0x2
   \   000054   12....       LCALL     ?Subroutine8 & 0xFFFF
    872                pMsg->srcAddr.addr.shortAddr = 0; // not important
   \                     ??CrossCallReturnLabel_9:
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   E4           CLR       A
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   F0           MOVX      @DPTR,A
    873                pMsg->srcAddr.panId = 0;          // inner-PAN, not important
   \   00005D   EA           MOV       A,R2
   \   00005E   2414         ADD       A,#0x14
   \   000060   F582         MOV       DPL,A
   \   000062   E4           CLR       A
   \   000063   3B           ADDC      A,R3
   \   000064   F583         MOV       DPH,A
   \   000066   E4           CLR       A
   \   000067   F0           MOVX      @DPTR,A
   \   000068   A3           INC       DPTR
   \   000069   F0           MOVX      @DPTR,A
    874                pMsg->srcAddr.endPoint = srcEp;   // src ep, SAMPLELIGHT_ENDPOINT send to himself
   \   00006A   EA           MOV       A,R2
   \   00006B   2413         ADD       A,#0x13
   \   00006D   F582         MOV       DPL,A
   \   00006F   E4           CLR       A
   \   000070   3B           ADDC      A,R3
   \   000071   F583         MOV       DPH,A
   \   000073   E5..         MOV       A,?V2
   \   000075   F0           MOVX      @DPTR,A
    875                pMsg->endPoint = srcEp;           // dest ep, send to SAMPLELIGHT_ENDPOINT himself
   \   000076   EA           MOV       A,R2
   \   000077   2416         ADD       A,#0x16
   \   000079   F582         MOV       DPL,A
   \   00007B   E4           CLR       A
   \   00007C   3B           ADDC      A,R3
   \   00007D   F583         MOV       DPH,A
   \   00007F   E5..         MOV       A,?V2
   \   000081   F0           MOVX      @DPTR,A
    876                pMsg->attrCmd = (zclReportCmd_t *)pReportCmd;
   \   000082   EA           MOV       A,R2
   \   000083   2417         ADD       A,#0x17
   \   000085   F582         MOV       DPL,A
   \   000087   E4           CLR       A
   \   000088   3B           ADDC      A,R3
   \   000089   F583         MOV       DPH,A
   \   00008B   EE           MOV       A,R6
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   A3           INC       DPTR
   \   00008E   EF           MOV       A,R7
   \   00008F   F0           MOVX      @DPTR,A
    877            }
    878            
    879            osal_msg_send( zclMultiSensor_TaskID, (uint8 *)pMsg);
   \   000090                ; Setup parameters for call to function osal_msg_send
   \   000090   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   000093   E0           MOVX      A,@DPTR
   \   000094   F9           MOV       R1,A
   \   000095   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    880            return TRUE;
   \   000098   7901         MOV       R1,#0x1
   \                     ??SendZclAttrReport_1:
   \   00009A   7F06         MOV       R7,#0x6
   \   00009C   02....       LJMP      ?BANKED_LEAVE_XDATA
    881          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET
    882          
    883          static void zclMultiSensor_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
    884          {
    885            zclReportCmd_t *pReportCmd;                           // numAttr, attrList[] : (zclReport_t) attrID, dataType, *attrData
    886            pReportCmd = (zclReportCmd_t *)pInMsg->attrCmd;       // *pReportCmd will be free by handle
    887            afAddrType_t dstAddr;
    888            
    889            dstAddr.addr.shortAddr = 0x0000;
    890            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    891            switch ( pInMsg->clusterId )
    892            {
    893            case ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT:
    894              dstAddr.endPoint = 1;
    895              break;
    896            case ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT:
    897              dstAddr.endPoint = 2;
    898              break;
    899            case ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY:
    900              dstAddr.endPoint = 3;
    901              break;
    902            case ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING:
    903              dstAddr.endPoint = 4;
    904              break;
    905            case ZCL_CLUSTER_ID_MS_TVOC_MEASUREMENT:
    906              dstAddr.endPoint = 6;
    907              break;
    908            case ZCL_CLUSTER_ID_MS_CO2_MEASUREMENT:
    909              dstAddr.endPoint = 7;
    910              break;
    911            default:
    912              break;
    913            }
    914            
    915            if( zcl_SendReportCmd( MULTISENSOR_ENDPOINT, &dstAddr, pInMsg->clusterId, pReportCmd, ZCL_REPORT_RECEIVE, FALSE, NULL) != ZSuccess )
    916            {
    917              while(1);
    918            }  
    919          }
    920          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    921          static uint8 zclMultiSensor_ProcessInConfigReportCmd( zclIncomingMsg_t *pInMsg )
   \                     zclMultiSensor_ProcessInConfigReportCmd:
    922          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    923            zclCfgReportCmd_t *pCfgReportCmd;             // this is used to look up table
    924            zclCfgReportRspCmd_t *pCfgReportRspCmd;       // This is used to send responde message
    925            uint8 sendRsp = FALSE;                        // status of initialize dynamic memory for responde message
   \   00000E   C2..         CLR       ?VB.0
    926            uint16 len;
    927            uint8 j = 0;
   \   000010   75..00       MOV       ?V6,#0x0
    928            uint8 i;
    929            
    930            //1. Initialize message responde ( using structure zclCfgReportRspCmd_t )
    931            pCfgReportCmd = (zclCfgReportCmd_t *)pInMsg->attrCmd;
   \   000013   EA           MOV       A,R2
   \   000014   2417         ADD       A,#0x17
   \   000016   F582         MOV       DPL,A
   \   000018   E4           CLR       A
   \   000019   35..         ADDC      A,?V1
   \   00001B   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00001E   7402         MOV       A,#0x2
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E8           MOV       A,R0
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   E9           MOV       A,R1
   \   000027   12....       LCALL     ?Subroutine9 & 0xFFFF
    932            
    933            if ( pInMsg->zclHdr.commandID == ZCL_CMD_CONFIG_REPORT )
   \                     ??CrossCallReturnLabel_11:
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6406         XRL       A,#0x6
   \   00002D   702F         JNZ       ??zclMultiSensor_ProcessInConfigReportCmd_0
    934            {
    935              // We need to send a response back - allocate space for it
    936              len = sizeof( zclCfgReportRspCmd_t ) + (pCfgReportCmd->numAttr * sizeof( zclCfgReportStatus_t ));
    937              pCfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( len );
   \   00002F                ; Setup parameters for call to function osal_mem_alloc
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000037   F5..         MOV       ?V2,A
   \   000039   75..00       MOV       ?V3,#0x0
   \   00003C   7402         MOV       A,#0x2
   \   00003E   78..         MOV       R0,#?V2
   \   000040   12....       LCALL     ?S_SHL
   \   000043   E5..         MOV       A,?V2
   \   000045   2401         ADD       A,#0x1
   \   000047   FA           MOV       R2,A
   \   000048   E4           CLR       A
   \   000049   35..         ADDC      A,?V3
   \   00004B   FB           MOV       R3,A
   \   00004C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004F   8A..         MOV       ?V2,R2
   \   000051   8B..         MOV       ?V3,R3
    938              
    939              if ( pCfgReportRspCmd == NULL )
   \   000053   EA           MOV       A,R2
   \   000054   4B           ORL       A,R3
   \   000055   7005         JNZ       ??zclMultiSensor_ProcessInConfigReportCmd_1
    940              {
    941                return FALSE;     // embedded return
   \   000057   7900         MOV       R1,#0x0
   \   000059   02....       LJMP      ??zclMultiSensor_ProcessInConfigReportCmd_2 & 0xFFFF
    942              }
    943              sendRsp = TRUE;     // sendRsp is active when we got correct commandID
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_1:
   \   00005C   D2..         SETB      ?VB.0
    944            }
    945            
    946            for ( i = 0; i < pCfgReportCmd->numAttr; i++ )
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_0:
   \   00005E   75..00       MOV       ?V7,#0x0
   \   000061   8026         SJMP      ??zclMultiSensor_ProcessInConfigReportCmd_3
    947            {
    948              
    949              //2. Look up config. report record of the incomming message in table "config. Report Record List"
    950              zclConfigReportRec_t *pConfigReportRec = NULL;      // find the rec and store here
    951              zclAttrRec_t attrRec;
    952              
    953              zclCfgReportStatus_t *statusRec = &(pCfgReportRspCmd->attrList[i]);
    954              zcl_memset( statusRec, 0, sizeof( zclCfgReportStatus_t ));
    955              
    956              if ( zclFindConfigReportRec( pInMsg->endPoint, pInMsg->clusterId,
    957                                          pCfgReportCmd->attrList[i].attrID, &pConfigReportRec))
    958              {
    959                
    960                //3. Check "dataType" of variable to variable in incomming message
    961                uint8 status = ZCL_STATUS_SUCCESS;
    962                
    963                if (pCfgReportCmd->attrList[i].dataType != pConfigReportRec->cfgReportRec.dataType )
    964                {        
    965                  status = ZCL_STATUS_INVALID_DATA_TYPE;
    966                }
    967                else 
    968                {
    969                  
    970                  //4. Look up Attribute record of incomming message in tabel "attribute list"
    971                  if ( zclFindAttrRec( pInMsg->endPoint, pInMsg->clusterId,
    972                                      pCfgReportCmd->attrList[i].attrID, &attrRec))
    973                  {
    974                    //5. Check "dataType" of variable to variable in incomming message
    975                    if (pCfgReportCmd->attrList[i].dataType != attrRec.attr.dataType )
    976                    {
    977                      status = ZCL_STATUS_INVALID_DATA_TYPE;
    978                    }
    979                    else
    980                    {
    981                      //6. Check Access control type of each attribute in incomming message to attribute in table "attribute list"
    982                      if ( !zcl_AccessCtrlRead(attrRec.attr.accessControl))
    983                      {
    984                        status = ZCL_STATUS_WRITE_ONLY;
    985                      }
    986                    }
    987                  }
    988                }
    989                
    990                //7. Write config. value into variable in table "config. report record list"
    991                // If successful, store the record, and a CfgReportStatus record shall NOT be generated
    992                if ( sendRsp && status != ZCL_STATUS_SUCCESS )
    993                {
    994                  //Attribute is write only or invalid data type - move on to the next record
    995                  statusRec->status = status;
    996                  statusRec->direction = pCfgReportCmd->attrList[i].direction;
    997                  statusRec->attrID = pCfgReportCmd->attrList[i].attrID;
    998                  j++;
    999                }
   1000                else    // Success, set the config report rec
   1001                {
   1002                  pConfigReportRec->cfgReportRec.direction = pCfgReportCmd->attrList[i].direction;
   1003                  pConfigReportRec->cfgReportRec.minReportInt = pCfgReportCmd->attrList[i].minReportInt;
   1004                  pConfigReportRec->cfgReportRec.maxReportInt = pCfgReportCmd->attrList[i].maxReportInt;
   1005                  pConfigReportRec->cfgReportRec.timeoutPeriod = pCfgReportCmd->attrList[i].timeoutPeriod;
   1006                  pConfigReportRec->timeup = 0xFFFF;
   1007                }
   1008              }
   1009              else
   1010              {
   1011                //Attribute is not supported - move on to the next configReportRec record
   1012                if (sendRsp)
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_4:
   \   000063   A2..         MOV       C,?VB.0
   \   000065   5020         JNC       ??zclMultiSensor_ProcessInConfigReportCmd_5
   1013                {
   1014                  statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   000067   85..82       MOV       DPL,?V4
   \   00006A   85..83       MOV       DPH,?V5
   \   00006D   7486         MOV       A,#-0x7a
   \   00006F   12....       LCALL     ?Subroutine6 & 0xFFFF
   1015                  statusRec->status = pCfgReportCmd->attrList[i].direction;
   \                     ??CrossCallReturnLabel_4:
   \   000072   F0           MOVX      @DPTR,A
   1016                  statusRec->attrID = pCfgReportCmd->attrList[i].attrID;
   \   000073   85..82       MOV       DPL,?V8
   \   000076   85..83       MOV       DPH,?V9
   \   000079   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00007C   85..82       MOV       DPL,?V4
   \   00007F   85..83       MOV       DPH,?V5
   \   000082   12....       LCALL     ?Subroutine10 & 0xFFFF
   1017                  j++;
   \                     ??CrossCallReturnLabel_87:
   \   000085   05..         INC       ?V6
   1018                }
   1019              }
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_5:
   \   000087   05..         INC       ?V7
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_3:
   \   000089   7402         MOV       A,#0x2
   \   00008B   12....       LCALL     ?XSTACK_DISP0_8
   \   00008E   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000091   F8           MOV       R0,A
   \   000092   E5..         MOV       A,?V7
   \   000094   C3           CLR       C
   \   000095   98           SUBB      A,R0
   \   000096   4003         JC        $+5
   \   000098   02....       LJMP      ??zclMultiSensor_ProcessInConfigReportCmd_6 & 0xFFFF
   \   00009B   85..82       MOV       DPL,?XSP + 0
   \   00009E   85..83       MOV       DPH,?XSP + 1
   \   0000A1   E4           CLR       A
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   F0           MOVX      @DPTR,A
   \   0000A5   AE..         MOV       R6,?V7
   \   0000A7   8E..         MOV       ?V4,R6
   \   0000A9   F5..         MOV       ?V5,A
   \   0000AB   7402         MOV       A,#0x2
   \   0000AD   78..         MOV       R0,#?V4
   \   0000AF   12....       LCALL     ?S_SHL
   \   0000B2   E5..         MOV       A,?V2
   \   0000B4   25..         ADD       A,?V4
   \   0000B6   F582         MOV       DPL,A
   \   0000B8   E5..         MOV       A,?V3
   \   0000BA   35..         ADDC      A,?V5
   \   0000BC   F583         MOV       DPH,A
   \   0000BE   A3           INC       DPTR
   \   0000BF   8582..       MOV       ?V4,DPL
   \   0000C2   8583..       MOV       ?V5,DPH
   \   0000C5                ; Setup parameters for call to function osal_memset
   \   0000C5   7C04         MOV       R4,#0x4
   \   0000C7   7D00         MOV       R5,#0x0
   \   0000C9   7900         MOV       R1,#0x0
   \   0000CB   AA..         MOV       R2,?V4
   \   0000CD   AB..         MOV       R3,?V5
   \   0000CF   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000D2   EE           MOV       A,R6
   \   0000D3   75F00C       MOV       B,#0xc
   \   0000D6   A4           MUL       AB
   \   0000D7   FE           MOV       R6,A
   \   0000D8   AFF0         MOV       R7,B
   \   0000DA   7402         MOV       A,#0x2
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   2E           ADD       A,R6
   \   0000E1   FE           MOV       R6,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   3F           ADDC      A,R7
   \   0000E5   FF           MOV       R7,A
   \   0000E6   8E82         MOV       DPL,R6
   \   0000E8   F583         MOV       DPH,A
   \   0000EA   A3           INC       DPTR
   \   0000EB   8582..       MOV       ?V12,DPL
   \   0000EE   8583..       MOV       ?V13,DPH
   \   0000F1   EE           MOV       A,R6
   \   0000F2   2402         ADD       A,#0x2
   \   0000F4   F5..         MOV       ?V8,A
   \   0000F6   E4           CLR       A
   \   0000F7   3F           ADDC      A,R7
   \   0000F8   F5..         MOV       ?V9,A
   \   0000FA                ; Setup parameters for call to function zclFindConfigReportRec
   \   0000FA   A8..         MOV       R0,?XSP + 0
   \   0000FC   A9..         MOV       R1,?XSP + 1
   \   0000FE   88..         MOV       ?V10,R0
   \   000100   89..         MOV       ?V11,R1
   \   000102   78..         MOV       R0,#?V10
   \   000104   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000107   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00010A   12....       LCALL     `??zclFindConfigReportRec::?relay`; Banked call to: zclFindConfigReportRec
   \   00010D   7402         MOV       A,#0x2
   \   00010F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000112   E9           MOV       A,R1
   \   000113   7003         JNZ       $+5
   \   000115   02....       LJMP      ??zclMultiSensor_ProcessInConfigReportCmd_4 & 0xFFFF
   \   000118   EE           MOV       A,R6
   \   000119   2404         ADD       A,#0x4
   \   00011B   F5..         MOV       ?V14,A
   \   00011D   E4           CLR       A
   \   00011E   3F           ADDC      A,R7
   \   00011F   F5..         MOV       ?V15,A
   \   000121   85..82       MOV       DPL,?V14
   \   000124   F583         MOV       DPH,A
   \   000126   E0           MOVX      A,@DPTR
   \   000127   F9           MOV       R1,A
   \   000128   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00012B   C8           XCH       A,R0
   \   00012C   2409         ADD       A,#0x9
   \   00012E   F582         MOV       DPL,A
   \   000130   E4           CLR       A
   \   000131   38           ADDC      A,R0
   \   000132   F583         MOV       DPH,A
   \   000134   E0           MOVX      A,@DPTR
   \   000135   69           XRL       A,R1
   \   000136   702B         JNZ       ??zclMultiSensor_ProcessInConfigReportCmd_7
   \   000138                ; Setup parameters for call to function zclFindAttrRec
   \   000138   7404         MOV       A,#0x4
   \   00013A   12....       LCALL     ?XSTACK_DISP100_8
   \   00013D   88..         MOV       ?V10,R0
   \   00013F   89..         MOV       ?V11,R1
   \   000141   78..         MOV       R0,#?V10
   \   000143   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000146   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000149   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00014C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014F   E9           MOV       A,R1
   \   000150   6032         JZ        ??zclMultiSensor_ProcessInConfigReportCmd_8
   \   000152   85..82       MOV       DPL,?V14
   \   000155   85..83       MOV       DPH,?V15
   \   000158   E0           MOVX      A,@DPTR
   \   000159   F8           MOV       R0,A
   \   00015A   7408         MOV       A,#0x8
   \   00015C   12....       LCALL     ?XSTACK_DISP0_8
   \   00015F   E0           MOVX      A,@DPTR
   \   000160   68           XRL       A,R0
   \   000161   6004         JZ        ??zclMultiSensor_ProcessInConfigReportCmd_9
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_7:
   \   000163   748D         MOV       A,#-0x73
   \   000165   800C         SJMP      ??zclMultiSensor_ProcessInConfigReportCmd_10
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_9:
   \   000167   7409         MOV       A,#0x9
   \   000169   12....       LCALL     ?XSTACK_DISP0_8
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00016F   4013         JC        ??zclMultiSensor_ProcessInConfigReportCmd_8
   \   000171   748F         MOV       A,#-0x71
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_10:
   \   000173   A2..         MOV       C,?VB.0
   \   000175   500D         JNC       ??zclMultiSensor_ProcessInConfigReportCmd_8
   \   000177   85..82       MOV       DPL,?V4
   \   00017A   85..83       MOV       DPH,?V5
   \   00017D   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000180   A3           INC       DPTR
   \   000181   02....       LJMP      ??CrossCallReturnLabel_4 & 0xFFFF
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_8:
   \   000184   85..82       MOV       DPL,?V12
   \   000187   85..83       MOV       DPH,?V13
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   C0E0         PUSH      A
   \   00018D   12....       LCALL     ?Subroutine41 & 0xFFFF
   1020            }//for loop
   \                     ??CrossCallReturnLabel_103:
   \   000190   C8           XCH       A,R0
   \   000191   2406         ADD       A,#0x6
   \   000193   F582         MOV       DPL,A
   \   000195   E4           CLR       A
   \   000196   38           ADDC      A,R0
   \   000197   F583         MOV       DPH,A
   \   000199   D0E0         POP       A
   \   00019B   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00019E   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0001A1   240A         ADD       A,#0xa
   \   0001A3   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0001A6   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0001A9   240C         ADD       A,#0xc
   \   0001AB   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001AE   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0001B1   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0001B4   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0001B7   A3           INC       DPTR
   \   0001B8   A3           INC       DPTR
   \   0001B9   74FF         MOV       A,#-0x1
   \   0001BB   F0           MOVX      @DPTR,A
   \   0001BC   A3           INC       DPTR
   \   0001BD   F0           MOVX      @DPTR,A
   \   0001BE   02....       LJMP      ??zclMultiSensor_ProcessInConfigReportCmd_5 & 0xFFFF
   1021            //8. Send respond message with function "zcl_SendConfigReportRspCmd"
   1022            if ( sendRsp )
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_6:
   \   0001C1   A2..         MOV       C,?VB.0
   \   0001C3   506B         JNC       ??zclMultiSensor_ProcessInConfigReportCmd_11
   1023            {
   1024              pCfgReportRspCmd->numAttr = j;
   \   0001C5   85..82       MOV       DPL,?V2
   \   0001C8   85..83       MOV       DPH,?V3
   \   0001CB   E5..         MOV       A,?V6
   \   0001CD   F0           MOVX      @DPTR,A
   1025              if (pCfgReportRspCmd->numAttr == 0)
   \   0001CE   700B         JNZ       ??zclMultiSensor_ProcessInConfigReportCmd_12
   1026              {
   1027                //Since all records were written successful, include a single status record
   1028                // in the response command with the status field set to SUCCESS and the
   1029                // attribute ID and direction fields omitted.
   1030                pCfgReportRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   0001D0   A3           INC       DPTR
   \   0001D1   E4           CLR       A
   \   0001D2   F0           MOVX      @DPTR,A
   1031                pCfgReportRspCmd->numAttr = 1;
   \   0001D3   85..82       MOV       DPL,?V2
   \   0001D6   85..83       MOV       DPH,?V3
   \   0001D9   04           INC       A
   \   0001DA   F0           MOVX      @DPTR,A
   1032              }
   1033              
   1034              zcl_SendConfigReportRspCmd(pInMsg->endPoint, &(pInMsg->srcAddr),
   1035                                         pInMsg->clusterId, pCfgReportRspCmd,
   1036                                         !pInMsg->zclHdr.fc.direction, TRUE,
   1037                                         pInMsg->zclHdr.transSeqNum );
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_12:
   \   0001DB                ; Setup parameters for call to function zcl_SendConfigReportRspCmd
   \   0001DB   85..82       MOV       DPL,?V0
   \   0001DE   85..83       MOV       DPH,?V1
   \   0001E1   A3           INC       DPTR
   \   0001E2   A3           INC       DPTR
   \   0001E3   A3           INC       DPTR
   \   0001E4   A3           INC       DPTR
   \   0001E5   A3           INC       DPTR
   \   0001E6   A3           INC       DPTR
   \   0001E7   E0           MOVX      A,@DPTR
   \   0001E8   F5..         MOV       ?V4,A
   \   0001EA   78..         MOV       R0,#?V4
   \   0001EC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001EF   75..01       MOV       ?V4,#0x1
   \   0001F2   78..         MOV       R0,#?V4
   \   0001F4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001F7   85..82       MOV       DPL,?V0
   \   0001FA   85..83       MOV       DPH,?V1
   \   0001FD   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000200   F5..         MOV       ?V4,A
   \   000202   78..         MOV       R0,#?V4
   \   000204   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000207   78..         MOV       R0,#?V2
   \   000209   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00020C   85..82       MOV       DPL,?V0
   \   00020F   85..83       MOV       DPH,?V1
   \   000212   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000215   E5..         MOV       A,?V0
   \   000217   240A         ADD       A,#0xa
   \   000219   FA           MOV       R2,A
   \   00021A   E4           CLR       A
   \   00021B   35..         ADDC      A,?V1
   \   00021D   FB           MOV       R3,A
   \   00021E   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000221   12....       LCALL     `??zcl_SendConfigReportRspCmd::?relay`; Banked call to: zcl_SendConfigReportRspCmd
   \   000224   7405         MOV       A,#0x5
   \   000226   12....       LCALL     ?DEALLOC_XSTACK8
   1038              zcl_mem_free ( pCfgReportRspCmd );
   \   000229                ; Setup parameters for call to function osal_mem_free
   \   000229   AA..         MOV       R2,?V2
   \   00022B   AB..         MOV       R3,?V3
   \   00022D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1039            }
   1040            
   1041            //9. When configured, check report config immediately with function "xxx_CheckReportConfig()"
   1042            // when configured, check report config immediately
   1043            zclMultiSensor_CheckReportConfig();
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_11:
   \   000230                ; Setup parameters for call to function zclMultiSensor_CheckReportConfig
   \   000230   12....       LCALL     `??zclMultiSensor_CheckReportConfig::?relay`; Banked call to: zclMultiSensor_CheckReportConfig
   1044            // The MULTISENSOR_CHECK_REPORT_EVT will then be triggered again and again
   1045            // if we never received the ConfiReportCmd, the MULTISENSOR_CHECK_REPORT_EVT
   1046            // has no change to be triggered.
   1047            
   1048            // We think this makes sense, since there is no reason for your app to perform
   1049            // constantly report unless the app is configured to report.
   1050            // if your app just need to automatically report after bootup, you can trigger
   1051            // MULTISENSOR_CHECK_REPORT_EVT in zclXXX_Init().
   1052            return TRUE;
   \   000233   7901         MOV       R1,#0x1
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_2:
   \   000235   740C         MOV       A,#0xc
   \   000237   02....       LJMP      ??Subroutine42_0 & 0xFFFF
   1053          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine43_0
   \   000002                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine44_0
   \   000002                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000003   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000006   C8           XCH       A,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FC           MOV       R4,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FD           MOV       R5,A
   \   00000B   85..82       MOV       DPL,?V0
   \   00000E   85..83       MOV       DPH,?V1
   \   000011   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000014   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E5..         MOV       A,?V0
   \   000002   2416         ADD       A,#0x16
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V12
   \   000004   85..83       MOV       DPH,?V13
   \   000007   E0           MOVX      A,@DPTR
   \   000008   85..82       MOV       DPL,?V4
   \   00000B   85..83       MOV       DPH,?V5
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   EA           MOV       A,R2
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   EB           MOV       A,R3
   \   00000A   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   13           RRC       A
   \   000004   13           RRC       A
   \   000005   13           RRC       A
   \   000006   541F         ANL       A,#0x1f
   \   000008   6401         XRL       A,#0x1
   \   00000A   5401         ANL       A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine46_0
   \   000002                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008                REQUIRE ??Subroutine51_0
   \   000008                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine52_0
   \   000001                ; // Fall through to label ??Subroutine52_0
   1054          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1055          static uint8 zclMultiSensor_ProcessInReadReportCfgCmd( zclIncomingMsg_t *pInMsg )
   \                     zclMultiSensor_ProcessInReadReportCfgCmd:
   1056          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   1057          //1. Get zclReadReportCfgCmd_t from incomming message
   1058            zclReadReportCfgCmd_t *pReadReportCfgCmd; 
   1059            zclReadReportCfgRspCmd_t *pReadReportCfgRspCmd;
   1060            
   1061            uint8 sendRsp = FALSE;
   \   00000E   C2..         CLR       ?VB.0
   1062            uint16 len;
   1063            uint8 i;
   1064            
   1065            pReadReportCfgCmd = (zclReadReportCfgCmd_t *)pInMsg->attrCmd;
   \   000010   EA           MOV       A,R2
   \   000011   2417         ADD       A,#0x17
   \   000013   F582         MOV       DPL,A
   \   000015   E4           CLR       A
   \   000016   35..         ADDC      A,?V3
   \   000018   F583         MOV       DPH,A
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V8,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V9,A
   1066            
   1067          //2. Check command in message == ZCL_CMD_READ_REPORT_CFG and allocate memory for respond message
   1068            if (pInMsg->zclHdr.commandID == ZCL_CMD_READ_REPORT_CFG )
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   6408         XRL       A,#0x8
   \   00002F   7025         JNZ       ??zclMultiSensor_ProcessInReadReportCfgCmd_0
   1069            {
   1070              // We need to send a response back - allocate for it
   1071              len = sizeof(zclReadReportCfgCmd_t) + (pReadReportCfgCmd->numAttr * sizeof(zclReportCfgRspRec_t));
   1072              pReadReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc(len);
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   85..82       MOV       DPL,?V8
   \   000034   85..83       MOV       DPH,?V9
   \   000037   E0           MOVX      A,@DPTR
   \   000038   75F00D       MOV       B,#0xd
   \   00003B   A4           MUL       AB
   \   00003C   A9F0         MOV       R1,B
   \   00003E   2401         ADD       A,#0x1
   \   000040   FA           MOV       R2,A
   \   000041   E4           CLR       A
   \   000042   39           ADDC      A,R1
   \   000043   FB           MOV       R3,A
   \   000044   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000047   8A..         MOV       ?V14,R2
   \   000049   8B..         MOV       ?V15,R3
   1073              
   1074              if ( pReadReportCfgRspCmd == NULL )
   \   00004B   EA           MOV       A,R2
   \   00004C   4B           ORL       A,R3
   \   00004D   7005         JNZ       ??zclMultiSensor_ProcessInReadReportCfgCmd_1
   1075              {
   1076                return FALSE;
   \   00004F   7900         MOV       R1,#0x0
   \   000051   02....       LJMP      ??zclMultiSensor_ProcessInReadReportCfgCmd_2 & 0xFFFF
   1077              }
   1078              sendRsp = TRUE;     // sendRsp is active when we got correct commandID
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_1:
   \   000054   D2..         SETB      ?VB.0
   1079            }
   1080            
   1081          //3. Find config. report record in table "config. report record list"
   1082            for (i = 0; i < pReadReportCfgCmd->numAttr; i++)
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_0:
   \   000056   75..00       MOV       ?V4,#0x0
   \   000059   8043         SJMP      ??zclMultiSensor_ProcessInReadReportCfgCmd_3
   1083            {
   1084              zclConfigReportRec_t *pConfigReportRec = NULL;       // find the rec and store here
   1085              zclReportCfgRspRec_t *pReportCfgRspRec = &(pReadReportCfgRspCmd->attrList[i]);
   1086              zclAttrRec_t attrRec;
   1087              
   1088              zcl_memset( pReportCfgRspRec, 0, sizeof( zclReportCfgRspRec_t ));
   1089              
   1090              if ( zclFindConfigReportRec (pInMsg->endPoint, pInMsg->clusterId,
   1091                                           pReadReportCfgCmd->attrList[i].attrID, &pConfigReportRec))
   1092              {
   1093          //4. If found configReportRec in table, write value to ReportCfgRspRec
   1094                if ( sendRsp )
   1095                {
   1096                   pReportCfgRspRec->status = ZCL_STATUS_SUCCESS;
   1097                      pReportCfgRspRec->direction = pConfigReportRec->cfgReportRec.direction;
   1098                      pReportCfgRspRec->attrID = pConfigReportRec->cfgReportRec.attrID;
   1099                      pReportCfgRspRec->dataType = pConfigReportRec->cfgReportRec.dataType;
   1100                      pReportCfgRspRec->minReportInt = pConfigReportRec->cfgReportRec.minReportInt;
   1101                      pReportCfgRspRec->maxReportInt = pConfigReportRec->cfgReportRec.maxReportInt;
   1102                      pReportCfgRspRec->timeoutPeriod = pConfigReportRec->cfgReportRec.timeoutPeriod;
   1103                      pReportCfgRspRec->reportableChange = pConfigReportRec->cfgReportRec.reportableChange;
   1104                }
   1105              }
   1106              else 
   1107              {
   1108          //5. If not found configReportRec, check if the attribute is an un-reportable or an un support one
   1109                uint8 status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_4:
   \   00005B   7E86         MOV       R6,#-0x7a
   1110                
   1111                if ( zclFindAttrRec( pInMsg->endPoint, pInMsg->clusterId, pReadReportCfgCmd->attrList[i].attrID, &attrRec))
   \   00005D                ; Setup parameters for call to function zclFindAttrRec
   \   00005D   7402         MOV       A,#0x2
   \   00005F   12....       LCALL     ?XSTACK_DISP100_8
   \   000062   88..         MOV       ?V12,R0
   \   000064   89..         MOV       ?V13,R1
   \   000066   78..         MOV       R0,#?V12
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006B   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00006E   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074   E9           MOV       A,R1
   \   000075   6002         JZ        ??zclMultiSensor_ProcessInReadReportCfgCmd_5
   1112                {
   1113                  // if found the attr rec, it is there bu un-reportale
   1114                  status = ZCL_STATUS_UNREPORTABLE_ATTRIBUTE;
   \   000077   7E8C         MOV       R6,#-0x74
   1115                }
   1116                // Attribute is not supported - move on to the next configReportRec record
   1117                if ( sendRsp )
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_5:
   \   000079   A2..         MOV       C,?VB.0
   \   00007B   501F         JNC       ??CrossCallReturnLabel_85
   1118                {
   1119                  pReportCfgRspRec->status = status;
   \   00007D   EE           MOV       A,R6
   \   00007E   85..82       MOV       DPL,?V0
   \   000081   85..83       MOV       DPH,?V1
   \   000084   F0           MOVX      @DPTR,A
   1120                  pReportCfgRspRec->direction = pReadReportCfgCmd->attrList[i].direction;
   \   000085   85..82       MOV       DPL,?V10
   \   000088   85..83       MOV       DPH,?V11
   \   00008B   A3           INC       DPTR
   \   00008C   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00008F   F0           MOVX      @DPTR,A
   1121                  pReportCfgRspRec->attrID = pReadReportCfgCmd->attrList[i].attrID;
   \   000090   85..82       MOV       DPL,?V6
   \   000093   85..83       MOV       DPH,?V7
   \   000096   12....       LCALL     ?Subroutine17 & 0xFFFF
   1122                }
   1123              }
   \                     ??CrossCallReturnLabel_20:
   \   000099   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00009C   05..         INC       ?V4
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_3:
   \   00009E   85..82       MOV       DPL,?V8
   \   0000A1   85..83       MOV       DPH,?V9
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   F8           MOV       R0,A
   \   0000A6   E5..         MOV       A,?V4
   \   0000A8   C3           CLR       C
   \   0000A9   98           SUBB      A,R0
   \   0000AA   4003         JC        $+5
   \   0000AC   02....       LJMP      ??zclMultiSensor_ProcessInReadReportCfgCmd_6 & 0xFFFF
   \   0000AF   85..82       MOV       DPL,?XSP + 0
   \   0000B2   85..83       MOV       DPH,?XSP + 1
   \   0000B5   E4           CLR       A
   \   0000B6   F0           MOVX      @DPTR,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   F0           MOVX      @DPTR,A
   \   0000B9   AE..         MOV       R6,?V4
   \   0000BB   EE           MOV       A,R6
   \   0000BC   75F00D       MOV       B,#0xd
   \   0000BF   A4           MUL       AB
   \   0000C0   F8           MOV       R0,A
   \   0000C1   A9F0         MOV       R1,B
   \   0000C3   E5..         MOV       A,?V14
   \   0000C5   28           ADD       A,R0
   \   0000C6   F582         MOV       DPL,A
   \   0000C8   E5..         MOV       A,?V15
   \   0000CA   39           ADDC      A,R1
   \   0000CB   F583         MOV       DPH,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   8582..       MOV       ?V0,DPL
   \   0000D1   8583..       MOV       ?V1,DPH
   \   0000D4                ; Setup parameters for call to function osal_memset
   \   0000D4   7C0D         MOV       R4,#0xd
   \   0000D6   7D00         MOV       R5,#0x0
   \   0000D8   7900         MOV       R1,#0x0
   \   0000DA   AA..         MOV       R2,?V0
   \   0000DC   AB..         MOV       R3,?V1
   \   0000DE   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000E1   EE           MOV       A,R6
   \   0000E2   75F003       MOV       B,#0x3
   \   0000E5   A4           MUL       AB
   \   0000E6   FE           MOV       R6,A
   \   0000E7   AFF0         MOV       R7,B
   \   0000E9   E5..         MOV       A,?V8
   \   0000EB   2E           ADD       A,R6
   \   0000EC   F5..         MOV       ?V10,A
   \   0000EE   E5..         MOV       A,?V9
   \   0000F0   3F           ADDC      A,R7
   \   0000F1   F5..         MOV       ?V11,A
   \   0000F3   E5..         MOV       A,?V10
   \   0000F5   2402         ADD       A,#0x2
   \   0000F7   F5..         MOV       ?V6,A
   \   0000F9   E4           CLR       A
   \   0000FA   35..         ADDC      A,?V11
   \   0000FC   F5..         MOV       ?V7,A
   \   0000FE                ; Setup parameters for call to function zclFindConfigReportRec
   \   0000FE   A8..         MOV       R0,?XSP + 0
   \   000100   A9..         MOV       R1,?XSP + 1
   \   000102   88..         MOV       ?V12,R0
   \   000104   89..         MOV       ?V13,R1
   \   000106   78..         MOV       R0,#?V12
   \   000108   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010B   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00010E   12....       LCALL     `??zclFindConfigReportRec::?relay`; Banked call to: zclFindConfigReportRec
   \   000111   7402         MOV       A,#0x2
   \   000113   12....       LCALL     ?DEALLOC_XSTACK8
   \   000116   E9           MOV       A,R1
   \   000117   7003         JNZ       $+5
   \   000119   02....       LJMP      ??zclMultiSensor_ProcessInReadReportCfgCmd_4 & 0xFFFF
   \   00011C   A2..         MOV       C,?VB.0
   \   00011E   4003         JC        $+5
   \   000120   02....       LJMP      ??CrossCallReturnLabel_85 & 0xFFFF
   \   000123   85..82       MOV       DPL,?V0
   \   000126   85..83       MOV       DPH,?V1
   \   000129   E4           CLR       A
   \   00012A   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   1124            } // for loop
   \                     ??CrossCallReturnLabel_93:
   \   00012D   2406         ADD       A,#0x6
   \   00012F   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000132   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000135   2407         ADD       A,#0x7
   \   000137   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00013A   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00013D   2409         ADD       A,#0x9
   \   00013F   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000142   A3           INC       DPTR
   \   000143   A3           INC       DPTR
   \   000144   A3           INC       DPTR
   \   000145   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000148   240A         ADD       A,#0xa
   \   00014A   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00014D   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000150   240C         ADD       A,#0xc
   \   000152   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000155   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000158   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00015B   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00015E   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000161   2410         ADD       A,#0x10
   \   000163   F582         MOV       DPL,A
   \   000165   E4           CLR       A
   \   000166   38           ADDC      A,R0
   \   000167   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00016A   E5..         MOV       A,?V0
   \   00016C   240B         ADD       A,#0xb
   \   00016E   F582         MOV       DPL,A
   \   000170   E4           CLR       A
   \   000171   35..         ADDC      A,?V1
   \   000173   F583         MOV       DPH,A
   \   000175   02....       LJMP      ??CrossCallReturnLabel_20 & 0xFFFF
   1125           
   1126          //6. Send cfg. respond message 
   1127            if (sendRsp)
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_6:
   \   000178   A2..         MOV       C,?VB.0
   \   00017A   504D         JNC       ??zclMultiSensor_ProcessInReadReportCfgCmd_7
   1128            {
   1129              pReadReportCfgCmd->numAttr = pReadReportCfgCmd->numAttr;
   \   00017C   E8           MOV       A,R0
   \   00017D   12....       LCALL     ?Subroutine7 & 0xFFFF
   1130              
   1131              zcl_SendReadReportCfgRspCmd( pInMsg->endPoint, &(pInMsg->srcAddr), pInMsg->clusterId,
   1132                                           pReadReportCfgRspCmd, !pInMsg->zclHdr.fc.direction, true, pInMsg->zclHdr.transSeqNum);
   \                     ??CrossCallReturnLabel_7:
   \   000180   E0           MOVX      A,@DPTR
   \   000181   F5..         MOV       ?V0,A
   \   000183   78..         MOV       R0,#?V0
   \   000185   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000188   75..01       MOV       ?V0,#0x1
   \   00018B   78..         MOV       R0,#?V0
   \   00018D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000190   85..82       MOV       DPL,?V2
   \   000193   85..83       MOV       DPH,?V3
   \   000196   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000199   F5..         MOV       ?V0,A
   \   00019B   78..         MOV       R0,#?V0
   \   00019D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A0   78..         MOV       R0,#?V14
   \   0001A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A5   85..82       MOV       DPL,?V2
   \   0001A8   85..83       MOV       DPH,?V3
   \   0001AB   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0001AE   E5..         MOV       A,?V2
   \   0001B0   240A         ADD       A,#0xa
   \   0001B2   FA           MOV       R2,A
   \   0001B3   E4           CLR       A
   \   0001B4   35..         ADDC      A,?V3
   \   0001B6   FB           MOV       R3,A
   \   0001B7   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0001BA   12....       LCALL     `??zcl_SendReadReportCfgRspCmd::?relay`; Banked call to: zcl_SendReadReportCfgRspCmd
   \   0001BD   7405         MOV       A,#0x5
   \   0001BF   12....       LCALL     ?DEALLOC_XSTACK8
   1133              zcl_mem_free( pReadReportCfgRspCmd );
   \   0001C2                ; Setup parameters for call to function osal_mem_free
   \   0001C2   AA..         MOV       R2,?V14
   \   0001C4   AB..         MOV       R3,?V15
   \   0001C6   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1134            }
   1135            return TRUE;
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_7:
   \   0001C9   7901         MOV       R1,#0x1
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_2:
   \   0001CB   02....       LJMP      ?Subroutine2 & 0xFFFF
   1136          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine45_0
   \   000006                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   F9           MOV       R1,A
   \   000004   85..82       MOV       DPL,?V0
   \   000007   85..83       MOV       DPH,?V1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FC           MOV       R4,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FD           MOV       R5,A
   \   00000B   85..82       MOV       DPL,?V2
   \   00000E   85..83       MOV       DPH,?V3
   \   000011   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000014   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E5..         MOV       A,?V2
   \   000002   2416         ADD       A,#0x16
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V3
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine47_0
   \   000002                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine48_0
   \   000003                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E8           MOV       A,R0
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   E9           MOV       A,R1
   \   000006                REQUIRE ??Subroutine49_0
   \   000006                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET
   1137          
   1138          
   1139          /*********************************************************************
   1140          * @fn      zclMultiSensor_CheckReportConfig
   1141          *
   1142          * @brief   Check if there is a reportable attribute in all cluster is timeout to report
   1143          *
   1144          * @param   none
   1145          *
   1146          * @return  none
   1147          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1148          static void zclMultiSensor_CheckReportConfig(void)
   \                     zclMultiSensor_CheckReportConfig:
   1149          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   1150            uint8 x, y;
   1151            uint8 stopChecking = TRUE;
   \   000005   75..01       MOV       ?V4,#0x1
   1152            
   1153            // Fill the "config. report rec list" for this endpoint
   1154            zclConfigReportRecsList *pConfigReportRecsList = zclFindConfigReportRecsList( MULTISENSOR_ENDPOINT );
   \   000008                ; Setup parameters for call to function zclFindConfigReportRecsList
   \   000008   7908         MOV       R1,#0x8
   \   00000A   12....       LCALL     `??zclFindConfigReportRecsList::?relay`; Banked call to: zclFindConfigReportRecsList
   \   00000D   8A..         MOV       ?V0,R2
   \   00000F   8B..         MOV       ?V1,R3
   1155            
   1156            if ( pConfigReportRecsList != NULL )
   \   000011   EA           MOV       A,R2
   \   000012   4B           ORL       A,R3
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??zclMultiSensor_CheckReportConfig_0 & 0xFFFF
   1157            {
   1158              /* This piece of code will classify each luster in the list of endpoint, then send report
   1159               * command coressponding cluster 
   1160               */
   1161              for ( x = 0; x < pConfigReportRecsList->numConfigReportRec; x++)
   \   000018   75..00       MOV       ?V5,#0x0
   \   00001B   EA           MOV       A,R2
   \   00001C   2404         ADD       A,#0x4
   \   00001E   F5..         MOV       ?V2,A
   \   000020   E4           CLR       A
   \   000021   35..         ADDC      A,?V1
   \   000023   F5..         MOV       ?V3,A
   \   000025   807A         SJMP      ??zclMultiSensor_CheckReportConfig_1
   1162              {
   1163                uint8 cIDuplicate = 0;
   1164                
   1165                for (y = 0; y < x; y++)
   1166                {
   1167                  if ( pConfigReportRecsList->configReportRecs[x].clusterId == 
   1168                      pConfigReportRecsList->configReportRecs[y].clusterId)
   \                     ??zclMultiSensor_CheckReportConfig_2:
   \   000027   E8           MOV       A,R0
   \   000028   2E           ADD       A,R6
   \   000029   F582         MOV       DPL,A
   \   00002B   E9           MOV       A,R1
   \   00002C   3F           ADDC      A,R7
   \   00002D   F583         MOV       DPH,A
   \   00002F   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000032   EB           MOV       A,R3
   \   000033   75F012       MOV       B,#0x12
   \   000036   A4           MUL       AB
   \   000037   F5..         MOV       ?V6,A
   \   000039   85F0..       MOV       ?V8,B
   \   00003C   E5..         MOV       A,?V8
   \   00003E   F5..         MOV       ?V7,A
   \   000040   E8           MOV       A,R0
   \   000041   25..         ADD       A,?V6
   \   000043   F582         MOV       DPL,A
   \   000045   E9           MOV       A,R1
   \   000046   35..         ADDC      A,?V7
   \   000048   F583         MOV       DPH,A
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   6C           XRL       A,R4
   \   00004C   7003         JNZ       ??zclMultiSensor_CheckReportConfig_3
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   6D           XRL       A,R5
   \                     ??zclMultiSensor_CheckReportConfig_3:
   \   000051   7002         JNZ       ??zclMultiSensor_CheckReportConfig_4
   1169                  {
   1170                    cIDuplicate = 1;
   \   000053   7A01         MOV       R2,#0x1
   1171                  }
   1172                }
   \                     ??zclMultiSensor_CheckReportConfig_4:
   \   000055   0B           INC       R3
   \                     ??zclMultiSensor_CheckReportConfig_5:
   \   000056   EB           MOV       A,R3
   \   000057   C3           CLR       C
   \   000058   95..         SUBB      A,?V5
   \   00005A   40CB         JC        ??zclMultiSensor_CheckReportConfig_2
   1173                
   1174                if (!cIDuplicate)
   \   00005C   EA           MOV       A,R2
   \   00005D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00005F   401C         JC        ??zclMultiSensor_CheckReportConfig_6
   1175                {
   1176                  zclMultiSensor_CheckAndSendClusterAttrReport( MULTISENSOR_ENDPOINT, pConfigReportRecsList->configReportRecs[x].clusterId, pConfigReportRecsList);
   \   000061                ; Setup parameters for call to function zclMultiSensor_CheckAndSendClusterAttrReport
   \   000061   AC..         MOV       R4,?V0
   \   000063   AD..         MOV       R5,?V1
   \   000065   85..82       MOV       DPL,?V2
   \   000068   85..83       MOV       DPH,?V3
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   2E           ADD       A,R6
   \   00006D   F8           MOV       R0,A
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   3F           ADDC      A,R7
   \   000071   8882         MOV       DPL,R0
   \   000073   F583         MOV       DPH,A
   \   000075   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   1177                }
   \                     ??CrossCallReturnLabel_108:
   \   000078   7908         MOV       R1,#0x8
   \   00007A   12....       LCALL     `??zclMultiSensor_CheckAndSendClusterAttrReport:`; Banked call to: zclMultiSensor_CheckAndSendClusterAttrReport
   1178                
   1179                if (pConfigReportRecsList->configReportRecs[x].cfgReportRec.maxReportInt != 0xFFFF)
   \                     ??zclMultiSensor_CheckReportConfig_6:
   \   00007D   85..82       MOV       DPL,?V2
   \   000080   85..83       MOV       DPH,?V3
   \   000083   E0           MOVX      A,@DPTR
   \   000084   2E           ADD       A,R6
   \   000085   F8           MOV       R0,A
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   3F           ADDC      A,R7
   \   000089   F9           MOV       R1,A
   \   00008A   E8           MOV       A,R0
   \   00008B   240C         ADD       A,#0xc
   \   00008D   F582         MOV       DPL,A
   \   00008F   E4           CLR       A
   \   000090   39           ADDC      A,R1
   \   000091   F583         MOV       DPH,A
   \   000093   E0           MOVX      A,@DPTR
   \   000094   F4           CPL       A
   \   000095   7003         JNZ       ??zclMultiSensor_CheckReportConfig_7
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   F4           CPL       A
   \                     ??zclMultiSensor_CheckReportConfig_7:
   \   00009A   6003         JZ        ??zclMultiSensor_CheckReportConfig_8
   1180                {
   1181                  stopChecking = FALSE;   // If there is any attribute setting to report, don't stop checking
   \   00009C   75..00       MOV       ?V4,#0x0
   1182                }
   \                     ??zclMultiSensor_CheckReportConfig_8:
   \   00009F   05..         INC       ?V5
   \                     ??zclMultiSensor_CheckReportConfig_1:
   \   0000A1   85..82       MOV       DPL,?V0
   \   0000A4   85..83       MOV       DPH,?V1
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F8           MOV       R0,A
   \   0000AC   E5..         MOV       A,?V5
   \   0000AE   C3           CLR       C
   \   0000AF   98           SUBB      A,R0
   \   0000B0   5018         JNC       ??zclMultiSensor_CheckReportConfig_0
   \   0000B2   7A00         MOV       R2,#0x0
   \   0000B4   7B00         MOV       R3,#0x0
   \   0000B6   E5..         MOV       A,?V5
   \   0000B8   75F012       MOV       B,#0x12
   \   0000BB   A4           MUL       AB
   \   0000BC   FE           MOV       R6,A
   \   0000BD   AFF0         MOV       R7,B
   \   0000BF   85..82       MOV       DPL,?V2
   \   0000C2   85..83       MOV       DPH,?V3
   \   0000C5   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   1183              }
   1184            }
   \                     ??CrossCallReturnLabel_68:
   \   0000C8   808C         SJMP      ??zclMultiSensor_CheckReportConfig_5
   1185            
   1186            gTimeCounter++;         // time ticks every second for checking attr report
   \                     ??zclMultiSensor_CheckReportConfig_0:
   \   0000CA   90....       MOV       DPTR,#gTimeCounter
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   2401         ADD       A,#0x1
   \   0000D0   F0           MOVX      @DPTR,A
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   3400         ADDC      A,#0x0
   \   0000D5   F0           MOVX      @DPTR,A
   1187            if (!stopChecking)
   \   0000D6   E5..         MOV       A,?V4
   \   0000D8   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000DA   400E         JC        ??zclMultiSensor_CheckReportConfig_9
   1188            {
   1189                osal_start_timerEx( zclMultiSensor_TaskID, MULTISENSOR_CHECK_REPORT__EVT, 1000); 
   \   0000DC                ; Setup parameters for call to function osal_start_timerEx
   \   0000DC   90....       MOV       DPTR,#__Constant_3e8
   \   0000DF   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000E2   7A04         MOV       R2,#0x4
   \   0000E4   12....       LCALL     ?Subroutine20 & 0xFFFF
   1190            }
   \                     ??CrossCallReturnLabel_27:
   \   0000E7   12....       LCALL     ?DEALLOC_XSTACK8
   1191          }
   \                     ??zclMultiSensor_CheckReportConfig_9:
   \   0000EA   7F09         MOV       R7,#0x9
   \   0000EC   02....       LJMP      ?BANKED_LEAVE_XDATA
   1192          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1193          static void sendZclAttrChangeReport(uint16 clusterId, uint16 attrID, uint8 *currentValue) 
   \                     sendZclAttrChangeReport:
   1194          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V4,R4
   \   000010   8D..         MOV       ?V5,R5
   1195          
   1196                  zclReportCmd_t *pReportCmd;
   1197                  zclReport_t *reportRec;
   1198                  zclAttrRec_t attrRec;
   1199                  uint8 len;
   1200              
   1201                  len = sizeof( zclReportCmd_t ) + (1 * sizeof( zclReport_t ));
   1202                  pReportCmd = (zclReportCmd_t *)zcl_mem_alloc( len );
   \   000012                ; Setup parameters for call to function osal_mem_alloc
   \   000012   7A06         MOV       R2,#0x6
   \   000014   7B00         MOV       R3,#0x0
   \   000016   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000019   8A..         MOV       ?V2,R2
   \   00001B   8B..         MOV       ?V3,R3
   1203                  pReportCmd->numAttr = 1;
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   7401         MOV       A,#0x1
   \   000023   F0           MOVX      @DPTR,A
   1204              
   1205                  reportRec = &(pReportCmd->attrList[0]);
   \   000024   A3           INC       DPTR
   \   000025   AE82         MOV       R6,DPL
   \   000027   AF83         MOV       R7,DPH
   1206                  zcl_memset( reportRec, 0, sizeof( zclReport_t ) );
   \   000029                ; Setup parameters for call to function osal_memset
   \   000029   7C05         MOV       R4,#0x5
   \   00002B   7D00         MOV       R5,#0x0
   \   00002D   7900         MOV       R1,#0x0
   \   00002F   EE           MOV       A,R6
   \   000030   FA           MOV       R2,A
   \   000031   EF           MOV       A,R7
   \   000032   FB           MOV       R3,A
   \   000033   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1207                  zclFindAttrRec( MULTISENSOR_ENDPOINT, clusterId, attrID, &attrRec);
   \   000036                ; Setup parameters for call to function zclFindAttrRec
   \   000036   A8..         MOV       R0,?XSP + 0
   \   000038   A9..         MOV       R1,?XSP + 1
   \   00003A   88..         MOV       ?V6,R0
   \   00003C   89..         MOV       ?V7,R1
   \   00003E   78..         MOV       R0,#?V6
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   AC..         MOV       R4,?V4
   \   000045   AD..         MOV       R5,?V5
   \   000047   AA..         MOV       R2,?V0
   \   000049   AB..         MOV       R3,?V1
   \   00004B   7908         MOV       R1,#0x8
   \   00004D   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000050   12....       LCALL     ?DEALLOC_XSTACK8
   1208              
   1209                  reportRec->attrID = attrRec.attr.attrId;
   \   000053   7402         MOV       A,#0x2
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00005B   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   1210                  reportRec->dataType = attrRec.attr.dataType;
   \                     ??CrossCallReturnLabel_86:
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   E0           MOVX      A,@DPTR
   \   000064   8E82         MOV       DPL,R6
   \   000066   8F83         MOV       DPH,R7
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   F0           MOVX      @DPTR,A
   1211                  reportRec->attrData = attrRec.attr.dataPtr; 
   \   00006B   7406         MOV       A,#0x6
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000073   A3           INC       DPTR
   \   000074   12....       LCALL     ?Subroutine10 & 0xFFFF
   1212                          
   1213                  SendZclAttrReport(MULTISENSOR_ENDPOINT, clusterId, pReportCmd, len);
   \                     ??CrossCallReturnLabel_88:
   \   000077                ; Setup parameters for call to function SendZclAttrReport
   \   000077   75..06       MOV       ?V4,#0x6
   \   00007A   78..         MOV       R0,#?V4
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007F   AC..         MOV       R4,?V2
   \   000081   AD..         MOV       R5,?V3
   \   000083   AA..         MOV       R2,?V0
   \   000085   AB..         MOV       R3,?V1
   \   000087   7908         MOV       R1,#0x8
   \   000089   12....       LCALL     `??SendZclAttrReport::?relay`; Banked call to: SendZclAttrReport
   \   00008C   7401         MOV       A,#0x1
   \   00008E   12....       LCALL     ?DEALLOC_XSTACK8
   1214              
   1215          }
   \   000091   7408         MOV       A,#0x8
   \   000093   12....       LCALL     ?DEALLOC_XSTACK8
   \   000096   7F08         MOV       R7,#0x8
   \   000098   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for multiSensor_Ep>`:
   \   000000   08           DB 8
   \   000001   00           DB 0
   \   000002   ....         DW zclMultiSensor_TaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclMultiSensor_CmdCallbacks>`:
   \   000000   ....         DW `??zclMultiSensor_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_ProcessCommissioningStatus::?r`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_ProcessCommissioningStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_BatteryWarningCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_BatteryWarningCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_ProcessIncomingMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_ProcessIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uartEventApplicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartEventApplicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_CheckAndSendClusterAttrReport:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_CheckAndSendClusterAttrReport

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SendZclAttrReport::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendZclAttrReport

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_ProcessInConfigReportCmd::?rel`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_ProcessInConfigReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_ProcessInReadReportCfgCmd::?re`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_ProcessInReadReportCfgCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_CheckReportConfig::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_CheckReportConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sendZclAttrChangeReport::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sendZclAttrChangeReport

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0}>`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
   1216          #endif  //ZCL_REPORT
   1217          
   1218          
   1219          /****************************************************************************
   1220          ****************************************************************************/
   1221          
   1222          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     49   SendZclAttrReport
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      1     53   sendZclAttrChangeReport
        0     25   -> SendZclAttrReport
        0     24   -> osal_mem_alloc
        0     24   -> osal_memset
        0     26   -> zclFindAttrRec
      0     27   uartEventApplicationCB
        0     25   -> HalUARTRead
        0     25   -> Hal_UART_RxBufLen
        0     27   -> sendZclAttrChangeReport
      2      0   zclMultiSensor_BasicResetCB
        2      0   -> zclMultiSensor_ResetAttributesToDefaultValues
      0      0   zclMultiSensor_BatteryWarningCB
      1     53   zclMultiSensor_CheckAndSendClusterAttrReport
        0     35   -> SendZclAttrReport
        0     34   -> osal_mem_alloc
        0     34   -> osal_memset
        0     36   -> zclFindAttrRec
      0     57   zclMultiSensor_CheckReportConfig
        0     21   -> osal_start_timerEx
        0     17   -> zclFindConfigReportRecsList
        0     17   -> zclMultiSensor_CheckAndSendClusterAttrReport
      0     38   zclMultiSensor_Init
        0     38   -> HalUARTOpen
        0     38   -> RegisterForKeys
        0     38   -> RegisterVoltageWarningCB
        0     38   -> afRegister
        0     38   -> bdb_RegisterCommissioningStatusCB
        0     38   -> bdb_RegisterSimpleDescriptor
        0     38   -> bdb_StartCommissioning
        0     38   -> zclGeneral_RegisterCmdCallbacks
        0     38   -> zclMultiSensor_ResetAttributesToDefaultValues
        0     38   -> zcl_registerAttrList
        0     38   -> zcl_registerConfigReportRecList
        0     38   -> zcl_registerForMsg
      2      4   zclMultiSensor_ProcessCommissioningStatus
        2      0   -> HalLedBlink
        2      4   -> osal_start_timerEx
      1     65   zclMultiSensor_ProcessInConfigReportCmd
        0     36   -> osal_mem_alloc
        0     36   -> osal_mem_free
        0     36   -> osal_memset
        0     38   -> zclFindAttrRec
        0     38   -> zclFindConfigReportRec
        0     36   -> zclMultiSensor_CheckReportConfig
        0     41   -> zcl_SendConfigReportRspCmd
      1     63   zclMultiSensor_ProcessInReadReportCfgCmd
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
        0     36   -> zclFindAttrRec
        0     36   -> zclFindConfigReportRec
        0     39   -> zcl_SendReadReportCfgRspCmd
      0     46   zclMultiSensor_ProcessIncomingMsg
        0     24   -> osal_mem_free
        0     24   -> zclMultiSensor_ProcessInConfigReportCmd
        0     24   -> zclMultiSensor_ProcessInReadReportCfgCmd
        0     29   -> zcl_SendReportCmd
      0     21   zclMultiSensor_event_loop
        0     17   -> HalKeyRead
        0     17   -> HalLedBlink
        0     17   -> NLME_LeaveReq
        0     17   -> Onboard_soft_reset
        0     17   -> bdb_ZedAttemptRecoverNwk
        0     17   -> osal_msg_deallocate
        0     17   -> osal_msg_receive
        0     17   -> osal_set_event
        0     21   -> osal_start_timerEx
        0     17   -> zclMultiSensor_CheckReportConfig
        0     17   -> zclMultiSensor_ProcessIncomingMsg
        0     17   -> zgWriteStartupOptions


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Constant {0, 0, 0}>
       7  ?<Initializer for multiSensor_Ep>
      18  ?<Initializer for zclMultiSensor_CmdCallbacks>
       8  ??Subroutine42_0
       4  ??Subroutine43_0
       8  ??Subroutine44_0
       9  ??Subroutine45_0
       6  ??Subroutine46_0
       3  ??Subroutine47_0
       6  ??Subroutine48_0
       5  ??Subroutine49_0
       5  ??Subroutine50_0
       6  ??Subroutine51_0
       7  ??Subroutine52_0
       6  ??Subroutine53_0
       8  ?Subroutine0
       7  ?Subroutine1
       2  ?Subroutine10
       4  ?Subroutine11
      24  ?Subroutine12
      24  ?Subroutine13
       2  ?Subroutine14
       1  ?Subroutine15
      20  ?Subroutine16
       6  ?Subroutine17
      10  ?Subroutine18
       6  ?Subroutine19
       2  ?Subroutine2
      13  ?Subroutine20
      10  ?Subroutine21
      14  ?Subroutine22
      13  ?Subroutine23
       8  ?Subroutine24
       9  ?Subroutine25
       7  ?Subroutine26
       2  ?Subroutine27
       6  ?Subroutine28
       6  ?Subroutine29
       2  ?Subroutine3
       9  ?Subroutine30
       7  ?Subroutine31
       5  ?Subroutine32
       9  ?Subroutine33
       8  ?Subroutine34
      11  ?Subroutine35
       5  ?Subroutine36
      14  ?Subroutine37
      14  ?Subroutine38
      12  ?Subroutine39
      12  ?Subroutine4
      10  ?Subroutine40
       6  ?Subroutine41
      18  ?Subroutine5
      15  ?Subroutine6
      14  ?Subroutine7
       5  ?Subroutine8
       4  ?Subroutine9
       1  NwkStateShadow
     159  SendZclAttrReport
       6  SendZclAttrReport::?relay
       4  __Constant_3e8
       2  gTimeCounter
       1  holdKeyCounter
       7  multiSensor_Ep
     155  sendZclAttrChangeReport
       6  sendZclAttrChangeReport::?relay
       1  signTempFlag
     569  uartEventApplicationCB
       6  uartEventApplicationCB::?relay
       1  uartFlag
       9  zclMultiSensor_BasicResetCB
       6  zclMultiSensor_BasicResetCB::?relay
       3  zclMultiSensor_BatteryWarningCB
       6  zclMultiSensor_BatteryWarningCB::?relay
     459  zclMultiSensor_CheckAndSendClusterAttrReport
       6  zclMultiSensor_CheckAndSendClusterAttrReport::?relay
     239  zclMultiSensor_CheckReportConfig
       6  zclMultiSensor_CheckReportConfig::?relay
      18  zclMultiSensor_CmdCallbacks
     217  zclMultiSensor_Init
       6  zclMultiSensor_Init::?relay
      66  zclMultiSensor_ProcessCommissioningStatus
       6  zclMultiSensor_ProcessCommissioningStatus::?relay
     570  zclMultiSensor_ProcessInConfigReportCmd
       6  zclMultiSensor_ProcessInConfigReportCmd::?relay
     462  zclMultiSensor_ProcessInReadReportCfgCmd
       6  zclMultiSensor_ProcessInReadReportCfgCmd::?relay
     297  zclMultiSensor_ProcessIncomingMsg
       6  zclMultiSensor_ProcessIncomingMsg::?relay
       1  zclMultiSensor_TaskID
      12  zclMultiSensor_dstAddr
     262  zclMultiSensor_event_loop
       6  zclMultiSensor_event_loop::?relay

 
 3 924 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
    25 bytes in segment XDATA_I
    25 bytes in segment XDATA_ID
    10 bytes in segment XDATA_ROM_C
    19 bytes in segment XDATA_Z
 
   103 bytes of CODE     memory
     6 bytes of CONST    memory (+ 4 bytes shared)
 3 924 bytes of HUGECODE memory
    44 bytes of XDATA    memory

Errors: none
Warnings: none
