###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               15/Jul/2020  10:08:33
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\TS-577\Desktop\Zigbee workspace\Product Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\Source\zcl_SampleSensorEnviroment.c
#    Command line       =  
#        -f C:\Users\TS-577\AppData\Local\Temp\EW83EF.tmp
#        ("C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\Source\zcl_SampleSensorEnviroment.c"
#        -D xBDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D xNV_INIT -D
#        xNV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK
#        -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS -D ZCL_REPORT -D
#        ZCL_REPORTING_DEVICE -lC "C:\Users\TS-577\Desktop\Zigbee
#        workspace\Product Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\TS-577\Desktop\Zigbee
#        workspace\Product Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "C:\Users\TS-577\Desktop\Zigbee workspace\Product Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "C:\Users\TS-577\Desktop\Zigbee workspace\Product Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000) -f
#        "C:\Users\TS-577\Desktop\Zigbee workspace\Product Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\Source\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\Source\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\TS-577\Desktop\Zigbee workspace\Product
#        Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Japanese_JPN.932
#    List file          =  
#        C:\Users\TS-577\Desktop\Zigbee workspace\Product Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\EndDeviceEB\List\zcl_SampleSensorEnviroment.lst
#    Object file        =  
#        C:\Users\TS-577\Desktop\Zigbee workspace\Product Developer\particular
#        product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\CC2530DB\EndDeviceEB\Obj\zcl_SampleSensorEnviroment.r51
#
###############################################################################

C:\Users\TS-577\Desktop\Zigbee workspace\Product Developer\particular product\Projects\zstack\HomeAutomation\SampleSensorEnviroment_2\Source\zcl_SampleSensorEnviroment.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampletemperaturesensor.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6            Description:    Zigbee Cluster Library - sample device application.
      7          
      8          
      9            Copyright 2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee Temperature Sensor, based on Z-Stack 3.0.
     42          
     43            This application is based on the common sample-application user interface. Please see the main
     44            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     45            this sample applicetion.
     46            
     47            Application-specific UI peripherals being used:
     48          
     49            - LEDs:
     50              LED1 is not used in this application
     51          
     52            Application-specific menu system:
     53          
     54              <SET LOCAL TEMP> Set the temperature of the local temperature sensor
     55                Up/Down changes the temperature 
     56                This screen shows the following information:
     57                  Line2:
     58                    Shows the temperature of the local temperature sensor
     59          
     60          *********************************************************************/
     61          
     62          /*********************************************************************
     63           * INCLUDES
     64           */
     65          #include "ZComDef.h"
     66          #include "OSAL.h"
     67          #include "AF.h"
     68          #include "ZDApp.h"
     69          #include "ZDObject.h"
     70          #include "ZDProfile.h"
     71          
     72          #include "zcl.h"
     73          #include "zcl_general.h"
     74          #include "zcl_ha.h"
     75          #include "zcl_ms.h"
     76          
     77          #include "zcl_SampleSensorEnviroment.h"
     78          
     79          #include "onboard.h"
     80          
     81          /* HAL */
     82          #include "hal_led.h"
     83          #include "hal_key.h"
     84          #include "hal_uart.h"
     85          
     86          #include "bdb_interface.h"
     87          #include "bdb_Reporting.h"
     88             
     89          /*********************************************************************
     90           * MACROS
     91           */
     92          
     93          // how often to report temperature
     94          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     95          
     96          
     97          /*********************************************************************
     98           * CONSTANTS
     99           */
    100          
    101          /*********************************************************************
    102           * TYPEDEFS
    103           */
    104          
    105          /*********************************************************************
    106           * GLOBAL VARIABLES
    107           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          byte zclSampleSensorEnviroment_TaskID;
   \                     zclSampleSensorEnviroment_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          uint8 zclSampleSensorEnviroment_SeqNum;
   \                     zclSampleSensorEnviroment_SeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    110          extern int16 zdpExternalStateTaskID;
    111          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          afAddrType_t zclSampleSensorEnviroment_dstAddr;
   \                     zclSampleSensorEnviroment_dstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    113          
    114          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          uint16 gTimeCounter;
   \                     gTimeCounter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    116          
    117          /*********************************************************************
    118           * GLOBAL FUNCTIONS
    119           */
    120          
    121          /*********************************************************************
    122           * LOCAL VARIABLES
    123           */
    124          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    125          devStates_t zclSampleSensorEnviroment_NwkState = DEV_INIT;
   \                     zclSampleSensorEnviroment_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSensorEnviroment_Nw`
   \   000001                REQUIRE __INIT_XDATA_I
    126          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    127          static endPointDesc_t sampleTemperatureSensor_Ep =
   \                     sampleTemperatureSensor_Ep:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleTemperatureSensor_Ep>`
   \   000007                REQUIRE __INIT_XDATA_I
    128          {
    129            SAMPLESENSORENVIROMENT_ENDPOINT_MUXSENSOR,           // Light sensor endpoint
    130            0,
    131            &zclSampleSensorEnviroment_TaskID,
    132            (SimpleDescriptionFormat_t *)NULL,                  // No Simple description for this test endpoint
    133            (afNetworkLatencyReq_t)0                            // No Network Latency req
    134          };
    135          
    136          /*********************************************************************
    137           * LOCAL FUNCTIONS
    138           */
    139            
    140          // Functions to process other events relate to hardware
    141          static void zclSampleSensorEnviroment_HandleKeys( byte shift, byte keys );
    142          static void zclSampleSensorEnviroment_BasicResetCB( void );
    143          static void zclSampleSensorEnviroment_BatteryWarningCB( uint8 voltLevel);
    144          
    145          // Function to process Commisioning
    146          static void zclSampleSensorEnviroment_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg);
    147          
    148          // Functions to process ZCL Foundation incoming Command/Response messages
    149          static void zclSampleSensorEnviroment_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    150          #ifdef ZCL_READ
    151          static uint8 zclSampleSensorEnviroment_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    152          #endif
    153          #ifdef ZCL_WRITE
    154          static uint8 zclSampleSensorEnviroment_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    155          #endif
    156          static uint8 zclSampleSensorEnviroment_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    157          #ifdef ZCL_DISCOVER
    158          static uint8 zclSampleSensorEnviroment_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    159          static uint8 zclSampleSensorEnviroment_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    160          static uint8 zclSampleSensorEnviroment_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    161          #endif // ZCL_DISCOVER
    162          
    163          static void zclSampleSensorEnviroment_CheckReportConfig(void);
    164          
    165          // Functions to process UART interface
    166          static void zclSampleSensorEnviroment_UART_Init(void);
    167          void uartEventApplicationCB(uint8 port, uint8 event);
    168          
    169          static uint8 SendZclAttrReport(uint8 srcEp, uint16 clusterId, zclReportCmd_t *pReportCmd,
    170                                         uint8 datalen);
    171          static void zclSampleSensorEnviroment_CheckAndSendClusterAttrReport( uint8 endpoint, uint16 clusterId,
    172                                                                               zclConfigReportRecsList *pConfigReportRecsList );
    173          
    174          // Functions to process ZCL REPORT message
    175          void zclSampleSensorEnviroment_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
    176          static uint8 zclSampleSensorEnviroment_ProcessInConfigReportCmd( zclIncomingMsg_t *pInMsg );
    177          static uint8 zclSampleSensorEnviroment_ProcessInReadReportCfgCmd( zclIncomingMsg_t *pInMsg );
    178          
    179          /*********************************************************************
    180           * STATUS STRINGS
    181           */
    182          
    183          /*********************************************************************
    184           * CONSTANTS
    185           */
    186          
    187          /*********************************************************************
    188           * ZCL General Profile Callback table
    189           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    190          static zclGeneral_AppCallbacks_t zclSampleSensorEnviroment_CmdCallbacks =
   \                     zclSampleSensorEnviroment_CmdCallbacks:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zclSampleSensorEnviroment_Cm`
   \   000012                REQUIRE __INIT_XDATA_I
    191          {
    192          // ************************************ Callback List of PIR Sensor Endpoint *********************************************/  
    193              zclSampleSensorEnviroment_BasicResetCB,         // Basic Cluster Reset command
    194              NULL,                                           // Identify Trigger Effect command
    195              NULL,             				                      // On/Off cluster command
    196              NULL,                                           // On/Off cluster enhanced command Off with Effect
    197              NULL,                                           // On/Off cluster enhanced command On with Recall Global Scene
    198              NULL,                                           // On/Off cluster enhanced command On with Timed Off
    199            #ifdef ZCL_LEVEL_CTRL
    200              NULL,                                           // Level Control Move to Level command
    201              NULL,                                           // Level Control Move command
    202              NULL,                                           // Level Control Step command
    203              NULL,                                           // Level Control Stop command
    204            #endif
    205            #ifdef ZCL_GROUPS
    206              NULL,                                           // Group Response commands
    207            #endif
    208            #ifdef ZCL_SCENES
    209              NULL,                                           // Scene Store Request command
    210              NULL,                                           // Scene Recall Request command
    211              NULL,                                           // Scene Response command
    212            #endif
    213            #ifdef ZCL_ALARMS
    214              NULL,                                           // Alarm (Response) commands
    215            #endif
    216            #ifdef SE_UK_EXT
    217              NULL,                                           // Get Event Log command
    218              NULL,                                           // Publish Event Log command
    219            #endif
    220              NULL,                                           // RSSI Location command
    221              NULL                                            // RSSI Location Response command
    222          };
    223          
    224          
    225          /*********************************************************************
    226           * @fn          zclSampleSensorEnviroment_Init
    227           *
    228           * @brief       Initialization function for the zclGeneral layer.
    229           *
    230           * @param       none
    231          *
    232          * @return      none
    233          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    234          void zclSampleSensorEnviroment_Init( byte task_id )
   \                     zclSampleSensorEnviroment_Init:
    235          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
    236            zclSampleSensorEnviroment_TaskID = task_id;
   \   00000B   90....       MOV       DPTR,#zclSampleSensorEnviroment_TaskID
   \   00000E   F0           MOVX      @DPTR,A
    237            
    238            // Set destination address of PIR Sensor to indirect
    239            zclSampleSensorEnviroment_dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00000F   90....       MOV       DPTR,#zclSampleSensorEnviroment_dstAddr + 8
   \   000012   7402         MOV       A,#0x2
   \   000014   F0           MOVX      @DPTR,A
    240            //zclSampleSensorEnviroment_dstAddr.endPoint = COOR_ENDPOINT_PIR;
    241            zclSampleSensorEnviroment_dstAddr.addr.shortAddr = 0x0000;                //Adress of coordinator
   \   000015   90....       MOV       DPTR,#zclSampleSensorEnviroment_dstAddr
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
    242            
    243            // Register the Simple Descriptor for this application
    244            bdb_RegisterSimpleDescriptor( &zclSampleSensorEnviroment_SimpleDesc );
   \   00001C                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   00001C   7A..         MOV       R2,#zclSampleSensorEnviroment_SimpleDesc & 0xff
   \   00001E   7B..         MOV       R3,#(zclSampleSensorEnviroment_SimpleDesc >> 8) & 0xff
   \   000020   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    245            
    246            // Register the ZCL General Cluster Library callback functions
    247            zclGeneral_RegisterCmdCallbacks( SAMPLESENSORENVIROMENT_ENDPOINT_MUXSENSOR, &zclSampleSensorEnviroment_CmdCallbacks );
   \   000023                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000023   7A..         MOV       R2,#zclSampleSensorEnviroment_CmdCallbacks & 0xff
   \   000025   7B..         MOV       R3,#(zclSampleSensorEnviroment_CmdCallbacks >> 8) & 0xff
   \   000027   7908         MOV       R1,#0x8
   \   000029   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    248          
    249          
    250            // Register the application's attribute list
    251            zclSampleSensorEnviroment_ResetAttributesToDefaultValues();
   \   00002C                ; Setup parameters for call to function zclSampleSensorEnviroment_ResetAttributesToDefaultValues
   \   00002C   12....       LCALL     ??zclSampleSensorEnviroment_ResetAttributesToDe; Banked call to: zclSampleSensorEnviroment_ResetAttributesToDefaultValues
    252            zcl_registerAttrList( SAMPLESENSORENVIROMENT_ENDPOINT_MUXSENSOR, zclSampleSensorEnviroment_NumAttributes, zclSampleSensorEnviroment_Attrs );    
   \   00002F                ; Setup parameters for call to function zcl_registerAttrList
   \   00002F   7C..         MOV       R4,#zclSampleSensorEnviroment_Attrs & 0xff
   \   000031   7D..         MOV       R5,#(zclSampleSensorEnviroment_Attrs >> 8) & 0xff
   \   000033   90....       MOV       DPTR,#zclSampleSensorEnviroment_NumAttributes
   \   000036   E4           CLR       A
   \   000037   93           MOVC      A,@A+DPTR
   \   000038   FA           MOV       R2,A
   \   000039   7908         MOV       R1,#0x8
   \   00003B   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    253            
    254            // Register the Application to receive the unprocessed Foundation command/response messages
    255            zcl_registerForMsg( zclSampleSensorEnviroment_TaskID );
   \   00003E                ; Setup parameters for call to function zcl_registerForMsg
   \   00003E   90....       MOV       DPTR,#zclSampleSensorEnviroment_TaskID
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    256              
    257            // Register low voltage NV memory protection application callback
    258            RegisterVoltageWarningCB( zclSampleSensorEnviroment_BatteryWarningCB );
   \   000046                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   000046   7A..         MOV       R2,#`??zclSampleSensorEnviroment_BatteryWarningCB::?` & 0xff
   \   000048   7B..         MOV       R3,#(`??zclSampleSensorEnviroment_BatteryWarningCB::?` >> 8) & 0xff
   \   00004A   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    259            
    260            // Register for all key events - This app will handle all key events
    261            RegisterForKeys( zclSampleSensorEnviroment_TaskID );
   \   00004D                ; Setup parameters for call to function RegisterForKeys
   \   00004D   90....       MOV       DPTR,#zclSampleSensorEnviroment_TaskID
   \   000050   E0           MOVX      A,@DPTR
   \   000051   F9           MOV       R1,A
   \   000052   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    262            
    263            zclSampleSensorEnviroment_UART_Init();
   \   000055   85..82       MOV       DPL,?XSP + 0
   \   000058   85..83       MOV       DPH,?XSP + 1
   \   00005B   7401         MOV       A,#0x1
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   7402         MOV       A,#0x2
   \   000063   F0           MOVX      @DPTR,A
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   E4           CLR       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069   7403         MOV       A,#0x3
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   7430         MOV       A,#0x30
   \   000070   F0           MOVX      @DPTR,A
   \   000071   A3           INC       DPTR
   \   000072   E4           CLR       A
   \   000073   F0           MOVX      @DPTR,A
   \   000074   740A         MOV       A,#0xa
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   744B         MOV       A,#0x4b
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   A3           INC       DPTR
   \   00007D   E4           CLR       A
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   7412         MOV       A,#0x12
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   7407         MOV       A,#0x7
   \   000086   F0           MOVX      @DPTR,A
   \   000087   A3           INC       DPTR
   \   000088   E4           CLR       A
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   7405         MOV       A,#0x5
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   7406         MOV       A,#0x6
   \   000091   F0           MOVX      @DPTR,A
   \   000092   7416         MOV       A,#0x16
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   7401         MOV       A,#0x1
   \   000099   F0           MOVX      @DPTR,A
   \   00009A   741B         MOV       A,#0x1b
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   74..         MOV       A,#`??uartEventApplicationCB::?relay` & 0xff
   \   0000A1   F0           MOVX      @DPTR,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   74..         MOV       A,#(`??uartEventApplicationCB::?relay` >> 8) & 0xff
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6                ; Setup parameters for call to function HalUARTOpen
   \   0000A6   AA..         MOV       R2,?XSP + 0
   \   0000A8   AB..         MOV       R3,?XSP + 1
   \   0000AA   7900         MOV       R1,#0x0
   \   0000AC   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    264             
    265            // Register the application's config report record list
    266            zcl_registerConfigReportRecList( SAMPLESENSORENVIROMENT_ENDPOINT_MUXSENSOR,
    267                                             zclSampleSensorEnviroment_NumConfigReportRecs, zclSampleSensorEnviroment_ConfigReportRecs );
   \   0000AF                ; Setup parameters for call to function zcl_registerConfigReportRecList
   \   0000AF   7C..         MOV       R4,#zclSampleSensorEnviroment_ConfigReportRecs & 0xff
   \   0000B1   7D..         MOV       R5,#(zclSampleSensorEnviroment_ConfigReportRecs >> 8) & 0xff
   \   0000B3   90....       MOV       DPTR,#zclSampleSensorEnviroment_NumConfigReportRecs
   \   0000B6   E4           CLR       A
   \   0000B7   93           MOVC      A,@A+DPTR
   \   0000B8   FA           MOV       R2,A
   \   0000B9   7908         MOV       R1,#0x8
   \   0000BB   12....       LCALL     `??zcl_registerConfigReportRecList::?relay`; Banked call to: zcl_registerConfigReportRecList
    268           
    269            
    270            // Register commissioning status callback
    271            bdb_RegisterCommissioningStatusCB( zclSampleSensorEnviroment_ProcessCommissioningStatus );
   \   0000BE                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   0000BE   7A..         MOV       R2,#??zclSampleSensorEnviroment_ProcessCommissionin & 0xff
   \   0000C0   7B..         MOV       R3,#(??zclSampleSensorEnviroment_ProcessCommissionin >> 8) & 0xff
   \   0000C2   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    272            
    273            //Register for Endpoints
    274            afRegister( &sampleTemperatureSensor_Ep );
   \   0000C5                ; Setup parameters for call to function afRegister
   \   0000C5   7A..         MOV       R2,#sampleTemperatureSensor_Ep & 0xff
   \   0000C7   7B..         MOV       R3,#(sampleTemperatureSensor_Ep >> 8) & 0xff
   \   0000C9   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    275          
    276            bdb_StartCommissioning( BDB_COMMISSIONING_MODE_NWK_STEERING);
   \   0000CC                ; Setup parameters for call to function bdb_StartCommissioning
   \   0000CC   7902         MOV       R1,#0x2
   \   0000CE   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    277            zdpExternalStateTaskID = zclSampleSensorEnviroment_TaskID;
   \   0000D1   90....       MOV       DPTR,#zclSampleSensorEnviroment_TaskID
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   0000D8   F0           MOVX      @DPTR,A
   \   0000D9   A3           INC       DPTR
   \   0000DA   E4           CLR       A
   \   0000DB   F0           MOVX      @DPTR,A
    278            
    279          }
   \   0000DC   741D         MOV       A,#0x1d
   \   0000DE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E1                REQUIRE ?Subroutine0
   \   0000E1                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    280          
    281          
    282          
    283          /*********************************************************************
    284           * @fn      zclSampleSensorEnviroment_LcdDisplayMainMode
    285           *
    286           * @brief   Called to display the main screen on the LCD.
    287           *
    288           * @param   none
    289           *
    290           * @return  none
    291           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    292          static void zclSampleSensorEnviroment_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg)
   \                     zclSampleSensorEnviroment_ProcessCommissioningStatus:
    293          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    294              switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   14           DEC       A
   \   00000B   601B         JZ        ??zclSampleSensorEnviroment_ProcessCommissionin_1
   \   00000D   14           DEC       A
   \   00000E   6006         JZ        ??zclSampleSensorEnviroment_ProcessCommissionin_2
   \   000010   24FD         ADD       A,#-0x3
   \   000012   602D         JZ        ??zclSampleSensorEnviroment_ProcessCommissionin_3
   \   000014   804B         SJMP      ??zclSampleSensorEnviroment_ProcessCommissionin_4
    295              {
    296                case BDB_COMMISSIONING_FORMATION:
    297                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \                     ??zclSampleSensorEnviroment_ProcessCommissionin_2:
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   7044         JNZ       ??zclSampleSensorEnviroment_ProcessCommissionin_4
    298                  {
    299                    //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
    300                    bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   00001D                ; Setup parameters for call to function bdb_StartCommissioning
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   4402         ORL       A,#0x2
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \   000026   8039         SJMP      ??zclSampleSensorEnviroment_ProcessCommissionin_4
    301                  }
    302                  else
    303                  {
    304                    //Want to try other channels?
    305                    //try with bdb_setChannelAttribute
    306                  }
    307                break;
    308              case BDB_COMMISSIONING_NWK_STEERING:
    309                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \                     ??zclSampleSensorEnviroment_ProcessCommissionin_1:
   \   000028   8A82         MOV       DPL,R2
   \   00002A   8B83         MOV       DPH,R3
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   7032         JNZ       ??zclSampleSensorEnviroment_ProcessCommissionin_4
    310                {
    311                  //YOUR JOB:
    312                  //We are on the nwk, what now?
    313                  HalLedBlink(HAL_LED_1, 6, 50, 200);
   \   00002F                ; Setup parameters for call to function HalLedBlink
   \   00002F   7CC8         MOV       R4,#-0x38
   \   000031   7D00         MOV       R5,#0x0
   \   000033   7B32         MOV       R3,#0x32
   \   000035   7A06         MOV       R2,#0x6
   \   000037   7901         MOV       R1,#0x1
   \   000039   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    314                  zclSampleSensorEnviroment_CheckReportConfig( );
   \   00003C                ; Setup parameters for call to function zclSampleSensorEnviroment_CheckReportConfig
   \   00003C   12....       LCALL     `??zclSampleSensorEnviroment_CheckReportConfig::`; Banked call to: zclSampleSensorEnviroment_CheckReportConfig
   \   00003F   8020         SJMP      ??zclSampleSensorEnviroment_ProcessCommissionin_4
    315          
    316                }
    317                  else
    318                  {
    319                    //See the possible errors for nwk steering procedure
    320                    //No suitable networks found
    321                    //Want to try other channels?
    322                    //try with bdb_setChannelAttribute
    323                      //bdb_StartCommissioning( BDB_COMMISSIONING_MODE_NWK_STEERING);
    324          
    325                  }
    326                break;
    327                case BDB_COMMISSIONING_FINDING_BINDING:
    328                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    329                  {
    330                    //YOUR JOB:
    331                  }
    332                  else
    333                  {
    334                    //YOUR JOB:
    335                    //retry?, wait for user interaction?
    336                  }
    337                break;
    338                case BDB_COMMISSIONING_INITIALIZATION:
    339                  //Initialization notification can only be successful. Failure on initialization 
    340                  //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    341                  
    342                  //YOUR JOB:
    343                  //We are on a network, what now?
    344                  
    345                break;
    346          #if ZG_BUILD_ENDDEVICE_TYPE    
    347              case BDB_COMMISSIONING_PARENT_LOST:
    348                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
   \                     ??zclSampleSensorEnviroment_ProcessCommissionin_3:
   \   000041   8A82         MOV       DPL,R2
   \   000043   8B83         MOV       DPH,R3
   \   000045   E0           MOVX      A,@DPTR
   \   000046   640D         XRL       A,#0xd
   \   000048   6017         JZ        ??zclSampleSensorEnviroment_ProcessCommissionin_4
    349                {
    350                  //We did recover from losing parent
    351                }
    352                else
    353                {
    354                  //Parent not found, attempt to rejoin again after a fixed delay
    355                  osal_start_timerEx(zclSampleSensorEnviroment_TaskID, SAMPLESENSORENVIROMENT_END_DEVICE_REJOIN_EVT, SAMPLESENSORENVIROMENT_END_DEVICE_REJOIN_DELAY);
   \   00004A                ; Setup parameters for call to function osal_start_timerEx
   \   00004A   90....       MOV       DPTR,#__Constant_3e8
   \   00004D   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000050   7A02         MOV       R2,#0x2
   \   000052   7B00         MOV       R3,#0x0
   \   000054   90....       MOV       DPTR,#zclSampleSensorEnviroment_TaskID
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F9           MOV       R1,A
   \   000059   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00005C   7404         MOV       A,#0x4
   \   00005E   12....       LCALL     ?DEALLOC_XSTACK8
    356                }
    357              break;
    358          #endif 
    359              }
    360          }
   \                     ??zclSampleSensorEnviroment_ProcessCommissionin_4:
   \   000061                REQUIRE ?Subroutine1
   \   000061                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    361          
    362          /*********************************************************************
    363           * @fn          zclSample_event_loop
    364           *
    365           * @brief       Event Loop Processor for zclGeneral.
    366           *
    367           * @param       none
    368           *
    369           * @return      none
    370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    371          uint16 zclSampleSensorEnviroment_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleSensorEnviroment_event_loop:
    372          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    373            afIncomingMSGPacket_t *MSGpkt;
    374          
    375            (void)task_id;  // Intentionally unreferenced parameter
    376          
    377            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   7020         JNZ       ??zclSampleSensorEnviroment_event_loop_0
    378            {
    379              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleSensorEnviroment_TaskID )) )
    380              {
    381                switch ( MSGpkt->hdr.event )
    382                {
    383                  case ZCL_INCOMING_MSG:
    384                    // Incoming ZCL Foundation command/response messages
    385                    zclSampleSensorEnviroment_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    386                    break;
    387          
    388                  case KEY_CHANGE:
    389                    zclSampleSensorEnviroment_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    390                    break;
    391                    
    392                  case ZDO_STATE_CHANGE:
    393                    break;
    394          
    395                  default:
    396                    break;
    397                }
    398          
    399                // Release the memory
    400                osal_msg_deallocate( (uint8 *)MSGpkt );
    401              }
    402              
    403              // return unprocessed events
    404              return (events ^ SYS_EVENT_MSG);
    405            }
    406            
    407          #if ZG_BUILD_ENDDEVICE_TYPE    
    408            if ( events & SAMPLESENSORENVIROMENT_END_DEVICE_REJOIN_EVT )
   \   00000D   EA           MOV       A,R2
   \   00000E   5402         ANL       A,#0x2
   \   000010   6032         JZ        ??zclSampleSensorEnviroment_event_loop_1
    409            {
    410              bdb_ZedAttemptRecoverNwk();
   \   000012                ; Setup parameters for call to function bdb_ZedAttemptRecoverNwk
   \   000012   12....       LCALL     `??bdb_ZedAttemptRecoverNwk::?relay`; Banked call to: bdb_ZedAttemptRecoverNwk
    411              return ( events ^ SAMPLESENSORENVIROMENT_END_DEVICE_REJOIN_EVT );
   \   000015   EE           MOV       A,R6
   \   000016   6402         XRL       A,#0x2
   \   000018   8035         SJMP      ??zclSampleSensorEnviroment_event_loop_2
    412            }
   \                     ??zclSampleSensorEnviroment_event_loop_3:
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6434         XRL       A,#0x34
   \   000021   7003         JNZ       ??zclSampleSensorEnviroment_event_loop_4
   \   000023                ; Setup parameters for call to function zclSampleSensorEnviroment_ProcessIncomingMsg
   \   000023   12....       LCALL     `??zclSampleSensorEnviroment_ProcessIncomingMsg:`; Banked call to: zclSampleSensorEnviroment_ProcessIncomingMsg
   \                     ??zclSampleSensorEnviroment_event_loop_4:
   \   000026                ; Setup parameters for call to function osal_msg_deallocate
   \   000026   AA..         MOV       R2,?V0
   \   000028   AB..         MOV       R3,?V1
   \   00002A   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleSensorEnviroment_event_loop_0:
   \   00002D                ; Setup parameters for call to function osal_msg_receive
   \   00002D   90....       MOV       DPTR,#zclSampleSensorEnviroment_TaskID
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F9           MOV       R1,A
   \   000032   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000035   8A..         MOV       ?V0,R2
   \   000037   8B..         MOV       ?V1,R3
   \   000039   EA           MOV       A,R2
   \   00003A   4B           ORL       A,R3
   \   00003B   70DD         JNZ       ??zclSampleSensorEnviroment_event_loop_3
   \   00003D   EE           MOV       A,R6
   \   00003E   FA           MOV       R2,A
   \   00003F   EF           MOV       A,R7
   \   000040   6480         XRL       A,#0x80
   \   000042   800D         SJMP      ??zclSampleSensorEnviroment_event_loop_5
    413          #endif
    414            
    415              if ( events & SAMPLESENSORENVIROMENT_CHECK_REPORT__EVT )
   \                     ??zclSampleSensorEnviroment_event_loop_1:
   \   000044   EA           MOV       A,R2
   \   000045   5404         ANL       A,#0x4
   \   000047   600B         JZ        ??zclSampleSensorEnviroment_event_loop_6
    416            {
    417              zclSampleSensorEnviroment_CheckReportConfig();
   \   000049                ; Setup parameters for call to function zclSampleSensorEnviroment_CheckReportConfig
   \   000049   12....       LCALL     `??zclSampleSensorEnviroment_CheckReportConfig::`; Banked call to: zclSampleSensorEnviroment_CheckReportConfig
    418              return ( events ^ SAMPLESENSORENVIROMENT_CHECK_REPORT__EVT );
   \   00004C   EE           MOV       A,R6
   \   00004D   6404         XRL       A,#0x4
   \                     ??zclSampleSensorEnviroment_event_loop_2:
   \   00004F   FA           MOV       R2,A
   \   000050   EF           MOV       A,R7
   \                     ??zclSampleSensorEnviroment_event_loop_5:
   \   000051   FB           MOV       R3,A
   \   000052   8004         SJMP      ??zclSampleSensorEnviroment_event_loop_7
    419            }
    420            
    421            // Discard unknown events
    422            return 0;
   \                     ??zclSampleSensorEnviroment_event_loop_6:
   \   000054   7A00         MOV       R2,#0x0
   \   000056   7B00         MOV       R3,#0x0
   \                     ??zclSampleSensorEnviroment_event_loop_7:
   \   000058   80..         SJMP      ??Subroutine40_0
    423          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    424          
    425          /*********************************************************************
    426           * @fn      zclSampleSensorEnviroment_BasicResetCB
    427           *
    428           * @brief   Callback from the ZCL General Cluster Library
    429           *          to set all the Basic Cluster attributes to default values.
    430           *
    431           * @param   none
    432           *
    433           * @return  none
    434           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    435          static void zclSampleSensorEnviroment_BasicResetCB( void )
   \                     zclSampleSensorEnviroment_BasicResetCB:
    436          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    437            zclSampleSensorEnviroment_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclSampleSensorEnviroment_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     ??zclSampleSensorEnviroment_ResetAttributesToDe; Banked call to: zclSampleSensorEnviroment_ResetAttributesToDefaultValues
    438          }
   \   000007   80..         SJMP      ?Subroutine1
    439          
    440          /*********************************************************************
    441           * @fn      zclSampleSensorEnviroment_BatteryWarningCB
    442           *
    443           * @brief   Called to handle battery-low situation.
    444           *
    445           * @param   voltLevel - level of severity
    446           *
    447           * @return  none
    448           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          void zclSampleSensorEnviroment_BatteryWarningCB( uint8 voltLevel )
   \                     zclSampleSensorEnviroment_BatteryWarningCB:
    450          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    451            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
    452            {
    453              // Send warning message to the gateway and blink LED
    454            }
    455            else if ( voltLevel == VOLT_LEVEL_BAD )
    456            {
    457              // Shut down the system
    458            }
    459          }
   \   000000   02....       LJMP      ?BRET
    460          
    461          /******************************************************************************
    462           *
    463           *  Functions for processing ZCL Foundation incoming Command/Response messages
    464           *
    465           *****************************************************************************/
    466          
    467          /*********************************************************************
    468           * @fn      zclSampleSensorEnviroment_ProcessIncomingMsg
    469           *
    470           * @brief   Process ZCL Foundation incoming message
    471           *
    472           * @param   pInMsg - pointer to the received message
    473           *
    474           * @return  none
    475           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    476          static void zclSampleSensorEnviroment_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
   \                     zclSampleSensorEnviroment_ProcessIncomingMsg:
    477          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    478            switch ( pInMsg->zclHdr.commandID )
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   FE           MOV       R6,A
   \   00000E   E9           MOV       A,R1
   \   00000F   FF           MOV       R7,A
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   14           DEC       A
   \   00001D   6022         JZ        ??zclSampleSensorEnviroment_ProcessIncomingMsg_0
   \   00001F   24FD         ADD       A,#-0x3
   \   000021   602B         JZ        ??zclSampleSensorEnviroment_ProcessIncomingMsg_1
   \   000023   24FE         ADD       A,#-0x2
   \   000025   6034         JZ        ??zclSampleSensorEnviroment_ProcessIncomingMsg_2
   \   000027   24FE         ADD       A,#-0x2
   \   000029   6035         JZ        ??zclSampleSensorEnviroment_ProcessIncomingMsg_3
   \   00002B   24FE         ADD       A,#-0x2
   \   00002D   6036         JZ        ??zclSampleSensorEnviroment_ProcessIncomingMsg_4
   \   00002F   24FD         ADD       A,#-0x3
   \   000031   603C         JZ        ??zclSampleSensorEnviroment_ProcessIncomingMsg_5
   \   000033   24FB         ADD       A,#-0x5
   \   000035   6033         JZ        ??zclSampleSensorEnviroment_ProcessIncomingMsg_6
   \   000037   24FE         ADD       A,#-0x2
   \   000039   602F         JZ        ??zclSampleSensorEnviroment_ProcessIncomingMsg_6
   \   00003B   24FE         ADD       A,#-0x2
   \   00003D   6042         JZ        ??zclSampleSensorEnviroment_ProcessIncomingMsg_7
   \   00003F   8052         SJMP      ??zclSampleSensorEnviroment_ProcessIncomingMsg_8
    479            {
    480          #ifdef ZCL_READ
    481              case ZCL_CMD_READ_RSP:
    482                zclSampleSensorEnviroment_ProcessInReadRspCmd( pInMsg );
   \                     ??zclSampleSensorEnviroment_ProcessIncomingMsg_0:
   \   000041   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F9           MOV       R1,A
   \   000046   E8           MOV       A,R0
   \   000047   C3           CLR       C
   \   000048   99           SUBB      A,R1
   \   000049   5048         JNC       ??zclSampleSensorEnviroment_ProcessIncomingMsg_8
   \   00004B   08           INC       R0
   \   00004C   80F6         SJMP      ??CrossCallReturnLabel_23
    483                break;
    484          #endif
    485          #ifdef ZCL_WRITE
    486              case ZCL_CMD_WRITE_RSP:
    487                zclSampleSensorEnviroment_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclSampleSensorEnviroment_ProcessIncomingMsg_1:
   \   00004E   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000051   E0           MOVX      A,@DPTR
   \   000052   F9           MOV       R1,A
   \   000053   E8           MOV       A,R0
   \   000054   C3           CLR       C
   \   000055   99           SUBB      A,R1
   \   000056   503B         JNC       ??zclSampleSensorEnviroment_ProcessIncomingMsg_8
   \   000058   08           INC       R0
   \   000059   80F6         SJMP      ??CrossCallReturnLabel_24
    488                break;
    489          #endif
    490          #ifdef ZCL_REPORT
    491              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    492              case ZCL_CMD_CONFIG_REPORT:
    493                zclSampleSensorEnviroment_ProcessInConfigReportCmd( pInMsg );
   \                     ??zclSampleSensorEnviroment_ProcessIncomingMsg_2:
   \   00005B                ; Setup parameters for call to function zclSampleSensorEnviroment_ProcessInConfigReportCmd
   \   00005B   12....       LCALL     ??zclSampleSensorEnviroment_ProcessInConfigRepo; Banked call to: zclSampleSensorEnviroment_ProcessInConfigReportCmd
    494                break;
   \   00005E   8033         SJMP      ??zclSampleSensorEnviroment_ProcessIncomingMsg_8
    495                case ZCL_CMD_READ_REPORT_CFG:
    496                zclSampleSensorEnviroment_ProcessInReadReportCfgCmd( pInMsg );
   \                     ??zclSampleSensorEnviroment_ProcessIncomingMsg_3:
   \   000060                ; Setup parameters for call to function zclSampleSensorEnviroment_ProcessInReadReportCfgCmd
   \   000060   12....       LCALL     ??zclSampleSensorEnviroment_ProcessInReadReport; Banked call to: zclSampleSensorEnviroment_ProcessInReadReportCfgCmd
    497                break;
   \   000063   802E         SJMP      ??zclSampleSensorEnviroment_ProcessIncomingMsg_8
    498              case ZCL_CMD_CONFIG_REPORT_RSP:
    499                //zclSampleSensorEnviroment_ProcessInConfigReportRspCmd( pInMsg );
    500                break;
    501              case ZCL_CMD_READ_REPORT_CFG_RSP:
    502                //zclSampleSensorEnviroment_ProcessInReadReportCfgRspCmd( pInMsg );
    503                break;
    504          
    505              case ZCL_CMD_REPORT:
    506                zclSampleSensorEnviroment_ProcessInReportCmd( pInMsg );
   \                     ??zclSampleSensorEnviroment_ProcessIncomingMsg_4:
   \   000065                ; Setup parameters for call to function zclSampleSensorEnviroment_ProcessInReportCmd
   \   000065   12....       LCALL     `??zclSampleSensorEnviroment_ProcessInReportCmd:`; Banked call to: zclSampleSensorEnviroment_ProcessInReportCmd
    507                break;
   \   000068   8029         SJMP      ??zclSampleSensorEnviroment_ProcessIncomingMsg_8
    508          #endif
    509              case ZCL_CMD_DEFAULT_RSP:
    510                zclSampleSensorEnviroment_ProcessInDefaultRspCmd( pInMsg );
    511                break;
    512          #ifdef ZCL_DISCOVER
    513              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    514                zclSampleSensorEnviroment_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??zclSampleSensorEnviroment_ProcessIncomingMsg_6:
   \   00006A                ; Setup parameters for call to function zclSampleSensorEnviroment_ProcessInDiscCmdsRspCmd
    515                break;
    516          
    517              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    518                zclSampleSensorEnviroment_ProcessInDiscCmdsRspCmd( pInMsg );
   \   00006A                ; Setup parameters for call to function zclSampleSensorEnviroment_ProcessInDiscCmdsRspCmd
   \   00006A   12....       LCALL     ??zclSampleSensorEnviroment_ProcessInDiscCmdsRs; Banked call to: zclSampleSensorEnviroment_ProcessInDiscCmdsRspCmd
    519                break;
   \   00006D   8024         SJMP      ??zclSampleSensorEnviroment_ProcessIncomingMsg_8
    520          
    521              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    522                zclSampleSensorEnviroment_ProcessInDiscAttrsRspCmd( pInMsg );
   \                     ??zclSampleSensorEnviroment_ProcessIncomingMsg_5:
   \   00006F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000072   8882         MOV       DPL,R0
   \   000074   8983         MOV       DPH,R1
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   FB           MOV       R3,A
   \   000079   EA           MOV       A,R2
   \   00007A   C3           CLR       C
   \   00007B   9B           SUBB      A,R3
   \   00007C   5015         JNC       ??zclSampleSensorEnviroment_ProcessIncomingMsg_8
   \   00007E   0A           INC       R2
   \   00007F   80F1         SJMP      ??CrossCallReturnLabel_49
    523                break;
    524          
    525              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    526                zclSampleSensorEnviroment_ProcessInDiscAttrsExtRspCmd( pInMsg );
   \                     ??zclSampleSensorEnviroment_ProcessIncomingMsg_7:
   \   000081   12....       LCALL     ?Subroutine18 & 0xFFFF
    527                break;
    528          #endif
    529              default:
    530                break;
    531            }
   \                     ??CrossCallReturnLabel_50:
   \   000084   8001         SJMP      ??zclSampleSensorEnviroment_ProcessIncomingMsg_9
   \                     ??zclSampleSensorEnviroment_ProcessIncomingMsg_10:
   \   000086   0A           INC       R2
   \                     ??zclSampleSensorEnviroment_ProcessIncomingMsg_9:
   \   000087   8882         MOV       DPL,R0
   \   000089   8983         MOV       DPH,R1
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   FB           MOV       R3,A
   \   00008E   EA           MOV       A,R2
   \   00008F   C3           CLR       C
   \   000090   9B           SUBB      A,R3
   \   000091   40F3         JC        ??zclSampleSensorEnviroment_ProcessIncomingMsg_10
    532          
    533            if ( pInMsg->attrCmd )
   \                     ??zclSampleSensorEnviroment_ProcessIncomingMsg_8:
   \   000093   8E82         MOV       DPL,R6
   \   000095   8F83         MOV       DPH,R7
   \   000097   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00009A   EA           MOV       A,R2
   \   00009B   4B           ORL       A,R3
   \   00009C   6003         JZ        ??zclSampleSensorEnviroment_ProcessIncomingMsg_11
    534            {
    535              osal_mem_free( pInMsg->attrCmd );
   \   00009E                ; Setup parameters for call to function osal_mem_free
   \   00009E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    536            }
    537          }
   \                     ??zclSampleSensorEnviroment_ProcessIncomingMsg_11:
   \   0000A1   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000007   8882         MOV       DPL,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   7800         MOV       R0,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004                REQUIRE ??Subroutine41_0
   \   000004                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   7A00         MOV       R2,#0x0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    538          
    539          #ifdef ZCL_READ
    540          /*********************************************************************
    541           * @fn      zclSampleSensorEnviroment_ProcessInReadRspCmd
    542           *
    543           * @brief   Process the "Profile" Read Response Command
    544           *
    545           * @param   pInMsg - incoming message to process
    546           *
    547           * @return  none
    548           */
    549          static uint8 zclSampleSensorEnviroment_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    550          {
    551            zclReadRspCmd_t *readRspCmd;
    552            uint8 i;
    553          
    554            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    555            for ( i = 0; i < readRspCmd->numAttr; i++ )
    556            {
    557              // Notify the originator of the results of the original read attributes
    558              // attempt and, for each successfull request, the value of the requested
    559              // attribute
    560            }
    561          
    562            return ( TRUE );
    563          }
    564          #endif // ZCL_READ
    565          
    566          #ifdef ZCL_WRITE
    567          /*********************************************************************
    568           * @fn      zclSampleSensorEnviroment_ProcessInWriteRspCmd
    569           *
    570           * @brief   Process the "Profile" Write Response Command
    571           *
    572           * @param   pInMsg - incoming message to process
    573           *
    574           * @return  none
    575           */
    576          static uint8 zclSampleSensorEnviroment_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    577          {
    578            zclWriteRspCmd_t *writeRspCmd;
    579            uint8 i;
    580          
    581            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    582            for ( i = 0; i < writeRspCmd->numAttr; i++ )
    583            {
    584              // Notify the device of the results of the its original write attributes
    585              // command.
    586            }
    587          
    588            return ( TRUE );
    589          }
    590          #endif // ZCL_WRITE
    591          
    592          /*********************************************************************
    593           * @fn      zclSampleSensorEnviroment_ProcessInDefaultRspCmd
    594           *
    595           * @brief   Process the "Profile" Default Response Command
    596           *
    597           * @param   pInMsg - incoming message to process
    598           *
    599           * @return  none
    600           */
    601          static uint8 zclSampleSensorEnviroment_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    602          {
    603            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    604          
    605            // Device is notified of the Default Response command.
    606            (void)pInMsg;
    607          
    608            return ( TRUE );
    609          }
    610          
    611          #ifdef ZCL_DISCOVER
    612          /*********************************************************************
    613           * @fn      zclSampleSensorEnviroment_ProcessInDiscCmdsRspCmd
    614           *
    615           * @brief   Process the Discover Commands Response Command
    616           *
    617           * @param   pInMsg - incoming message to process
    618           *
    619           * @return  none
    620           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    621          static uint8 zclSampleSensorEnviroment_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSensorEnviroment_ProcessInDiscCmdsRspCmd:
    622          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    623            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
    624            uint8 i;
    625          
    626            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   \   000004   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000007   12....       LCALL     ??Subroutine41_0 & 0xFFFF
    627            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_48:
   \   00000A   8001         SJMP      ??zclSampleSensorEnviroment_ProcessInDiscCmdsRs_1
   \                     ??zclSampleSensorEnviroment_ProcessInDiscCmdsRs_2:
   \   00000C   0A           INC       R2
   \                     ??zclSampleSensorEnviroment_ProcessInDiscCmdsRs_1:
   \   00000D   8882         MOV       DPL,R0
   \   00000F   8983         MOV       DPH,R1
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FB           MOV       R3,A
   \   000015   EA           MOV       A,R2
   \   000016   C3           CLR       C
   \   000017   9B           SUBB      A,R3
   \   000018   40F2         JC        ??zclSampleSensorEnviroment_ProcessInDiscCmdsRs_2
    628            {
    629              // Device is notified of the result of its attribute discovery command.
    630            }
    631          
    632            return ( TRUE );
   \   00001A   7901         MOV       R1,#0x1
   \   00001C   02....       LJMP      ?Subroutine1 & 0xFFFF
    633          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   EA           MOV       A,R2
   \   000001   2417         ADD       A,#0x17
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET
    634          
    635          /*********************************************************************
    636           * @fn      zclSampleSensorEnviroment_ProcessInDiscAttrsRspCmd
    637           *
    638           * @brief   Process the "Profile" Discover Attributes Response Command
    639           *
    640           * @param   pInMsg - incoming message to process
    641           *
    642           * @return  none
    643           */
    644          static uint8 zclSampleSensorEnviroment_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
    645          {
    646            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
    647            uint8 i;
    648          
    649            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
    650            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    651            {
    652              // Device is notified of the result of its attribute discovery command.
    653            }
    654          
    655            return ( TRUE );
    656          }
    657          
    658          /*********************************************************************
    659           * @fn      zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd
    660           *
    661           * @brief   Process the "Profile" Discover Attributes Extended Response Command
    662           *
    663           * @param   pInMsg - incoming message to process
    664           *
    665           * @return  none
    666           */
    667          static uint8 zclSampleSensorEnviroment_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
    668          {
    669            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
    670            uint8 i;
    671          
    672            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
    673            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    674            {
    675              // Device is notified of the result of its attribute discovery command.
    676            }
    677          
    678            return ( TRUE );
    679          }
    680          #endif // ZCL_DISCOVER
    681          
    682          /*********************************************************************
    683           * @fn      zclSampleTemperatureSensor_HandleKeys
    684           *
    685           * @brief   Handles all key events for this device.
    686           *
    687           * @param   shift - true if in shift/alt.
    688           * @param   keys - bit field for key events. Valid entries:
    689           *                 HAL_KEY_SW_5
    690          *                 HAL_KEY_SW_4
    691          *                 HAL_KEY_SW_3
    692          *                 HAL_KEY_SW_2
    693          *                 HAL_KEY_SW_1
    694          *
    695          * @return  none
    696          */
    697          static void zclSampleSensorEnviroment_HandleKeys( byte shift, byte keys )
    698          {
    699            if ( keys & HAL_KEY_SW_1 )
    700            {
    701          
    702              
    703          //    ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    704          //                         SAMPLESENSORENVIROMENT_ENDPOINT_PIR,
    705          //                         ZCL_HA_PROFILE_ID,
    706          //                         ZCLSAMPLESENSORENVIROMENT_PIR_MAX_INCLUSTERS,
    707          //                         (cId_t *)zclSampleSensorEnviroment_Pir_InClusterList,
    708          //                         ZCLSAMPLESENSORENVIROMENT_PIR_MAX_OUTCLUSTERS,
    709          //                         (cId_t *)zclSampleSensorEnviroment_Pir_OutClusterList,
    710          //                         FALSE );
    711              
    712            }
    713          }
    714          
    715          static void zclSampleSensorEnviroment_UART_Init(void)
    716          {
    717            halUARTCfg_t uartConfig;
    718            
    719            // configure UART
    720            uartConfig.configured           = TRUE;
    721            uartConfig.baudRate             = HAL_UART_BR_38400;
    722            uartConfig.flowControl          = FALSE;
    723            uartConfig.flowControlThreshold = 48;
    724            uartConfig.rx.maxBufSize        = 75;
    725            uartConfig.tx.maxBufSize        = 7;
    726            uartConfig.idleTimeout          = 6;
    727            uartConfig.intEnable            = TRUE;
    728            uartConfig.callBackFunc         = uartEventApplicationCB;
    729            
    730            HalUARTOpen( HAL_UART_PORT_0, &uartConfig);
    731          }
    732          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine40_0
   \   000003                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    733          void uartEventApplicationCB(uint8 port, uint8 event)
   \                     uartEventApplicationCB:
    734          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
    735              int16 valueOfSensors[NUMBER_OF_SENSOR] = {0};
   \   00000C   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0}>`
   \   00000F   7401         MOV       A,#0x1
   \   000011   12....       LCALL     ?XSTACK_DISP102_8
   \   000014   740C         MOV       A,#0xc
   \   000016   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    736              int fieldIndex = 0;         // the current field being received
   \   000019   FE           MOV       R6,A
   \   00001A   FF           MOV       R7,A
    737          
    738              //osal_memset(valueOfSensors, 0, NUMBER_OF_SENSOR);
    739              
    740              if ( event & HAL_UART_RX_TIMEOUT)
   \   00001B   EA           MOV       A,R2
   \   00001C   A2E2         MOV       C,0xE0 /* A   */.2
   \   00001E   404D         JC        ??uartEventApplicationCB_0
    741              {
    742                while ( Hal_UART_RxBufLen(port) > 0 )
    743                {
    744                  uint8 ch;
    745                  HalUARTRead(port, &ch, 1);
    746                  if (ch >= '0' && ch <= '9')     // is this an ascii digit between 0 and 9 ?
    747                  {
    748                    //yes, accumulate the value
    749                    valueOfSensors[fieldIndex] = (valueOfSensors[fieldIndex] * 10) + (ch - '0');
    750                  }
    751                  else if (ch == ',')     // comma is our separator, so move on to the next field
    752                  {
    753                    if (fieldIndex < NUMBER_OF_SENSOR - 1)
    754                      fieldIndex++;       // increment field index
    755                  }
    756                  else
    757                  {
    758                    // any character not a digit or comma ends the acquisition of fields
    759                    // In this project, it's the newline character sent by the STM32 MCU
    760                    zclSampleSensorEnviroment_Light_MeasuredValue = valueOfSensors[INDEX_LIGHT] ;
    761                    zclSampleSensorEnviroment_Temperature_MeasuredValue = valueOfSensors[INDEX_TEMPERATURE];  
    762                    zclSampleSensorEnviroment_Humidity_MeasuredValue = valueOfSensors[INDEX_HUMIDITY];
    763                    zclSampleSensorEnviroment_Pir_Status = (uint8)valueOfSensors[INDEX_PIR];
    764                    zclSampleSensorEnviroment_TVOC_MeasuredValue = valueOfSensors[INDEX_TVOC];
    765                    zclSampleSensorEnviroment_CO2_MeasuredValue = valueOfSensors[INDEX_CO2];
    766          
    767                  }
    768                }
    769              }
    770          }
   \                     ??uartEventApplicationCB_1:
   \   000020   740D         MOV       A,#0xd
   \   000022   02....       LJMP      ?Subroutine2 & 0xFFFF
   \                     ??uartEventApplicationCB_2:
   \   000025   EE           MOV       A,R6
   \   000026   F8           MOV       R0,A
   \   000027   EF           MOV       A,R7
   \   000028   F9           MOV       R1,A
   \   000029   E8           MOV       A,R0
   \   00002A   28           ADD       A,R0
   \   00002B   F8           MOV       R0,A
   \   00002C   E9           MOV       A,R1
   \   00002D   33           RLC       A
   \   00002E   F9           MOV       R1,A
   \   00002F   7401         MOV       A,#0x1
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   E582         MOV       A,DPL
   \   000036   28           ADD       A,R0
   \   000037   F8           MOV       R0,A
   \   000038   E583         MOV       A,DPH
   \   00003A   39           ADDC      A,R1
   \   00003B   F9           MOV       R1,A
   \   00003C   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00003F   EA           MOV       A,R2
   \   000040   75F00A       MOV       B,#0xa
   \   000043   A4           MUL       AB
   \   000044   FA           MOV       R2,A
   \   000045   ACF0         MOV       R4,B
   \   000047   75F00A       MOV       B,#0xa
   \   00004A   EB           MOV       A,R3
   \   00004B   A4           MUL       AB
   \   00004C   2C           ADD       A,R4
   \   00004D   FB           MOV       R3,A
   \   00004E   85..82       MOV       DPL,?XSP + 0
   \   000051   85..83       MOV       DPH,?XSP + 1
   \   000054   E0           MOVX      A,@DPTR
   \   000055   FC           MOV       R4,A
   \   000056   EA           MOV       A,R2
   \   000057   2C           ADD       A,R4
   \   000058   FA           MOV       R2,A
   \   000059   E4           CLR       A
   \   00005A   3B           ADDC      A,R3
   \   00005B   FB           MOV       R3,A
   \   00005C   EA           MOV       A,R2
   \   00005D   24D0         ADD       A,#-0x30
   \   00005F   FA           MOV       R2,A
   \   000060   EB           MOV       A,R3
   \   000061   34FF         ADDC      A,#-0x1
   \   000063   FB           MOV       R3,A
   \   000064   8882         MOV       DPL,R0
   \   000066   8983         MOV       DPH,R1
   \   000068   EA           MOV       A,R2
   \   000069   F0           MOVX      @DPTR,A
   \   00006A   A3           INC       DPTR
   \   00006B   EB           MOV       A,R3
   \                     ??uartEventApplicationCB_3:
   \   00006C   F0           MOVX      @DPTR,A
   \                     ??uartEventApplicationCB_0:
   \   00006D                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   00006D   A9..         MOV       R1,?V1
   \   00006F   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000072   EA           MOV       A,R2
   \   000073   4B           ORL       A,R3
   \   000074   60AA         JZ        ??uartEventApplicationCB_1
   \   000076                ; Setup parameters for call to function HalUARTRead
   \   000076   7C01         MOV       R4,#0x1
   \   000078   7D00         MOV       R5,#0x0
   \   00007A   AA..         MOV       R2,?XSP + 0
   \   00007C   AB..         MOV       R3,?XSP + 1
   \   00007E   A9..         MOV       R1,?V1
   \   000080   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   000083   85..82       MOV       DPL,?XSP + 0
   \   000086   85..83       MOV       DPH,?XSP + 1
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   24D0         ADD       A,#-0x30
   \   00008C   C3           CLR       C
   \   00008D   940A         SUBB      A,#0xa
   \   00008F   4094         JC        ??uartEventApplicationCB_2
   \   000091   E0           MOVX      A,@DPTR
   \   000092   642C         XRL       A,#0x2c
   \   000094   7015         JNZ       ??uartEventApplicationCB_4
   \   000096   C3           CLR       C
   \   000097   EE           MOV       A,R6
   \   000098   9405         SUBB      A,#0x5
   \   00009A   EF           MOV       A,R7
   \   00009B   9400         SUBB      A,#0x0
   \   00009D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00009F   65D0         XRL       A,PSW
   \   0000A1   33           RLC       A
   \   0000A2   50C9         JNC       ??uartEventApplicationCB_0
   \   0000A4   0E           INC       R6
   \   0000A5   EE           MOV       A,R6
   \   0000A6   70C5         JNZ       ??uartEventApplicationCB_0
   \   0000A8   0F           INC       R7
   \   0000A9   80C2         SJMP      ??uartEventApplicationCB_0
   \                     ??uartEventApplicationCB_4:
   \   0000AB   7401         MOV       A,#0x1
   \   0000AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B0   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000B3   90....       MOV       DPTR,#zclSampleSensorEnviroment_Light_MeasuredValue
   \   0000B6   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000B9   7403         MOV       A,#0x3
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000C1   90....       MOV       DPTR,#zclSampleSensorEnviroment_Temperature_MeasuredValue
   \   0000C4   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000C7   7405         MOV       A,#0x5
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000CF   90....       MOV       DPTR,#zclSampleSensorEnviroment_Humidity_MeasuredValue
   \   0000D2   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000D5   7407         MOV       A,#0x7
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   90....       MOV       DPTR,#zclSampleSensorEnviroment_Pir_Status
   \   0000DE   F0           MOVX      @DPTR,A
   \   0000DF   7409         MOV       A,#0x9
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000E7   90....       MOV       DPTR,#zclSampleSensorEnviroment_TVOC_MeasuredValue
   \   0000EA   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000ED   740B         MOV       A,#0xb
   \   0000EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F2   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000F5   90....       MOV       DPTR,#zclSampleSensorEnviroment_CO2_MeasuredValue
   \   0000F8   E8           MOV       A,R0
   \   0000F9   F0           MOVX      @DPTR,A
   \   0000FA   A3           INC       DPTR
   \   0000FB   E9           MOV       A,R1
   \   0000FC   02....       LJMP      ??uartEventApplicationCB_3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   8882         MOV       DPL,R0
   \   000002   F583         MOV       DPH,A
   \   000004                REQUIRE ??Subroutine42_0
   \   000004                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    771          
    772          /*********************************************************************
    773          * @fn      zclSampleSensorEnviroment_CheckAndSendClusterAttrReport
    774          *
    775          * @brief   Check if there is a reportable attribute in all cluster is timeout to report
    776          *
    777          * @param   none
    778          *
    779          * @return  none
    780          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    781          static void zclSampleSensorEnviroment_CheckAndSendClusterAttrReport( uint8 endpoint, uint16 clusterId,
   \                     zclSampleSensorEnviroment_CheckAndSendClusterAttrReport:
    782                                                                               zclConfigReportRecsList *pConfigReportRecsList )
    783          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V4,R1
   \   00000C   8A..         MOV       ?V12,R2
   \   00000E   8B..         MOV       ?V13,R3
   \   000010   8C..         MOV       ?V8,R4
   \   000012   8D..         MOV       ?V9,R5
    784            uint8 numAttr = 0;
   \   000014   75..00       MOV       ?V0,#0x0
    785            uint8 x;
    786            uint16 len;
    787            zclReportCmd_t *pReportCmd;
    788            zclConfigReportRec_t *pConfigReportRec = NULL;
    789            zclAttrRec_t attrRec;
    790            
    791            for (x = 0; x < pConfigReportRecsList->numConfigReportRec; x++)
   \   000017   75..00       MOV       ?V1,#0x0
   \   00001A   8044         SJMP      ??zclSampleSensorEnviroment_CheckAndSendCluster_1
    792            {
    793              pConfigReportRec = &(pConfigReportRecsList->configReportRecs[x]);
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_2:
   \   00001C   E5..         MOV       A,?V1
   \   00001E   75F012       MOV       B,#0x12
   \   000021   A4           MUL       AB
   \   000022   F8           MOV       R0,A
   \   000023   A9F0         MOV       R1,B
   \   000025   8C82         MOV       DPL,R4
   \   000027   8D83         MOV       DPH,R5
   \   000029   12....       LCALL     ?Subroutine14 & 0xFFFF
    794              
    795              if (pConfigReportRec->clusterId == clusterId &&
    796                  pConfigReportRec->cfgReportRec.maxReportInt != 0xFFFF)
   \                     ??CrossCallReturnLabel_14:
   \   00002C   6A           XRL       A,R2
   \   00002D   7003         JNZ       ??zclSampleSensorEnviroment_CheckAndSendCluster_3
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6B           XRL       A,R3
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_3:
   \   000032   702A         JNZ       ??zclSampleSensorEnviroment_CheckAndSendCluster_4
   \   000034   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000037   7003         JNZ       ??zclSampleSensorEnviroment_CheckAndSendCluster_5
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F4           CPL       A
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_5:
   \   00003C   6020         JZ        ??zclSampleSensorEnviroment_CheckAndSendCluster_4
    797              {
    798                if (pConfigReportRec->timeup == 0xFFFF || pConfigReportRec->timeup == gTimeCounter)
   \   00003E   85..82       MOV       DPL,?V2
   \   000041   85..83       MOV       DPH,?V3
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000049   7003         JNZ       ??zclSampleSensorEnviroment_CheckAndSendCluster_6
   \   00004B   74FF         MOV       A,#-0x1
   \   00004D   69           XRL       A,R1
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_6:
   \   00004E   600C         JZ        ??zclSampleSensorEnviroment_CheckAndSendCluster_7
   \   000050   90....       MOV       DPTR,#gTimeCounter
   \   000053   E0           MOVX      A,@DPTR
   \   000054   68           XRL       A,R0
   \   000055   7003         JNZ       ??zclSampleSensorEnviroment_CheckAndSendCluster_8
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   69           XRL       A,R1
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_8:
   \   00005A   7002         JNZ       ??zclSampleSensorEnviroment_CheckAndSendCluster_4
    799                {
    800                  numAttr++;
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_7:
   \   00005C   05..         INC       ?V0
    801                }
    802              }
    803            }
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_4:
   \   00005E   05..         INC       ?V1
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_1:
   \   000060   8C82         MOV       DPL,R4
   \   000062   8D83         MOV       DPH,R5
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F8           MOV       R0,A
   \   000069   E5..         MOV       A,?V1
   \   00006B   C3           CLR       C
   \   00006C   98           SUBB      A,R0
   \   00006D   40AD         JC        ??zclSampleSensorEnviroment_CheckAndSendCluster_2
    804            
    805            if (numAttr != 0)
   \   00006F   E5..         MOV       A,?V0
   \   000071   601F         JZ        ??zclSampleSensorEnviroment_CheckAndSendCluster_9
    806            {
    807              // we need to send a report - allocate space for it
    808              len = sizeof(zclReportCmd_t) + (numAttr * sizeof(zclReport_t));
   \   000073   75F005       MOV       B,#0x5
   \   000076   A4           MUL       AB
   \   000077   A9F0         MOV       R1,B
   \   000079   2401         ADD       A,#0x1
   \   00007B   FE           MOV       R6,A
   \   00007C   E4           CLR       A
   \   00007D   39           ADDC      A,R1
   \   00007E   FF           MOV       R7,A
    809              pReportCmd = (zclReportCmd_t *)zcl_mem_alloc( len );
   \   00007F                ; Setup parameters for call to function osal_mem_alloc
   \   00007F   EE           MOV       A,R6
   \   000080   FA           MOV       R2,A
   \   000081   EF           MOV       A,R7
   \   000082   FB           MOV       R3,A
   \   000083   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000086   85..82       MOV       DPL,?XSP + 0
   \   000089   85..83       MOV       DPH,?XSP + 1
   \   00008C   12....       LCALL     ?Subroutine5 & 0xFFFF
    810              pReportCmd->numAttr = numAttr;
    811            }
   \                     ??CrossCallReturnLabel_0:
   \   00008F   E5..         MOV       A,?V0
   \   000091   F0           MOVX      @DPTR,A
    812            
    813            numAttr = 0;
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_9:
   \   000092   75..00       MOV       ?V0,#0x0
    814            
    815            for (x = 0; x < pConfigReportRecsList->numConfigReportRec; x++ )
   \   000095   75..00       MOV       ?V1,#0x0
   \   000098   8012         SJMP      ??zclSampleSensorEnviroment_CheckAndSendCluster_10
    816            {
    817              zclReport_t *reportRec;
    818              pConfigReportRec = &(pConfigReportRecsList->configReportRecs[x]);
    819              
    820              if (pConfigReportRec->clusterId == clusterId && pConfigReportRec->cfgReportRec.maxReportInt != 0xFFFF)      // need report
    821              {
    822                if (pConfigReportRec->timeup == 0xFFFF || pConfigReportRec->timeup == gTimeCounter)       //timeup to report
    823                {
    824                  // fill the record in *pReportCmd
    825                  reportRec = &(pReportCmd->attrList[numAttr]);
    826                  zcl_memset( reportRec, 0, sizeof(zclReport_t));
    827                  numAttr++;
    828                  zclFindAttrRec(endpoint, pConfigReportRec->clusterId, pConfigReportRec->cfgReportRec.attrID, &attrRec);
    829                  
    830                  reportRec->attrID = attrRec.attr.attrId;
    831                  reportRec->dataType = attrRec.attr.dataType;
    832                  reportRec->attrData = attrRec.attr.dataPtr;
    833                  
    834                  if (pConfigReportRec->cfgReportRec.minReportInt == 0)
    835                    pConfigReportRec->timeup = gTimeCounter + pConfigReportRec->cfgReportRec.maxReportInt;
    836                  else
    837                    pConfigReportRec->timeup = gTimeCounter + pConfigReportRec->cfgReportRec.minReportInt;
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_11:
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   28           ADD       A,R0
   \   00009C   F8           MOV       R0,A
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   39           ADDC      A,R1
   \   0000A0   F9           MOV       R1,A
   \   0000A1   85..82       MOV       DPL,?V14
   \   0000A4   85..83       MOV       DPH,?V15
   \   0000A7   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000AA   05..         INC       ?V1
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_10:
   \   0000AC   85..82       MOV       DPL,?V8
   \   0000AF   85..83       MOV       DPH,?V9
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   F8           MOV       R0,A
   \   0000B7   E5..         MOV       A,?V1
   \   0000B9   C3           CLR       C
   \   0000BA   98           SUBB      A,R0
   \   0000BB   4003         JC        $+5
   \   0000BD   02....       LJMP      ??zclSampleSensorEnviroment_CheckAndSendCluster_12 & 0xFFFF
   \   0000C0   E5..         MOV       A,?V1
   \   0000C2   75F012       MOV       B,#0x12
   \   0000C5   A4           MUL       AB
   \   0000C6   F8           MOV       R0,A
   \   0000C7   A9F0         MOV       R1,B
   \   0000C9   85..82       MOV       DPL,?V8
   \   0000CC   85..83       MOV       DPH,?V9
   \   0000CF   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000D2   65..         XRL       A,?V12
   \   0000D4   7004         JNZ       ??zclSampleSensorEnviroment_CheckAndSendCluster_13
   \   0000D6   A3           INC       DPTR
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   65..         XRL       A,?V13
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_13:
   \   0000DA   70CE         JNZ       ??CrossCallReturnLabel_87
   \   0000DC   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000DF   7003         JNZ       ??zclSampleSensorEnviroment_CheckAndSendCluster_14
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F4           CPL       A
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_14:
   \   0000E4   60C4         JZ        ??CrossCallReturnLabel_87
   \   0000E6   E5..         MOV       A,?V2
   \   0000E8   2402         ADD       A,#0x2
   \   0000EA   F5..         MOV       ?V14,A
   \   0000EC   E4           CLR       A
   \   0000ED   35..         ADDC      A,?V3
   \   0000EF   F5..         MOV       ?V15,A
   \   0000F1   85..82       MOV       DPL,?V14
   \   0000F4   F583         MOV       DPH,A
   \   0000F6   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000F9   7003         JNZ       ??zclSampleSensorEnviroment_CheckAndSendCluster_15
   \   0000FB   74FF         MOV       A,#-0x1
   \   0000FD   69           XRL       A,R1
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_15:
   \   0000FE   600C         JZ        ??zclSampleSensorEnviroment_CheckAndSendCluster_16
   \   000100   90....       MOV       DPTR,#gTimeCounter
   \   000103   E0           MOVX      A,@DPTR
   \   000104   68           XRL       A,R0
   \   000105   7003         JNZ       ??zclSampleSensorEnviroment_CheckAndSendCluster_17
   \   000107   A3           INC       DPTR
   \   000108   E0           MOVX      A,@DPTR
   \   000109   69           XRL       A,R1
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_17:
   \   00010A   709E         JNZ       ??CrossCallReturnLabel_87
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_16:
   \   00010C   E5..         MOV       A,?V0
   \   00010E   75F005       MOV       B,#0x5
   \   000111   A4           MUL       AB
   \   000112   F8           MOV       R0,A
   \   000113   A9F0         MOV       R1,B
   \   000115   85..82       MOV       DPL,?XSP + 0
   \   000118   85..83       MOV       DPH,?XSP + 1
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   28           ADD       A,R0
   \   00011D   FA           MOV       R2,A
   \   00011E   A3           INC       DPTR
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   39           ADDC      A,R1
   \   000121   8A82         MOV       DPL,R2
   \   000123   F583         MOV       DPH,A
   \   000125   A3           INC       DPTR
   \   000126   8582..       MOV       ?V6,DPL
   \   000129   8583..       MOV       ?V7,DPH
   \   00012C                ; Setup parameters for call to function osal_memset
   \   00012C   7C05         MOV       R4,#0x5
   \   00012E   7D00         MOV       R5,#0x0
   \   000130   7900         MOV       R1,#0x0
   \   000132   AA..         MOV       R2,?V6
   \   000134   AB..         MOV       R3,?V7
   \   000136   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   000139   05..         INC       ?V0
   \   00013B                ; Setup parameters for call to function zclFindAttrRec
   \   00013B   7402         MOV       A,#0x2
   \   00013D   12....       LCALL     ?XSTACK_DISP100_8
   \   000140   88..         MOV       ?V10,R0
   \   000142   89..         MOV       ?V11,R1
   \   000144   78..         MOV       R0,#?V10
   \   000146   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000149   85..82       MOV       DPL,?V2
   \   00014C   85..83       MOV       DPH,?V3
   \   00014F   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000152   85..82       MOV       DPL,?V2
   \   000155   85..83       MOV       DPH,?V3
   \   000158   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00015B   A9..         MOV       R1,?V4
   \   00015D   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000160   7402         MOV       A,#0x2
   \   000162   12....       LCALL     ?DEALLOC_XSTACK8
   \   000165   7404         MOV       A,#0x4
   \   000167   12....       LCALL     ?XSTACK_DISP0_8
   \   00016A   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00016D   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000170   7406         MOV       A,#0x6
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   E0           MOVX      A,@DPTR
   \   000176   85..82       MOV       DPL,?V6
   \   000179   85..83       MOV       DPH,?V7
   \   00017C   A3           INC       DPTR
   \   00017D   A3           INC       DPTR
   \   00017E   F0           MOVX      @DPTR,A
   \   00017F   7408         MOV       A,#0x8
   \   000181   12....       LCALL     ?XSTACK_DISP0_8
   \   000184   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000187   A3           INC       DPTR
   \   000188   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00018B   85..82       MOV       DPL,?V2
   \   00018E   85..83       MOV       DPH,?V3
   \   000191   A3           INC       DPTR
   \   000192   A3           INC       DPTR
   \   000193   A3           INC       DPTR
   \   000194   A3           INC       DPTR
   \   000195   A3           INC       DPTR
   \   000196   A3           INC       DPTR
   \   000197   A3           INC       DPTR
   \   000198   A3           INC       DPTR
   \   000199   A3           INC       DPTR
   \   00019A   A3           INC       DPTR
   \   00019B   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00019E   E8           MOV       A,R0
   \   00019F   49           ORL       A,R1
   \   0001A0   90....       MOV       DPTR,#gTimeCounter
   \   0001A3   6003         JZ        $+5
   \   0001A5   02....       LJMP      ??zclSampleSensorEnviroment_CheckAndSendCluster_11 & 0xFFFF
   \   0001A8   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    838                }
    839              }
    840            }
   \                     ??CrossCallReturnLabel_66:
   \   0001AB   E5..         MOV       A,?V2
   \   0001AD   240C         ADD       A,#0xc
   \   0001AF   F582         MOV       DPL,A
   \   0001B1   E4           CLR       A
   \   0001B2   35..         ADDC      A,?V3
   \   0001B4   F583         MOV       DPH,A
   \   0001B6   02....       LJMP      ??zclSampleSensorEnviroment_CheckAndSendCluster_11 & 0xFFFF
    841            
    842            if (numAttr != 0)
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_12:
   \   0001B9   E5..         MOV       A,?V0
   \   0001BB   7003         JNZ       $+5
   \   0001BD   02....       LJMP      ??zclSampleSensorEnviroment_CheckAndSendCluster_18 & 0xFFFF
    843            {
    844              SendZclAttrReport( endpoint, clusterId, pReportCmd, len);
   \   0001C0                ; Setup parameters for call to function osal_msg_allocate
   \   0001C0   EE           MOV       A,R6
   \   0001C1   2419         ADD       A,#0x19
   \   0001C3   FA           MOV       R2,A
   \   0001C4   E4           CLR       A
   \   0001C5   3400         ADDC      A,#0x0
   \   0001C7   FB           MOV       R3,A
   \   0001C8   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0001CB   EA           MOV       A,R2
   \   0001CC   4B           ORL       A,R3
   \   0001CD   6071         JZ        ??zclSampleSensorEnviroment_CheckAndSendCluster_18
   \   0001CF   8A82         MOV       DPL,R2
   \   0001D1   8B83         MOV       DPH,R3
   \   0001D3   7434         MOV       A,#0x34
   \   0001D5   F0           MOVX      @DPTR,A
   \   0001D6   A3           INC       DPTR
   \   0001D7   E4           CLR       A
   \   0001D8   12....       LCALL     ?Subroutine38 & 0xFFFF
    845            }
   \                     ??CrossCallReturnLabel_46:
   \   0001DB   F0           MOVX      @DPTR,A
   \   0001DC   A3           INC       DPTR
   \   0001DD   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0001E0   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0001E3   A3           INC       DPTR
   \   0001E4   740A         MOV       A,#0xa
   \   0001E6   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001E9   E5..         MOV       A,?V12
   \   0001EB   F0           MOVX      @DPTR,A
   \   0001EC   A3           INC       DPTR
   \   0001ED   E5..         MOV       A,?V13
   \   0001EF   F0           MOVX      @DPTR,A
   \   0001F0   EA           MOV       A,R2
   \   0001F1   2412         ADD       A,#0x12
   \   0001F3   F582         MOV       DPL,A
   \   0001F5   E4           CLR       A
   \   0001F6   3B           ADDC      A,R3
   \   0001F7   F583         MOV       DPH,A
   \   0001F9   7402         MOV       A,#0x2
   \   0001FB   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001FE   A3           INC       DPTR
   \   0001FF   A3           INC       DPTR
   \   000200   E4           CLR       A
   \   000201   F0           MOVX      @DPTR,A
   \   000202   A3           INC       DPTR
   \   000203   F0           MOVX      @DPTR,A
   \   000204   EA           MOV       A,R2
   \   000205   2414         ADD       A,#0x14
   \   000207   F582         MOV       DPL,A
   \   000209   E4           CLR       A
   \   00020A   3B           ADDC      A,R3
   \   00020B   F583         MOV       DPH,A
   \   00020D   E4           CLR       A
   \   00020E   F0           MOVX      @DPTR,A
   \   00020F   A3           INC       DPTR
   \   000210   F0           MOVX      @DPTR,A
   \   000211   EA           MOV       A,R2
   \   000212   2413         ADD       A,#0x13
   \   000214   F582         MOV       DPL,A
   \   000216   E4           CLR       A
   \   000217   3B           ADDC      A,R3
   \   000218   F583         MOV       DPH,A
   \   00021A   E5..         MOV       A,?V4
   \   00021C   F0           MOVX      @DPTR,A
   \   00021D   EA           MOV       A,R2
   \   00021E   2416         ADD       A,#0x16
   \   000220   F582         MOV       DPL,A
   \   000222   E4           CLR       A
   \   000223   3B           ADDC      A,R3
   \   000224   F583         MOV       DPH,A
   \   000226   E5..         MOV       A,?V4
   \   000228   F0           MOVX      @DPTR,A
   \   000229   85..82       MOV       DPL,?XSP + 0
   \   00022C   85..83       MOV       DPH,?XSP + 1
   \   00022F   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000232   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000235   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000238                ; Setup parameters for call to function osal_msg_send
   \   000238   90....       MOV       DPTR,#zclSampleSensorEnviroment_TaskID
   \   00023B   E0           MOVX      A,@DPTR
   \   00023C   F9           MOV       R1,A
   \   00023D   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    846          }
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster_18:
   \   000240                REQUIRE ?Subroutine3
   \   000240                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   740A         MOV       A,#0xa
   \   000002                REQUIRE ??Subroutine43_0
   \   000002                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F10         MOV       R7,#0x10
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E5..         MOV       A,?V2
   \   000002   240C         ADD       A,#0xc
   \   000004   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000007   F4           CPL       A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   74FF         MOV       A,#-0x1
   \   000005   68           XRL       A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007                REQUIRE ??Subroutine45_0
   \   000007                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   85..82       MOV       DPL,?V6
   \   000006   85..83       MOV       DPH,?V7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   28           ADD       A,R0
   \   000006   F5..         MOV       ?V2,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   39           ADDC      A,R1
   \   00000B   F5..         MOV       ?V3,A
   \   00000D   85..82       MOV       DPL,?V2
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine49_0
   \   000002                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000007   F583         MOV       DPH,A
   \   000009   8882         MOV       DPL,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V3
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine55_0
   \   000006                ; // Fall through to label ??Subroutine55_0
    847          
    848          /*********************************************************************
    849          * @fn      SendZclAttrReport
    850          *
    851          * @brief   Send the attr report. Let ZCL_CMD_REPORT event handler handle this
    852          *
    853          * @param   srcEp - source endpoint
    854          *          clusterID - cluster id
    855          *          pReportCmd - pointer to the report command packet
    856          *          dataLen - data length of the report command
    857          *
    858          * @return  none
    859          */
    860          static uint8 SendZclAttrReport(uint8 srcEp, uint16 clusterId, zclReportCmd_t *pReportCmd,
    861                                         uint8 datalen)
    862          {
    863            // this is for the inner-app osal msg, not OTA msg, thus some fields are not important
    864            zclIncomingMsg_t *pMsg;       
    865            
    866            // pMsg will be released by zclSampleSensorEnviroment_event_loop()
    867            pMsg = (zclIncomingMsg_t *)osal_msg_allocate(sizeof(zclIncomingMsg_t) + (datalen));
    868            
    869            if (pMsg == NULL)
    870            {
    871              return FALSE;
    872            }
    873            
    874            if (pMsg)
    875            {
    876                pMsg->hdr.event = ZCL_INCOMING_MSG;
    877                pMsg->hdr.status = 0;
    878                //pMsg->zclHdr.fc = NULL;         // not important
    879                pMsg->zclHdr.manuCode = 0;        // not important
    880                pMsg->zclHdr.transSeqNum = 0;     // not important
    881                pMsg->zclHdr.commandID = ZCL_CMD_REPORT;
    882                pMsg->clusterId = clusterId;
    883                pMsg->srcAddr.addrMode = (afAddrMode_t)Addr16Bit;
    884                pMsg->srcAddr.addr.shortAddr = 0; // not important
    885                pMsg->srcAddr.panId = 0;          // inner-PAN, not important
    886                pMsg->srcAddr.endPoint = srcEp;   // src ep, SAMPLELIGHT_ENDPOINT send to himself
    887                pMsg->endPoint = srcEp;           // dest ep, send to SAMPLELIGHT_ENDPOINT himself
    888                pMsg->attrCmd = (zclReportCmd_t *)pReportCmd;
    889            }
    890            
    891            osal_msg_send( zclSampleSensorEnviroment_TaskID, (uint8 *)pMsg);
    892            return TRUE;
    893          }
    894          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    895          void zclSampleSensorEnviroment_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSensorEnviroment_ProcessInReportCmd:
    896          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    897            zclReportCmd_t *pReportCmd;                           // numAttr, attrList[] : (zclReport_t) attrID, dataType, *attrData
    898            pReportCmd = (zclReportCmd_t *)pInMsg->attrCmd;       // *pReportCmd will be free by handle
   \   00000A   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F5..         MOV       ?V0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V1,A
    899            afAddrType_t dstAddr;
    900            
    901            dstAddr.addr.shortAddr = 0x0000;
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   E4           CLR       A
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
    902            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00001E   7408         MOV       A,#0x8
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   7402         MOV       A,#0x2
   \   000025   F0           MOVX      @DPTR,A
    903            switch ( pInMsg->clusterId )
   \   000026   EA           MOV       A,R2
   \   000027   2408         ADD       A,#0x8
   \   000029   F8           MOV       R0,A
   \   00002A   E4           CLR       A
   \   00002B   3B           ADDC      A,R3
   \   00002C   F9           MOV       R1,A
   \   00002D   E8           MOV       A,R0
   \   00002E   FA           MOV       R2,A
   \   00002F   E9           MOV       A,R1
   \   000030   8882         MOV       DPL,R0
   \   000032   F583         MOV       DPH,A
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F5..         MOV       ?V2,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F5..         MOV       ?V3,A
   \   00003B   78..         MOV       R0,#?V2
   \   00003D   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zclSampleSensorEnviroment_Proc_0`:
   \   000040   0000         DW        0
   \   000042   0600         DW        6
   \   000044   0004         DW        1024
   \   000046   ....         DW        ??zclSampleSensorEnviroment_ProcessInReportCmd_0
   \   000048   0204         DW        1026
   \   00004A   ....         DW        ??zclSampleSensorEnviroment_ProcessInReportCmd_1
   \   00004C   0504         DW        1029
   \   00004E   ....         DW        ??zclSampleSensorEnviroment_ProcessInReportCmd_2
   \   000050   0604         DW        1030
   \   000052   ....         DW        ??zclSampleSensorEnviroment_ProcessInReportCmd_3
   \   000054   000C         DW        3072
   \   000056   ....         DW        ??zclSampleSensorEnviroment_ProcessInReportCmd_4
   \   000058   010C         DW        3073
   \   00005A   ....         DW        ??zclSampleSensorEnviroment_ProcessInReportCmd_5
   \   00005C   ....         DW        ??zclSampleSensorEnviroment_ProcessInReportCmd_6
    904            {
    905            case ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT:
    906              dstAddr.endPoint = 1;
   \                     ??zclSampleSensorEnviroment_ProcessInReportCmd_0:
   \   00005E   7409         MOV       A,#0x9
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   7401         MOV       A,#0x1
   \   000065   802B         SJMP      ??zclSampleSensorEnviroment_ProcessInReportCmd_7
    907              break;
    908            case ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT:
    909              dstAddr.endPoint = 2;
   \                     ??zclSampleSensorEnviroment_ProcessInReportCmd_1:
   \   000067   7409         MOV       A,#0x9
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   7402         MOV       A,#0x2
   \   00006E   8022         SJMP      ??zclSampleSensorEnviroment_ProcessInReportCmd_7
    910              break;
    911            case ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY:
    912              dstAddr.endPoint = 3;
   \                     ??zclSampleSensorEnviroment_ProcessInReportCmd_2:
   \   000070   7409         MOV       A,#0x9
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   7403         MOV       A,#0x3
   \   000077   8019         SJMP      ??zclSampleSensorEnviroment_ProcessInReportCmd_7
    913              break;
    914            case ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING:
    915              dstAddr.endPoint = 4;
   \                     ??zclSampleSensorEnviroment_ProcessInReportCmd_3:
   \   000079   7409         MOV       A,#0x9
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   7404         MOV       A,#0x4
   \   000080   8010         SJMP      ??zclSampleSensorEnviroment_ProcessInReportCmd_7
    916              break;
    917            case ZCL_CLUSTER_ID_MS_TVOC_MEASUREMENT:
    918              dstAddr.endPoint = 6;
   \                     ??zclSampleSensorEnviroment_ProcessInReportCmd_4:
   \   000082   7409         MOV       A,#0x9
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   7406         MOV       A,#0x6
   \   000089   8007         SJMP      ??zclSampleSensorEnviroment_ProcessInReportCmd_7
    919              break;
    920            case ZCL_CLUSTER_ID_MS_CO2_MEASUREMENT:
    921              dstAddr.endPoint = 7;
   \                     ??zclSampleSensorEnviroment_ProcessInReportCmd_5:
   \   00008B   7409         MOV       A,#0x9
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   7407         MOV       A,#0x7
   \                     ??zclSampleSensorEnviroment_ProcessInReportCmd_7:
   \   000092   F0           MOVX      @DPTR,A
    922              break;
    923            default:
    924              break;
    925            }
    926            
    927            if( zcl_SendReportCmd( SAMPLESENSORENVIROMENT_ENDPOINT_MUXSENSOR, &dstAddr, pInMsg->clusterId, pReportCmd, ZCL_REPORT_RECEIVE, FALSE, NULL) != ZSuccess )
   \                     ??zclSampleSensorEnviroment_ProcessInReportCmd_6:
   \   000093                ; Setup parameters for call to function zcl_SendReportCmd
   \   000093   75..00       MOV       ?V2,#0x0
   \   000096   78..         MOV       R0,#?V2
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009B   78..         MOV       R0,#?V2
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   75..01       MOV       ?V2,#0x1
   \   0000A3   78..         MOV       R0,#?V2
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A8   78..         MOV       R0,#?V0
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AD   8A82         MOV       DPL,R2
   \   0000AF   8983         MOV       DPH,R1
   \   0000B1   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000B4   7405         MOV       A,#0x5
   \   0000B6   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B9   7908         MOV       R1,#0x8
   \   0000BB   12....       LCALL     `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   0000BE   7405         MOV       A,#0x5
   \   0000C0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C3   E9           MOV       A,R1
   \   0000C4   6002         JZ        ??zclSampleSensorEnviroment_ProcessInReportCmd_8
    928            {
    929              while(1);
   \                     ??zclSampleSensorEnviroment_ProcessInReportCmd_9:
   \   0000C6   80FE         SJMP      ??zclSampleSensorEnviroment_ProcessInReportCmd_9
    930            }  
    931          }
   \                     ??zclSampleSensorEnviroment_ProcessInReportCmd_8:
   \   0000C8   740C         MOV       A,#0xc
   \   0000CA   02....       LJMP      ?Subroutine2 & 0xFFFF
    932          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine44_0
   \   000001                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    933          static uint8 zclSampleSensorEnviroment_ProcessInConfigReportCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSensorEnviroment_ProcessInConfigReportCmd:
    934          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    935            zclCfgReportCmd_t *pCfgReportCmd;             // this is used to look up table
    936            zclCfgReportRspCmd_t *pCfgReportRspCmd;       // This is used to send responde message
    937            uint8 sendRsp = FALSE;                        // status of initialize dynamic memory for responde message
   \   00000E   C2..         CLR       ?VB.0
    938            uint16 len;
    939            uint8 j = 0;
   \   000010   75..00       MOV       ?V6,#0x0
    940            uint8 i;
    941            
    942            //1. Initialize message responde ( using structure zclCfgReportRspCmd_t )
    943            pCfgReportCmd = (zclCfgReportCmd_t *)pInMsg->attrCmd;
   \   000013   EA           MOV       A,R2
   \   000014   2417         ADD       A,#0x17
   \   000016   F582         MOV       DPL,A
   \   000018   E4           CLR       A
   \   000019   35..         ADDC      A,?V1
   \   00001B   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00001E   7402         MOV       A,#0x2
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   12....       LCALL     ??Subroutine49_0 & 0xFFFF
    944            
    945            if ( pInMsg->zclHdr.commandID == ZCL_CMD_CONFIG_REPORT )
   \                     ??CrossCallReturnLabel_90:
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   6406         XRL       A,#0x6
   \   000034   702F         JNZ       ??zclSampleSensorEnviroment_ProcessInConfigRepo_1
    946            {
    947              // We need to send a response back - allocate space for it
    948              len = sizeof( zclCfgReportRspCmd_t ) + (pCfgReportCmd->numAttr * sizeof( zclCfgReportStatus_t ));
    949              pCfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( len );
   \   000036                ; Setup parameters for call to function osal_mem_alloc
   \   000036   7402         MOV       A,#0x2
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00003E   F5..         MOV       ?V2,A
   \   000040   75..00       MOV       ?V3,#0x0
   \   000043   7402         MOV       A,#0x2
   \   000045   78..         MOV       R0,#?V2
   \   000047   12....       LCALL     ?S_SHL
   \   00004A   E5..         MOV       A,?V2
   \   00004C   2401         ADD       A,#0x1
   \   00004E   FA           MOV       R2,A
   \   00004F   E4           CLR       A
   \   000050   35..         ADDC      A,?V3
   \   000052   FB           MOV       R3,A
   \   000053   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000056   8A..         MOV       ?V2,R2
   \   000058   8B..         MOV       ?V3,R3
    950              
    951              if ( pCfgReportRspCmd == NULL )
   \   00005A   EA           MOV       A,R2
   \   00005B   4B           ORL       A,R3
   \   00005C   7005         JNZ       ??zclSampleSensorEnviroment_ProcessInConfigRepo_2
    952              {
    953                return FALSE;     // embedded return
   \   00005E   7900         MOV       R1,#0x0
   \   000060   02....       LJMP      ??zclSampleSensorEnviroment_ProcessInConfigRepo_3 & 0xFFFF
    954              }
    955              sendRsp = TRUE;     // sendRsp is active when we got correct commandID
   \                     ??zclSampleSensorEnviroment_ProcessInConfigRepo_2:
   \   000063   D2..         SETB      ?VB.0
    956            }
    957            
    958            for ( i = 0; i < pCfgReportCmd->numAttr; i++ )
   \                     ??zclSampleSensorEnviroment_ProcessInConfigRepo_1:
   \   000065   75..00       MOV       ?V7,#0x0
   \   000068   8026         SJMP      ??zclSampleSensorEnviroment_ProcessInConfigRepo_4
    959            {
    960              
    961              //2. Look up config. report record of the incomming message in table "config. Report Record List"
    962              zclConfigReportRec_t *pConfigReportRec = NULL;      // find the rec and store here
    963              zclAttrRec_t attrRec;
    964              
    965              zclCfgReportStatus_t *statusRec = &(pCfgReportRspCmd->attrList[i]);
    966              zcl_memset( statusRec, 0, sizeof( zclCfgReportStatus_t ));
    967              
    968              if ( zclFindConfigReportRec( pInMsg->endPoint, pInMsg->clusterId,
    969                                          pCfgReportCmd->attrList[i].attrID, &pConfigReportRec))
    970              {
    971                
    972                //3. Check "dataType" of variable to variable in incomming message
    973                uint8 status = ZCL_STATUS_SUCCESS;
    974                
    975                if (pCfgReportCmd->attrList[i].dataType != pConfigReportRec->cfgReportRec.dataType )
    976                {        
    977                  status = ZCL_STATUS_INVALID_DATA_TYPE;
    978                }
    979                else 
    980                {
    981                  
    982                  //4. Look up Attribute record of incomming message in tabel "attribute list"
    983                  if ( zclFindAttrRec( pInMsg->endPoint, pInMsg->clusterId,
    984                                      pCfgReportCmd->attrList[i].attrID, &attrRec))
    985                  {
    986                    //5. Check "dataType" of variable to variable in incomming message
    987                    if (pCfgReportCmd->attrList[i].dataType != attrRec.attr.dataType )
    988                    {
    989                      status = ZCL_STATUS_INVALID_DATA_TYPE;
    990                    }
    991                    else
    992                    {
    993                      //6. Check Access control type of each attribute in incomming message to attribute in table "attribute list"
    994                      if ( !zcl_AccessCtrlRead(attrRec.attr.accessControl))
    995                      {
    996                        status = ZCL_STATUS_WRITE_ONLY;
    997                      }
    998                    }
    999                  }
   1000                }
   1001                
   1002                //7. Write config. value into variable in table "config. report record list"
   1003                // If successful, store the record, and a CfgReportStatus record shall NOT be generated
   1004                if ( sendRsp && status != ZCL_STATUS_SUCCESS )
   1005                {
   1006                  //Attribute is write only or invalid data type - move on to the next record
   1007                  statusRec->status = status;
   1008                  statusRec->direction = pCfgReportCmd->attrList[i].direction;
   1009                  statusRec->attrID = pCfgReportCmd->attrList[i].attrID;
   1010                  j++;
   1011                }
   1012                else    // Success, set the config report rec
   1013                {
   1014                  pConfigReportRec->cfgReportRec.direction = pCfgReportCmd->attrList[i].direction;
   1015                  pConfigReportRec->cfgReportRec.minReportInt = pCfgReportCmd->attrList[i].minReportInt;
   1016                  pConfigReportRec->cfgReportRec.maxReportInt = pCfgReportCmd->attrList[i].maxReportInt;
   1017                  pConfigReportRec->cfgReportRec.timeoutPeriod = pCfgReportCmd->attrList[i].timeoutPeriod;
   1018                  pConfigReportRec->timeup = 0xFFFF;
   1019                }
   1020              }
   1021              else
   1022              {
   1023                //Attribute is not supported - move on to the next configReportRec record
   1024                if (sendRsp)
   \                     ??zclSampleSensorEnviroment_ProcessInConfigRepo_5:
   \   00006A   A2..         MOV       C,?VB.0
   \   00006C   5020         JNC       ??zclSampleSensorEnviroment_ProcessInConfigRepo_6
   1025                {
   1026                  statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   00006E   85..82       MOV       DPL,?V4
   \   000071   85..83       MOV       DPH,?V5
   \   000074   7486         MOV       A,#-0x7a
   \   000076   12....       LCALL     ?Subroutine7 & 0xFFFF
   1027                  statusRec->status = pCfgReportCmd->attrList[i].direction;
   \                     ??CrossCallReturnLabel_4:
   \   000079   F0           MOVX      @DPTR,A
   1028                  statusRec->attrID = pCfgReportCmd->attrList[i].attrID;
   \   00007A   85..82       MOV       DPL,?V8
   \   00007D   85..83       MOV       DPH,?V9
   \   000080   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000083   85..82       MOV       DPL,?V4
   \   000086   85..83       MOV       DPH,?V5
   \   000089   12....       LCALL     ?Subroutine8 & 0xFFFF
   1029                  j++;
   \                     ??CrossCallReturnLabel_93:
   \   00008C   05..         INC       ?V6
   1030                }
   1031              }
   \                     ??zclSampleSensorEnviroment_ProcessInConfigRepo_6:
   \   00008E   05..         INC       ?V7
   \                     ??zclSampleSensorEnviroment_ProcessInConfigRepo_4:
   \   000090   7402         MOV       A,#0x2
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000098   F8           MOV       R0,A
   \   000099   E5..         MOV       A,?V7
   \   00009B   C3           CLR       C
   \   00009C   98           SUBB      A,R0
   \   00009D   4003         JC        $+5
   \   00009F   02....       LJMP      ??zclSampleSensorEnviroment_ProcessInConfigRepo_7 & 0xFFFF
   \   0000A2   85..82       MOV       DPL,?XSP + 0
   \   0000A5   85..83       MOV       DPH,?XSP + 1
   \   0000A8   E4           CLR       A
   \   0000A9   F0           MOVX      @DPTR,A
   \   0000AA   A3           INC       DPTR
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   AE..         MOV       R6,?V7
   \   0000AE   8E..         MOV       ?V4,R6
   \   0000B0   F5..         MOV       ?V5,A
   \   0000B2   7402         MOV       A,#0x2
   \   0000B4   78..         MOV       R0,#?V4
   \   0000B6   12....       LCALL     ?S_SHL
   \   0000B9   E5..         MOV       A,?V2
   \   0000BB   25..         ADD       A,?V4
   \   0000BD   F582         MOV       DPL,A
   \   0000BF   E5..         MOV       A,?V3
   \   0000C1   35..         ADDC      A,?V5
   \   0000C3   F583         MOV       DPH,A
   \   0000C5   A3           INC       DPTR
   \   0000C6   8582..       MOV       ?V4,DPL
   \   0000C9   8583..       MOV       ?V5,DPH
   \   0000CC                ; Setup parameters for call to function osal_memset
   \   0000CC   7C04         MOV       R4,#0x4
   \   0000CE   7D00         MOV       R5,#0x0
   \   0000D0   7900         MOV       R1,#0x0
   \   0000D2   AA..         MOV       R2,?V4
   \   0000D4   AB..         MOV       R3,?V5
   \   0000D6   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000D9   EE           MOV       A,R6
   \   0000DA   75F00C       MOV       B,#0xc
   \   0000DD   A4           MUL       AB
   \   0000DE   FE           MOV       R6,A
   \   0000DF   AFF0         MOV       R7,B
   \   0000E1   7402         MOV       A,#0x2
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   2E           ADD       A,R6
   \   0000E8   FE           MOV       R6,A
   \   0000E9   A3           INC       DPTR
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   3F           ADDC      A,R7
   \   0000EC   FF           MOV       R7,A
   \   0000ED   8E82         MOV       DPL,R6
   \   0000EF   F583         MOV       DPH,A
   \   0000F1   A3           INC       DPTR
   \   0000F2   8582..       MOV       ?V12,DPL
   \   0000F5   8583..       MOV       ?V13,DPH
   \   0000F8   EE           MOV       A,R6
   \   0000F9   2402         ADD       A,#0x2
   \   0000FB   F5..         MOV       ?V8,A
   \   0000FD   E4           CLR       A
   \   0000FE   3F           ADDC      A,R7
   \   0000FF   F5..         MOV       ?V9,A
   \   000101                ; Setup parameters for call to function zclFindConfigReportRec
   \   000101   A8..         MOV       R0,?XSP + 0
   \   000103   A9..         MOV       R1,?XSP + 1
   \   000105   88..         MOV       ?V10,R0
   \   000107   89..         MOV       ?V11,R1
   \   000109   78..         MOV       R0,#?V10
   \   00010B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010E   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000111   12....       LCALL     `??zclFindConfigReportRec::?relay`; Banked call to: zclFindConfigReportRec
   \   000114   7402         MOV       A,#0x2
   \   000116   12....       LCALL     ?DEALLOC_XSTACK8
   \   000119   E9           MOV       A,R1
   \   00011A   7003         JNZ       $+5
   \   00011C   02....       LJMP      ??zclSampleSensorEnviroment_ProcessInConfigRepo_5 & 0xFFFF
   \   00011F   EE           MOV       A,R6
   \   000120   2404         ADD       A,#0x4
   \   000122   F5..         MOV       ?V14,A
   \   000124   E4           CLR       A
   \   000125   3F           ADDC      A,R7
   \   000126   F5..         MOV       ?V15,A
   \   000128   85..82       MOV       DPL,?V14
   \   00012B   F583         MOV       DPH,A
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   F9           MOV       R1,A
   \   00012F   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000132   C8           XCH       A,R0
   \   000133   2409         ADD       A,#0x9
   \   000135   F582         MOV       DPL,A
   \   000137   E4           CLR       A
   \   000138   38           ADDC      A,R0
   \   000139   F583         MOV       DPH,A
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   69           XRL       A,R1
   \   00013D   702D         JNZ       ??zclSampleSensorEnviroment_ProcessInConfigRepo_8
   \   00013F                ; Setup parameters for call to function zclFindAttrRec
   \   00013F   7404         MOV       A,#0x4
   \   000141   12....       LCALL     ?XSTACK_DISP100_8
   \   000144   88..         MOV       ?V10,R0
   \   000146   89..         MOV       ?V11,R1
   \   000148   78..         MOV       R0,#?V10
   \   00014A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014D   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000150   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000153   7402         MOV       A,#0x2
   \   000155   12....       LCALL     ?DEALLOC_XSTACK8
   \   000158   E9           MOV       A,R1
   \   000159   6032         JZ        ??zclSampleSensorEnviroment_ProcessInConfigRepo_9
   \   00015B   85..82       MOV       DPL,?V14
   \   00015E   85..83       MOV       DPH,?V15
   \   000161   E0           MOVX      A,@DPTR
   \   000162   F8           MOV       R0,A
   \   000163   7408         MOV       A,#0x8
   \   000165   12....       LCALL     ?XSTACK_DISP0_8
   \   000168   E0           MOVX      A,@DPTR
   \   000169   68           XRL       A,R0
   \   00016A   6004         JZ        ??zclSampleSensorEnviroment_ProcessInConfigRepo_10
   \                     ??zclSampleSensorEnviroment_ProcessInConfigRepo_8:
   \   00016C   748D         MOV       A,#-0x73
   \   00016E   800C         SJMP      ??zclSampleSensorEnviroment_ProcessInConfigRepo_11
   \                     ??zclSampleSensorEnviroment_ProcessInConfigRepo_10:
   \   000170   7409         MOV       A,#0x9
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   E0           MOVX      A,@DPTR
   \   000176   A2E0         MOV       C,0xE0 /* A   */.0
   \   000178   4013         JC        ??zclSampleSensorEnviroment_ProcessInConfigRepo_9
   \   00017A   748F         MOV       A,#-0x71
   \                     ??zclSampleSensorEnviroment_ProcessInConfigRepo_11:
   \   00017C   A2..         MOV       C,?VB.0
   \   00017E   500D         JNC       ??zclSampleSensorEnviroment_ProcessInConfigRepo_9
   \   000180   85..82       MOV       DPL,?V4
   \   000183   85..83       MOV       DPH,?V5
   \   000186   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000189   A3           INC       DPTR
   \   00018A   02....       LJMP      ??CrossCallReturnLabel_4 & 0xFFFF
   \                     ??zclSampleSensorEnviroment_ProcessInConfigRepo_9:
   \   00018D   85..82       MOV       DPL,?V12
   \   000190   85..83       MOV       DPH,?V13
   \   000193   E0           MOVX      A,@DPTR
   \   000194   C0E0         PUSH      A
   \   000196   12....       LCALL     ?Subroutine39 & 0xFFFF
   1032            }//for loop
   \                     ??CrossCallReturnLabel_115:
   \   000199   C8           XCH       A,R0
   \   00019A   2406         ADD       A,#0x6
   \   00019C   F582         MOV       DPL,A
   \   00019E   E4           CLR       A
   \   00019F   38           ADDC      A,R0
   \   0001A0   F583         MOV       DPH,A
   \   0001A2   D0E0         POP       A
   \   0001A4   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0001A7   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0001AA   240A         ADD       A,#0xa
   \   0001AC   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0001AF   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0001B2   240C         ADD       A,#0xc
   \   0001B4   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001B7   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0001BA   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0001BD   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0001C0   A3           INC       DPTR
   \   0001C1   A3           INC       DPTR
   \   0001C2   74FF         MOV       A,#-0x1
   \   0001C4   F0           MOVX      @DPTR,A
   \   0001C5   A3           INC       DPTR
   \   0001C6   F0           MOVX      @DPTR,A
   \   0001C7   02....       LJMP      ??zclSampleSensorEnviroment_ProcessInConfigRepo_6 & 0xFFFF
   1033            //8. Send respond message with function "zcl_SendConfigReportRspCmd"
   1034            if ( sendRsp )
   \                     ??zclSampleSensorEnviroment_ProcessInConfigRepo_7:
   \   0001CA   A2..         MOV       C,?VB.0
   \   0001CC   506B         JNC       ??zclSampleSensorEnviroment_ProcessInConfigRepo_12
   1035            {
   1036              pCfgReportRspCmd->numAttr = j;
   \   0001CE   85..82       MOV       DPL,?V2
   \   0001D1   85..83       MOV       DPH,?V3
   \   0001D4   E5..         MOV       A,?V6
   \   0001D6   F0           MOVX      @DPTR,A
   1037              if (pCfgReportRspCmd->numAttr == 0)
   \   0001D7   700B         JNZ       ??zclSampleSensorEnviroment_ProcessInConfigRepo_13
   1038              {
   1039                //Since all records were written successful, include a single status record
   1040                // in the response command with the status field set to SUCCESS and the
   1041                // attribute ID and direction fields omitted.
   1042                pCfgReportRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   0001D9   A3           INC       DPTR
   \   0001DA   E4           CLR       A
   \   0001DB   F0           MOVX      @DPTR,A
   1043                pCfgReportRspCmd->numAttr = 1;
   \   0001DC   85..82       MOV       DPL,?V2
   \   0001DF   85..83       MOV       DPH,?V3
   \   0001E2   04           INC       A
   \   0001E3   F0           MOVX      @DPTR,A
   1044              }
   1045              
   1046              zcl_SendConfigReportRspCmd(pInMsg->endPoint, &(pInMsg->srcAddr),
   1047                                         pInMsg->clusterId, pCfgReportRspCmd,
   1048                                         !pInMsg->zclHdr.fc.direction, TRUE,
   1049                                         pInMsg->zclHdr.transSeqNum );
   \                     ??zclSampleSensorEnviroment_ProcessInConfigRepo_13:
   \   0001E4                ; Setup parameters for call to function zcl_SendConfigReportRspCmd
   \   0001E4   85..82       MOV       DPL,?V0
   \   0001E7   85..83       MOV       DPH,?V1
   \   0001EA   A3           INC       DPTR
   \   0001EB   A3           INC       DPTR
   \   0001EC   A3           INC       DPTR
   \   0001ED   A3           INC       DPTR
   \   0001EE   A3           INC       DPTR
   \   0001EF   A3           INC       DPTR
   \   0001F0   E0           MOVX      A,@DPTR
   \   0001F1   F5..         MOV       ?V4,A
   \   0001F3   78..         MOV       R0,#?V4
   \   0001F5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001F8   75..01       MOV       ?V4,#0x1
   \   0001FB   78..         MOV       R0,#?V4
   \   0001FD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000200   85..82       MOV       DPL,?V0
   \   000203   85..83       MOV       DPH,?V1
   \   000206   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000209   F5..         MOV       ?V4,A
   \   00020B   78..         MOV       R0,#?V4
   \   00020D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000210   78..         MOV       R0,#?V2
   \   000212   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000215   85..82       MOV       DPL,?V0
   \   000218   85..83       MOV       DPH,?V1
   \   00021B   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00021E   E5..         MOV       A,?V0
   \   000220   240A         ADD       A,#0xa
   \   000222   FA           MOV       R2,A
   \   000223   E4           CLR       A
   \   000224   35..         ADDC      A,?V1
   \   000226   FB           MOV       R3,A
   \   000227   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00022A   12....       LCALL     `??zcl_SendConfigReportRspCmd::?relay`; Banked call to: zcl_SendConfigReportRspCmd
   \   00022D   7405         MOV       A,#0x5
   \   00022F   12....       LCALL     ?DEALLOC_XSTACK8
   1050              zcl_mem_free ( pCfgReportRspCmd );
   \   000232                ; Setup parameters for call to function osal_mem_free
   \   000232   AA..         MOV       R2,?V2
   \   000234   AB..         MOV       R3,?V3
   \   000236   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1051            }
   1052            
   1053            //9. When configured, check report config immediately with function "xxx_CheckReportConfig()"
   1054            // when configured, check report config immediately
   1055            zclSampleSensorEnviroment_CheckReportConfig();
   \                     ??zclSampleSensorEnviroment_ProcessInConfigRepo_12:
   \   000239                ; Setup parameters for call to function zclSampleSensorEnviroment_CheckReportConfig
   \   000239   12....       LCALL     `??zclSampleSensorEnviroment_CheckReportConfig::`; Banked call to: zclSampleSensorEnviroment_CheckReportConfig
   1056            // The SAMPLESENSORENVIROMENT_CHECK_REPORT_EVT will then be triggered again and again
   1057            // if we never received the ConfiReportCmd, the SAMPLESENSORENVIROMENT_CHECK_REPORT_EVT
   1058            // has no change to be triggered.
   1059            
   1060            // We think this makes sense, since there is no reason for your app to perform
   1061            // constantly report unless the app is configured to report.
   1062            // if your app just need to automatically report after bootup, you can trigger
   1063            // SAMPLESENSORENVIROMENT_CHECK_REPORT_EVT in zclXXX_Init().
   1064            return TRUE;
   \   00023C   7901         MOV       R1,#0x1
   \                     ??zclSampleSensorEnviroment_ProcessInConfigRepo_3:
   \   00023E   740C         MOV       A,#0xc
   \   000240   02....       LJMP      ??Subroutine43_0 & 0xFFFF
   1065          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine46_0
   \   000002                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine47_0
   \   000002                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000006   C8           XCH       A,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FC           MOV       R4,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FD           MOV       R5,A
   \   00000B   85..82       MOV       DPL,?V0
   \   00000E   85..83       MOV       DPH,?V1
   \   000011   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000014   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E5..         MOV       A,?V0
   \   000002   2416         ADD       A,#0x16
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008                REQUIRE ??Subroutine48_0
   \   000008                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V12
   \   000004   85..83       MOV       DPH,?V13
   \   000007   E0           MOVX      A,@DPTR
   \   000008   85..82       MOV       DPL,?V4
   \   00000B   85..83       MOV       DPH,?V5
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   EA           MOV       A,R2
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   EB           MOV       A,R3
   \   00000A   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   13           RRC       A
   \   000004   13           RRC       A
   \   000005   13           RRC       A
   \   000006   541F         ANL       A,#0x1f
   \   000008   6401         XRL       A,#0x1
   \   00000A   5401         ANL       A,#0x1
   \   00000C   22           RET
   1066          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1067          static uint8 zclSampleSensorEnviroment_ProcessInReadReportCfgCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSensorEnviroment_ProcessInReadReportCfgCmd:
   1068          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   1069          //1. Get zclReadReportCfgCmd_t from incomming message
   1070            zclReadReportCfgCmd_t *pReadReportCfgCmd; 
   1071            zclReadReportCfgRspCmd_t *pReadReportCfgRspCmd;
   1072            
   1073            uint8 sendRsp = FALSE;
   \   00000E   C2..         CLR       ?VB.0
   1074            uint16 len;
   1075            uint8 i;
   1076            
   1077            pReadReportCfgCmd = (zclReadReportCfgCmd_t *)pInMsg->attrCmd;
   \   000010   EA           MOV       A,R2
   \   000011   2417         ADD       A,#0x17
   \   000013   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000016   F5..         MOV       ?V8,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V9,A
   1078            
   1079          //2. Check command in message == ZCL_CMD_READ_REPORT_CFG and allocate memory for respond message
   1080            if (pInMsg->zclHdr.commandID == ZCL_CMD_READ_REPORT_CFG )
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   8B83         MOV       DPH,R3
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6408         XRL       A,#0x8
   \   00002A   7025         JNZ       ??zclSampleSensorEnviroment_ProcessInReadReport_1
   1081            {
   1082              // We need to send a response back - allocate for it
   1083              len = sizeof(zclReadReportCfgCmd_t) + (pReadReportCfgCmd->numAttr * sizeof(zclReportCfgRspRec_t));
   1084              pReadReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc(len);
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   85..82       MOV       DPL,?V8
   \   00002F   85..83       MOV       DPH,?V9
   \   000032   E0           MOVX      A,@DPTR
   \   000033   75F00D       MOV       B,#0xd
   \   000036   A4           MUL       AB
   \   000037   A9F0         MOV       R1,B
   \   000039   2401         ADD       A,#0x1
   \   00003B   FA           MOV       R2,A
   \   00003C   E4           CLR       A
   \   00003D   39           ADDC      A,R1
   \   00003E   FB           MOV       R3,A
   \   00003F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000042   8A..         MOV       ?V14,R2
   \   000044   8B..         MOV       ?V15,R3
   1085              
   1086              if ( pReadReportCfgRspCmd == NULL )
   \   000046   EA           MOV       A,R2
   \   000047   4B           ORL       A,R3
   \   000048   7005         JNZ       ??zclSampleSensorEnviroment_ProcessInReadReport_2
   1087              {
   1088                return FALSE;
   \   00004A   7900         MOV       R1,#0x0
   \   00004C   02....       LJMP      ??zclSampleSensorEnviroment_ProcessInReadReport_3 & 0xFFFF
   1089              }
   1090              sendRsp = TRUE;     // sendRsp is active when we got correct commandID
   \                     ??zclSampleSensorEnviroment_ProcessInReadReport_2:
   \   00004F   D2..         SETB      ?VB.0
   1091            }
   1092            
   1093          //3. Find config. report record in table "config. report record list"
   1094            for (i = 0; i < pReadReportCfgCmd->numAttr; i++)
   \                     ??zclSampleSensorEnviroment_ProcessInReadReport_1:
   \   000051   75..00       MOV       ?V4,#0x0
   \   000054   8045         SJMP      ??zclSampleSensorEnviroment_ProcessInReadReport_4
   1095            {
   1096              zclConfigReportRec_t *pConfigReportRec = NULL;       // find the rec and store here
   1097              zclReportCfgRspRec_t *pReportCfgRspRec = &(pReadReportCfgRspCmd->attrList[i]);
   1098              zclAttrRec_t attrRec;
   1099              
   1100              zcl_memset( pReportCfgRspRec, 0, sizeof( zclReportCfgRspRec_t ));
   1101              
   1102              if ( zclFindConfigReportRec (pInMsg->endPoint, pInMsg->clusterId,
   1103                                           pReadReportCfgCmd->attrList[i].attrID, &pConfigReportRec))
   1104              {
   1105          //4. If found configReportRec in table, write value to ReportCfgRspRec
   1106                if ( sendRsp )
   1107                {
   1108                   pReportCfgRspRec->status = ZCL_STATUS_SUCCESS;
   1109                      pReportCfgRspRec->direction = pConfigReportRec->cfgReportRec.direction;
   1110                      pReportCfgRspRec->attrID = pConfigReportRec->cfgReportRec.attrID;
   1111                      pReportCfgRspRec->dataType = pConfigReportRec->cfgReportRec.dataType;
   1112                      pReportCfgRspRec->minReportInt = pConfigReportRec->cfgReportRec.minReportInt;
   1113                      pReportCfgRspRec->maxReportInt = pConfigReportRec->cfgReportRec.maxReportInt;
   1114                      pReportCfgRspRec->timeoutPeriod = pConfigReportRec->cfgReportRec.timeoutPeriod;
   1115                      pReportCfgRspRec->reportableChange = pConfigReportRec->cfgReportRec.reportableChange;
   1116                }
   1117              }
   1118              else 
   1119              {
   1120          //5. If not found configReportRec, check if the attribute is an un-reportable or an un support one
   1121                uint8 status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclSampleSensorEnviroment_ProcessInReadReport_5:
   \   000056   7E86         MOV       R6,#-0x7a
   1122                
   1123                if ( zclFindAttrRec( pInMsg->endPoint, pInMsg->clusterId, pReadReportCfgCmd->attrList[i].attrID, &attrRec))
   \   000058                ; Setup parameters for call to function zclFindAttrRec
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?XSTACK_DISP100_8
   \   00005D   88..         MOV       ?V12,R0
   \   00005F   89..         MOV       ?V13,R1
   \   000061   78..         MOV       R0,#?V12
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000069   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   00006C   7402         MOV       A,#0x2
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000071   E9           MOV       A,R1
   \   000072   6002         JZ        ??zclSampleSensorEnviroment_ProcessInReadReport_6
   1124                {
   1125                  // if found the attr rec, it is there bu un-reportale
   1126                  status = ZCL_STATUS_UNREPORTABLE_ATTRIBUTE;
   \   000074   7E8C         MOV       R6,#-0x74
   1127                }
   1128                // Attribute is not supported - move on to the next configReportRec record
   1129                if ( sendRsp )
   \                     ??zclSampleSensorEnviroment_ProcessInReadReport_6:
   \   000076   A2..         MOV       C,?VB.0
   \   000078   501F         JNC       ??CrossCallReturnLabel_91
   1130                {
   1131                  pReportCfgRspRec->status = status;
   \   00007A   EE           MOV       A,R6
   \   00007B   85..82       MOV       DPL,?V0
   \   00007E   85..83       MOV       DPH,?V1
   \   000081   F0           MOVX      @DPTR,A
   1132                  pReportCfgRspRec->direction = pReadReportCfgCmd->attrList[i].direction;
   \   000082   85..82       MOV       DPL,?V10
   \   000085   85..83       MOV       DPH,?V11
   \   000088   A3           INC       DPTR
   \   000089   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00008C   F0           MOVX      @DPTR,A
   1133                  pReportCfgRspRec->attrID = pReadReportCfgCmd->attrList[i].attrID;
   \   00008D   85..82       MOV       DPL,?V6
   \   000090   85..83       MOV       DPH,?V7
   \   000093   12....       LCALL     ?Subroutine15 & 0xFFFF
   1134                }
   1135              }
   \                     ??CrossCallReturnLabel_16:
   \   000096   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000099   05..         INC       ?V4
   \                     ??zclSampleSensorEnviroment_ProcessInReadReport_4:
   \   00009B   85..82       MOV       DPL,?V8
   \   00009E   85..83       MOV       DPH,?V9
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F8           MOV       R0,A
   \   0000A3   E5..         MOV       A,?V4
   \   0000A5   C3           CLR       C
   \   0000A6   98           SUBB      A,R0
   \   0000A7   4003         JC        $+5
   \   0000A9   02....       LJMP      ??zclSampleSensorEnviroment_ProcessInReadReport_7 & 0xFFFF
   \   0000AC   85..82       MOV       DPL,?XSP + 0
   \   0000AF   85..83       MOV       DPH,?XSP + 1
   \   0000B2   E4           CLR       A
   \   0000B3   F0           MOVX      @DPTR,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   F0           MOVX      @DPTR,A
   \   0000B6   AE..         MOV       R6,?V4
   \   0000B8   EE           MOV       A,R6
   \   0000B9   75F00D       MOV       B,#0xd
   \   0000BC   A4           MUL       AB
   \   0000BD   F8           MOV       R0,A
   \   0000BE   A9F0         MOV       R1,B
   \   0000C0   E5..         MOV       A,?V14
   \   0000C2   28           ADD       A,R0
   \   0000C3   F582         MOV       DPL,A
   \   0000C5   E5..         MOV       A,?V15
   \   0000C7   39           ADDC      A,R1
   \   0000C8   F583         MOV       DPH,A
   \   0000CA   A3           INC       DPTR
   \   0000CB   8582..       MOV       ?V0,DPL
   \   0000CE   8583..       MOV       ?V1,DPH
   \   0000D1                ; Setup parameters for call to function osal_memset
   \   0000D1   7C0D         MOV       R4,#0xd
   \   0000D3   7D00         MOV       R5,#0x0
   \   0000D5   7900         MOV       R1,#0x0
   \   0000D7   AA..         MOV       R2,?V0
   \   0000D9   AB..         MOV       R3,?V1
   \   0000DB   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000DE   EE           MOV       A,R6
   \   0000DF   75F003       MOV       B,#0x3
   \   0000E2   A4           MUL       AB
   \   0000E3   FE           MOV       R6,A
   \   0000E4   AFF0         MOV       R7,B
   \   0000E6   E5..         MOV       A,?V8
   \   0000E8   2E           ADD       A,R6
   \   0000E9   F5..         MOV       ?V10,A
   \   0000EB   E5..         MOV       A,?V9
   \   0000ED   3F           ADDC      A,R7
   \   0000EE   F5..         MOV       ?V11,A
   \   0000F0   E5..         MOV       A,?V10
   \   0000F2   2402         ADD       A,#0x2
   \   0000F4   F5..         MOV       ?V6,A
   \   0000F6   E4           CLR       A
   \   0000F7   35..         ADDC      A,?V11
   \   0000F9   F5..         MOV       ?V7,A
   \   0000FB                ; Setup parameters for call to function zclFindConfigReportRec
   \   0000FB   A8..         MOV       R0,?XSP + 0
   \   0000FD   A9..         MOV       R1,?XSP + 1
   \   0000FF   88..         MOV       ?V12,R0
   \   000101   89..         MOV       ?V13,R1
   \   000103   78..         MOV       R0,#?V12
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000108   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00010B   12....       LCALL     `??zclFindConfigReportRec::?relay`; Banked call to: zclFindConfigReportRec
   \   00010E   7402         MOV       A,#0x2
   \   000110   12....       LCALL     ?DEALLOC_XSTACK8
   \   000113   E9           MOV       A,R1
   \   000114   7003         JNZ       $+5
   \   000116   02....       LJMP      ??zclSampleSensorEnviroment_ProcessInReadReport_5 & 0xFFFF
   \   000119   A2..         MOV       C,?VB.0
   \   00011B   4003         JC        $+5
   \   00011D   02....       LJMP      ??CrossCallReturnLabel_91 & 0xFFFF
   \   000120   85..82       MOV       DPL,?V0
   \   000123   85..83       MOV       DPH,?V1
   \   000126   E4           CLR       A
   \   000127   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   1136            } // for loop
   \                     ??CrossCallReturnLabel_105:
   \   00012A   2406         ADD       A,#0x6
   \   00012C   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00012F   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000132   2407         ADD       A,#0x7
   \   000134   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000137   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00013A   2409         ADD       A,#0x9
   \   00013C   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00013F   A3           INC       DPTR
   \   000140   A3           INC       DPTR
   \   000141   A3           INC       DPTR
   \   000142   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000145   240A         ADD       A,#0xa
   \   000147   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00014A   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00014D   240C         ADD       A,#0xc
   \   00014F   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000152   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000155   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000158   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00015B   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00015E   2410         ADD       A,#0x10
   \   000160   F582         MOV       DPL,A
   \   000162   E4           CLR       A
   \   000163   38           ADDC      A,R0
   \   000164   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000167   E5..         MOV       A,?V0
   \   000169   240B         ADD       A,#0xb
   \   00016B   F582         MOV       DPL,A
   \   00016D   E4           CLR       A
   \   00016E   35..         ADDC      A,?V1
   \   000170   F583         MOV       DPH,A
   \   000172   02....       LJMP      ??CrossCallReturnLabel_16 & 0xFFFF
   1137           
   1138          //6. Send cfg. respond message 
   1139            if (sendRsp)
   \                     ??zclSampleSensorEnviroment_ProcessInReadReport_7:
   \   000175   A2..         MOV       C,?VB.0
   \   000177   5058         JNC       ??zclSampleSensorEnviroment_ProcessInReadReport_8
   1140            {
   1141              pReadReportCfgCmd->numAttr = pReadReportCfgCmd->numAttr;
   \   000179   E8           MOV       A,R0
   \   00017A   F0           MOVX      @DPTR,A
   1142              
   1143              zcl_SendReadReportCfgRspCmd( pInMsg->endPoint, &(pInMsg->srcAddr), pInMsg->clusterId,
   1144                                           pReadReportCfgRspCmd, !pInMsg->zclHdr.fc.direction, true, pInMsg->zclHdr.transSeqNum);
   \   00017B                ; Setup parameters for call to function zcl_SendReadReportCfgRspCmd
   \   00017B   85..82       MOV       DPL,?V2
   \   00017E   85..83       MOV       DPH,?V3
   \   000181   A3           INC       DPTR
   \   000182   A3           INC       DPTR
   \   000183   A3           INC       DPTR
   \   000184   A3           INC       DPTR
   \   000185   A3           INC       DPTR
   \   000186   A3           INC       DPTR
   \   000187   E0           MOVX      A,@DPTR
   \   000188   F5..         MOV       ?V0,A
   \   00018A   78..         MOV       R0,#?V0
   \   00018C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00018F   75..01       MOV       ?V0,#0x1
   \   000192   78..         MOV       R0,#?V0
   \   000194   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000197   85..82       MOV       DPL,?V2
   \   00019A   85..83       MOV       DPH,?V3
   \   00019D   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0001A0   F5..         MOV       ?V0,A
   \   0001A2   78..         MOV       R0,#?V0
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A7   78..         MOV       R0,#?V14
   \   0001A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AC   85..82       MOV       DPL,?V2
   \   0001AF   85..83       MOV       DPH,?V3
   \   0001B2   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0001B5   E5..         MOV       A,?V2
   \   0001B7   240A         ADD       A,#0xa
   \   0001B9   FA           MOV       R2,A
   \   0001BA   E4           CLR       A
   \   0001BB   35..         ADDC      A,?V3
   \   0001BD   FB           MOV       R3,A
   \   0001BE   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0001C1   F9           MOV       R1,A
   \   0001C2   12....       LCALL     `??zcl_SendReadReportCfgRspCmd::?relay`; Banked call to: zcl_SendReadReportCfgRspCmd
   \   0001C5   7405         MOV       A,#0x5
   \   0001C7   12....       LCALL     ?DEALLOC_XSTACK8
   1145              zcl_mem_free( pReadReportCfgRspCmd );
   \   0001CA                ; Setup parameters for call to function osal_mem_free
   \   0001CA   AA..         MOV       R2,?V14
   \   0001CC   AB..         MOV       R3,?V15
   \   0001CE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1146            }
   1147            return TRUE;
   \                     ??zclSampleSensorEnviroment_ProcessInReadReport_8:
   \   0001D1   7901         MOV       R1,#0x1
   \                     ??zclSampleSensorEnviroment_ProcessInReadReport_3:
   \   0001D3   02....       LJMP      ?Subroutine3 & 0xFFFF
   1148          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E5..         MOV       A,?V2
   \   000002   2416         ADD       A,#0x16
   \   000004                REQUIRE ??Subroutine50_0
   \   000004                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine51_0
   \   000006                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   F9           MOV       R1,A
   \   000004   85..82       MOV       DPL,?V0
   \   000007   85..83       MOV       DPH,?V1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FC           MOV       R4,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FD           MOV       R5,A
   \   00000B   85..82       MOV       DPL,?V2
   \   00000E   85..83       MOV       DPH,?V3
   \   000011   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000014   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000017   F9           MOV       R1,A
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine52_0
   \   000002                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine53_0
   \   000003                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E8           MOV       A,R0
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   E9           MOV       A,R1
   \   000006                REQUIRE ??Subroutine54_0
   \   000006                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET
   1149          
   1150          
   1151          /*********************************************************************
   1152          * @fn      zclSampleSensorEnviroment_CheckReportConfig
   1153          *
   1154          * @brief   Check if there is a reportable attribute in all cluster is timeout to report
   1155          *
   1156          * @param   none
   1157          *
   1158          * @return  none
   1159          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1160          static void zclSampleSensorEnviroment_CheckReportConfig(void)
   \                     zclSampleSensorEnviroment_CheckReportConfig:
   1161          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   1162            uint8 x, y;
   1163            uint8 stopChecking = TRUE;
   \   000005   75..01       MOV       ?V4,#0x1
   1164            
   1165            // Fill the "config. report rec list" for this endpoint
   1166            zclConfigReportRecsList *pConfigReportRecsList = zclFindConfigReportRecsList( SAMPLESENSORENVIROMENT_ENDPOINT_MUXSENSOR );
   \   000008                ; Setup parameters for call to function zclFindConfigReportRecsList
   \   000008   7908         MOV       R1,#0x8
   \   00000A   12....       LCALL     `??zclFindConfigReportRecsList::?relay`; Banked call to: zclFindConfigReportRecsList
   \   00000D   8A..         MOV       ?V0,R2
   \   00000F   8B..         MOV       ?V1,R3
   1167            
   1168            if ( pConfigReportRecsList != NULL )
   \   000011   EA           MOV       A,R2
   \   000012   4B           ORL       A,R3
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??zclSampleSensorEnviroment_CheckReportConfig_0 & 0xFFFF
   1169            {
   1170              /* This piece of code will classify each luster in the list of endpoint, then send report
   1171               * command coressponding cluster 
   1172               */
   1173              for ( x = 0; x < pConfigReportRecsList->numConfigReportRec; x++)
   \   000018   75..00       MOV       ?V5,#0x0
   \   00001B   EA           MOV       A,R2
   \   00001C   2404         ADD       A,#0x4
   \   00001E   F5..         MOV       ?V2,A
   \   000020   E4           CLR       A
   \   000021   35..         ADDC      A,?V1
   \   000023   F5..         MOV       ?V3,A
   \   000025   8076         SJMP      ??zclSampleSensorEnviroment_CheckReportConfig_1
   1174              {
   1175                uint8 cIDuplicate = 0;
   1176                
   1177                for (y = 0; y < x; y++)
   1178                {
   1179                  if ( pConfigReportRecsList->configReportRecs[x].clusterId == 
   1180                      pConfigReportRecsList->configReportRecs[y].clusterId)
   \                     ??zclSampleSensorEnviroment_CheckReportConfig_2:
   \   000027   E8           MOV       A,R0
   \   000028   2E           ADD       A,R6
   \   000029   F582         MOV       DPL,A
   \   00002B   E9           MOV       A,R1
   \   00002C   3F           ADDC      A,R7
   \   00002D   F583         MOV       DPH,A
   \   00002F   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000032   EB           MOV       A,R3
   \   000033   75F012       MOV       B,#0x12
   \   000036   A4           MUL       AB
   \   000037   F5..         MOV       ?V6,A
   \   000039   85F0..       MOV       ?V8,B
   \   00003C   E5..         MOV       A,?V8
   \   00003E   F5..         MOV       ?V7,A
   \   000040   E8           MOV       A,R0
   \   000041   25..         ADD       A,?V6
   \   000043   F582         MOV       DPL,A
   \   000045   E9           MOV       A,R1
   \   000046   35..         ADDC      A,?V7
   \   000048   F583         MOV       DPH,A
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   6C           XRL       A,R4
   \   00004C   7003         JNZ       ??zclSampleSensorEnviroment_CheckReportConfig_3
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   6D           XRL       A,R5
   \                     ??zclSampleSensorEnviroment_CheckReportConfig_3:
   \   000051   7002         JNZ       ??zclSampleSensorEnviroment_CheckReportConfig_4
   1181                  {
   1182                    cIDuplicate = 1;
   \   000053   7A01         MOV       R2,#0x1
   1183                  }
   1184                }
   \                     ??zclSampleSensorEnviroment_CheckReportConfig_4:
   \   000055   0B           INC       R3
   \                     ??zclSampleSensorEnviroment_CheckReportConfig_5:
   \   000056   EB           MOV       A,R3
   \   000057   C3           CLR       C
   \   000058   95..         SUBB      A,?V5
   \   00005A   40CB         JC        ??zclSampleSensorEnviroment_CheckReportConfig_2
   1185                
   1186                if (!cIDuplicate)
   \   00005C   EA           MOV       A,R2
   \   00005D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00005F   4018         JC        ??zclSampleSensorEnviroment_CheckReportConfig_6
   1187                {
   1188                  zclSampleSensorEnviroment_CheckAndSendClusterAttrReport( SAMPLESENSORENVIROMENT_ENDPOINT_MUXSENSOR, pConfigReportRecsList->configReportRecs[x].clusterId, pConfigReportRecsList);
   \   000061                ; Setup parameters for call to function zclSampleSensorEnviroment_CheckAndSendClusterAttrReport
   \   000061   AC..         MOV       R4,?V0
   \   000063   AD..         MOV       R5,?V1
   \   000065   85..82       MOV       DPL,?V2
   \   000068   85..83       MOV       DPH,?V3
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   2E           ADD       A,R6
   \   00006D   F8           MOV       R0,A
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   3F           ADDC      A,R7
   \   000071   12....       LCALL     ?Subroutine23 & 0xFFFF
   1189                }
   \                     ??CrossCallReturnLabel_54:
   \   000074   7908         MOV       R1,#0x8
   \   000076   12....       LCALL     ??zclSampleSensorEnviroment_CheckAndSendCluster; Banked call to: zclSampleSensorEnviroment_CheckAndSendClusterAttrReport
   1190                
   1191                if (pConfigReportRecsList->configReportRecs[x].cfgReportRec.maxReportInt != 0xFFFF)
   \                     ??zclSampleSensorEnviroment_CheckReportConfig_6:
   \   000079   85..82       MOV       DPL,?V2
   \   00007C   85..83       MOV       DPH,?V3
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   2E           ADD       A,R6
   \   000081   F8           MOV       R0,A
   \   000082   A3           INC       DPTR
   \   000083   E0           MOVX      A,@DPTR
   \   000084   3F           ADDC      A,R7
   \   000085   F9           MOV       R1,A
   \   000086   E8           MOV       A,R0
   \   000087   240C         ADD       A,#0xc
   \   000089   F582         MOV       DPL,A
   \   00008B   E4           CLR       A
   \   00008C   39           ADDC      A,R1
   \   00008D   F583         MOV       DPH,A
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   F4           CPL       A
   \   000091   7003         JNZ       ??zclSampleSensorEnviroment_CheckReportConfig_7
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F4           CPL       A
   \                     ??zclSampleSensorEnviroment_CheckReportConfig_7:
   \   000096   6003         JZ        ??zclSampleSensorEnviroment_CheckReportConfig_8
   1192                {
   1193                  stopChecking = FALSE;   // If there is any attribute setting to report, don't stop checking
   \   000098   75..00       MOV       ?V4,#0x0
   1194                }
   \                     ??zclSampleSensorEnviroment_CheckReportConfig_8:
   \   00009B   05..         INC       ?V5
   \                     ??zclSampleSensorEnviroment_CheckReportConfig_1:
   \   00009D   85..82       MOV       DPL,?V0
   \   0000A0   85..83       MOV       DPH,?V1
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   F8           MOV       R0,A
   \   0000A8   E5..         MOV       A,?V5
   \   0000AA   C3           CLR       C
   \   0000AB   98           SUBB      A,R0
   \   0000AC   5018         JNC       ??zclSampleSensorEnviroment_CheckReportConfig_0
   \   0000AE   7A00         MOV       R2,#0x0
   \   0000B0   7B00         MOV       R3,#0x0
   \   0000B2   E5..         MOV       A,?V5
   \   0000B4   75F012       MOV       B,#0x12
   \   0000B7   A4           MUL       AB
   \   0000B8   FE           MOV       R6,A
   \   0000B9   AFF0         MOV       R7,B
   \   0000BB   85..82       MOV       DPL,?V2
   \   0000BE   85..83       MOV       DPH,?V3
   \   0000C1   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   1195              }
   1196            }
   \                     ??CrossCallReturnLabel_69:
   \   0000C4   8090         SJMP      ??zclSampleSensorEnviroment_CheckReportConfig_5
   1197            
   1198            gTimeCounter++;         // time ticks every second for checking attr report
   \                     ??zclSampleSensorEnviroment_CheckReportConfig_0:
   \   0000C6   90....       MOV       DPTR,#gTimeCounter
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   2401         ADD       A,#0x1
   \   0000CC   F0           MOVX      @DPTR,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   3400         ADDC      A,#0x0
   \   0000D1   F0           MOVX      @DPTR,A
   1199            if (!stopChecking)
   \   0000D2   E5..         MOV       A,?V4
   \   0000D4   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000D6   4017         JC        ??zclSampleSensorEnviroment_CheckReportConfig_9
   1200            {
   1201                osal_start_timerEx( zclSampleSensorEnviroment_TaskID, SAMPLESENSORENVIROMENT_CHECK_REPORT__EVT, 1000); 
   \   0000D8                ; Setup parameters for call to function osal_start_timerEx
   \   0000D8   90....       MOV       DPTR,#__Constant_3e8
   \   0000DB   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000DE   7A04         MOV       R2,#0x4
   \   0000E0   7B00         MOV       R3,#0x0
   \   0000E2   90....       MOV       DPTR,#zclSampleSensorEnviroment_TaskID
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   F9           MOV       R1,A
   \   0000E7   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000EA   7404         MOV       A,#0x4
   \   0000EC   12....       LCALL     ?DEALLOC_XSTACK8
   1202            }
   1203          }
   \                     ??zclSampleSensorEnviroment_CheckReportConfig_9:
   \   0000EF   7F09         MOV       R7,#0x9
   \   0000F1   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSensorEnviroment_Nw`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleTemperatureSensor_Ep>`:
   \   000000   08           DB 8
   \   000001   00           DB 0
   \   000002   ....         DW zclSampleSensorEnviroment_TaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSensorEnviroment_Cm`:
   \   000000   ....         DW `??zclSampleSensorEnviroment_BasicResetCB::?rela`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSensorEnviroment_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSensorEnviroment_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleSensorEnviroment_ProcessCommissionin:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSensorEnviroment_ProcessCommissioningStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSensorEnviroment_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSensorEnviroment_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSensorEnviroment_BasicResetCB::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSensorEnviroment_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSensorEnviroment_BatteryWarningCB::?`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSensorEnviroment_BatteryWarningCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSensorEnviroment_ProcessIncomingMsg:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSensorEnviroment_ProcessIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleSensorEnviroment_ProcessInDiscCmdsRs:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSensorEnviroment_ProcessInDiscCmdsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uartEventApplicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartEventApplicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleSensorEnviroment_CheckAndSendCluster:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSensorEnviroment_CheckAndSendClusterAttrReport

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSensorEnviroment_ProcessInReportCmd:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSensorEnviroment_ProcessInReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleSensorEnviroment_ProcessInConfigRepo:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSensorEnviroment_ProcessInConfigReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleSensorEnviroment_ProcessInReadReport:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSensorEnviroment_ProcessInReadReportCfgCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSensorEnviroment_CheckReportConfig::`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSensorEnviroment_CheckReportConfig

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0}>`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
   1204          /****************************************************************************
   1205          ****************************************************************************/
   1206          
   1207          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     25   uartEventApplicationCB
        0     25   -> HalUARTRead
        0     25   -> Hal_UART_RxBufLen
      2      0   zclSampleSensorEnviroment_BasicResetCB
        2      0   -> zclSampleSensorEnviroment_ResetAttributesToDefaultValues
      0      0   zclSampleSensorEnviroment_BatteryWarningCB
      1     53   zclSampleSensorEnviroment_CheckAndSendClusterAttrReport
        0     34   -> osal_mem_alloc
        0     34   -> osal_memset
        0     34   -> osal_msg_allocate
        0     34   -> osal_msg_send
        0     36   -> zclFindAttrRec
      0     57   zclSampleSensorEnviroment_CheckReportConfig
        0     21   -> osal_start_timerEx
        0     17   -> zclFindConfigReportRecsList
        0     17   -> zclSampleSensorEnviroment_CheckAndSendClusterAttrReport
      0     38   zclSampleSensorEnviroment_Init
        0     38   -> HalUARTOpen
        0     38   -> RegisterForKeys
        0     38   -> RegisterVoltageWarningCB
        0     38   -> afRegister
        0     38   -> bdb_RegisterCommissioningStatusCB
        0     38   -> bdb_RegisterSimpleDescriptor
        0     38   -> bdb_StartCommissioning
        0     38   -> zclGeneral_RegisterCmdCallbacks
        0     38   -> zclSampleSensorEnviroment_ResetAttributesToDefaultValues
        0     38   -> zcl_registerAttrList
        0     38   -> zcl_registerConfigReportRecList
        0     38   -> zcl_registerForMsg
      2      4   zclSampleSensorEnviroment_ProcessCommissioningStatus
        2      0   -> HalLedBlink
        2      0   -> bdb_StartCommissioning
        2      4   -> osal_start_timerEx
        2      0   -> zclSampleSensorEnviroment_CheckReportConfig
      1     50   zclSampleSensorEnviroment_ProcessInConfigReportCmd
        0     36   -> osal_mem_alloc
        0     36   -> osal_mem_free
        0     36   -> osal_memset
        0     38   -> zclFindAttrRec
        0     38   -> zclFindConfigReportRec
        0     36   -> zclSampleSensorEnviroment_CheckReportConfig
        0     41   -> zcl_SendConfigReportRspCmd
      2      9   zclSampleSensorEnviroment_ProcessInDiscCmdsRspCmd
      1     48   zclSampleSensorEnviroment_ProcessInReadReportCfgCmd
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
        0     36   -> zclFindAttrRec
        0     36   -> zclFindConfigReportRec
        0     39   -> zcl_SendReadReportCfgRspCmd
      0     38   zclSampleSensorEnviroment_ProcessInReportCmd
        0     29   -> zcl_SendReportCmd
      0     21   zclSampleSensorEnviroment_ProcessIncomingMsg
        0      9   -> osal_mem_free
        0      9   -> zclSampleSensorEnviroment_ProcessInConfigReportCmd
        0      9   -> zclSampleSensorEnviroment_ProcessInDiscCmdsRspCmd
        0      9   -> zclSampleSensorEnviroment_ProcessInReadReportCfgCmd
        0      9   -> zclSampleSensorEnviroment_ProcessInReportCmd
      0     12   zclSampleSensorEnviroment_event_loop
        0     12   -> bdb_ZedAttemptRecoverNwk
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> zclSampleSensorEnviroment_CheckReportConfig
        0     12   -> zclSampleSensorEnviroment_ProcessIncomingMsg


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant {0, 0, 0, 0, 0, 0}>
       7  ?<Initializer for sampleTemperatureSensor_Ep>
      18  ?<Initializer for zclSampleSensorEnviroment_Cm
       1  ?<Initializer for zclSampleSensorEnviroment_Nw
       5  ??Subroutine40_0
       6  ??Subroutine41_0
       4  ??Subroutine42_0
       8  ??Subroutine43_0
       7  ??Subroutine44_0
       6  ??Subroutine45_0
       4  ??Subroutine46_0
       8  ??Subroutine47_0
       6  ??Subroutine48_0
       6  ??Subroutine49_0
       9  ??Subroutine50_0
       9  ??Subroutine51_0
       3  ??Subroutine52_0
       6  ??Subroutine53_0
       5  ??Subroutine54_0
       5  ??Subroutine55_0
       5  ?Subroutine0
       7  ?Subroutine1
       4  ?Subroutine10
      25  ?Subroutine11
      24  ?Subroutine12
       2  ?Subroutine13
      20  ?Subroutine14
       6  ?Subroutine15
      10  ?Subroutine16
       6  ?Subroutine17
       4  ?Subroutine18
      10  ?Subroutine19
       3  ?Subroutine2
       1  ?Subroutine20
      14  ?Subroutine21
      13  ?Subroutine22
       4  ?Subroutine23
       9  ?Subroutine24
       7  ?Subroutine25
       2  ?Subroutine26
      10  ?Subroutine27
       9  ?Subroutine28
       9  ?Subroutine29
       2  ?Subroutine3
       6  ?Subroutine30
       5  ?Subroutine31
       9  ?Subroutine32
      11  ?Subroutine33
       5  ?Subroutine34
       8  ?Subroutine35
       4  ?Subroutine36
      14  ?Subroutine37
      10  ?Subroutine38
       6  ?Subroutine39
       2  ?Subroutine4
      12  ?Subroutine5
      18  ?Subroutine6
      15  ?Subroutine7
       2  ?Subroutine8
       6  ?Subroutine9
       4  __Constant_3e8
       2  gTimeCounter
       7  sampleTemperatureSensor_Ep
     255  uartEventApplicationCB
       6  uartEventApplicationCB::?relay
       9  zclSampleSensorEnviroment_BasicResetCB
       6  zclSampleSensorEnviroment_BasicResetCB::?relay
       3  zclSampleSensorEnviroment_BatteryWarningCB
       6  zclSampleSensorEnviroment_BatteryWarningCB::?relay
     576  zclSampleSensorEnviroment_CheckAndSendClusterAttrReport
       6  zclSampleSensorEnviroment_CheckAndSendClusterAttrReport::?relay
     244  zclSampleSensorEnviroment_CheckReportConfig
       6  zclSampleSensorEnviroment_CheckReportConfig::?relay
      18  zclSampleSensorEnviroment_CmdCallbacks
     225  zclSampleSensorEnviroment_Init
       6  zclSampleSensorEnviroment_Init::?relay
       1  zclSampleSensorEnviroment_NwkState
      97  zclSampleSensorEnviroment_ProcessCommissioningStatus
       6  zclSampleSensorEnviroment_ProcessCommissioningStatus::?relay
     579  zclSampleSensorEnviroment_ProcessInConfigReportCmd
       6  zclSampleSensorEnviroment_ProcessInConfigReportCmd::?relay
      31  zclSampleSensorEnviroment_ProcessInDiscCmdsRspCmd
       6  zclSampleSensorEnviroment_ProcessInDiscCmdsRspCmd::?relay
     470  zclSampleSensorEnviroment_ProcessInReadReportCfgCmd
       6  zclSampleSensorEnviroment_ProcessInReadReportCfgCmd::?relay
     205  zclSampleSensorEnviroment_ProcessInReportCmd
       6  zclSampleSensorEnviroment_ProcessInReportCmd::?relay
     164  zclSampleSensorEnviroment_ProcessIncomingMsg
       6  zclSampleSensorEnviroment_ProcessIncomingMsg::?relay
       1  zclSampleSensorEnviroment_SeqNum
       1  zclSampleSensorEnviroment_TaskID
      12  zclSampleSensorEnviroment_dstAddr
      90  zclSampleSensorEnviroment_event_loop
       6  zclSampleSensorEnviroment_event_loop::?relay

 
 3 384 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
    26 bytes in segment XDATA_I
    26 bytes in segment XDATA_ID
    16 bytes in segment XDATA_ROM_C
    16 bytes in segment XDATA_Z
 
   104 bytes of CODE     memory
    12 bytes of CONST    memory (+ 4 bytes shared)
 3 384 bytes of HUGECODE memory
    42 bytes of XDATA    memory

Errors: none
Warnings: none
