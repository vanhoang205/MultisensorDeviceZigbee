###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               21/Jul/2020  15:36:27
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\Source\zcl_MultiSensor.c
#    Command line       =  
#        -f C:\Users\TS-577\AppData\Local\Temp\EW55D6.tmp
#        ("C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\Source\zcl_MultiSensor.c"
#        -D xBDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
#        NV_RESTORE -D ZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D xZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_GROUPS -D ZCL_REPORT -D ZCL_REPORTING_DEVICE -D
#        ZCL_TEMPERATURE_MEASUREMENT -lC "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000) -f
#        "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\Source\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\Source\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Japanese_JPN.932
#    List file          =  
#        C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\CoordinatorEB\List\zcl_MultiSensor.lst
#    Object file        =  
#        C:\Users\TS-577\Desktop\Zigbee
#        workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\CC2530DB\CoordinatorEB\Obj\zcl_MultiSensor.r51
#
###############################################################################

C:\Users\TS-577\Desktop\Zigbee workspace\MultiSensorDevice\Projects\zstack\HomeAutomation\MultiSensor\Source\zcl_MultiSensor.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampletemperaturesensor.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6            Description:    Zigbee Cluster Library - sample device application.
      7          
      8          
      9            Copyright 2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee Multi Sensor, based on Z-Stack 3.0.
     42          
     43            - MultiSensor Object includes 6 sensors:
     44                + Illuminance Sensor - Report to linux gateway after period time
     45                + Temperature Sensor - Report to linux gateway after change value with step 1 celcius
     46                + Humidity Sensor - Report to linux gateway after change value with step 1%RH
     47                + Occupancy Sensor - Report to linux gateway after change value
     48                + TVOC Sensor - Report to linux gateway after period time
     49                + Co2 Sensor - Report to linux gateway after period time
     50            - Multi sensor device act as end device with always power on 
     51            - Multi sensor device will receive date of sensors from stm32 with protocol follwed:
     52               |XXXX,YYYY,ZZZZ,DDDD,KKKK,LLLL\r\n| : format packet
     53          
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "ZComDef.h"
     60          #include "OSAL.h"
     61          #include "AF.h"
     62          #include "ZDApp.h"
     63          #include "ZDObject.h"
     64          #include "ZDProfile.h"
     65          
     66          #include "zcl.h"
     67          #include "zcl_general.h"
     68          #include "zcl_ha.h"
     69          #include "zcl_ms.h"
     70          
     71          #include "zcl_MultiSensor.h"
     72          
     73          #include "onboard.h"
     74          
     75          /* HAL */
     76          #include "hal_led.h"
     77          #include "hal_key.h"
     78          #include "hal_uart.h"
     79          
     80          #include "bdb_interface.h"
     81          #include "bdb_Reporting.h"
     82             
     83          /*********************************************************************
     84           * MACROS
     85           */
     86          
     87          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     88          
     89          /*********************************************************************
     90           * CONSTANTS
     91           */
     92          
     93          /*********************************************************************
     94           * TYPEDEFS
     95           */
     96          
     97          /*********************************************************************
     98           * GLOBAL VARIABLES
     99           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          byte zclMultiSensor_TaskID;
   \                     zclMultiSensor_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          afAddrType_t zclMultiSensor_dstAddr;
   \                     zclMultiSensor_dstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          devStates_t zclMultiSensor_NwkState = DEV_INIT;
   \                     zclMultiSensor_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclMultiSensor_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    103          extern int16 zdpExternalStateTaskID;
    104          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint16 gTimeCounter;
   \                     gTimeCounter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    106          /*********************************************************************
    107           * GLOBAL FUNCTIONS
    108           */
    109          
    110          /*********************************************************************
    111           * LOCAL VARIABLES
    112           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    113          static endPointDesc_t multiSensor_Ep =
   \                     multiSensor_Ep:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for multiSensor_Ep>`
   \   000007                REQUIRE __INIT_XDATA_I
    114          {
    115            MULTISENSOR_ENDPOINT,           
    116            0,
    117            &zclMultiSensor_TaskID,
    118            (SimpleDescriptionFormat_t *)NULL,        // No Simple description for this test endpoint
    119            (afNetworkLatencyReq_t)0                  // No Network Latency req
    120          };
    121          
    122          /*********************************************************************
    123           * LOCAL FUNCTIONS
    124           */
    125            
    126          // Functions to process other events relate to hardware
    127          static void zclMultiSensor_HandleKeys( byte shift, byte keys );
    128          static void zclMultiSensor_BasicResetCB( void );
    129          static void zclMultiSensor_BatteryWarningCB( uint8 voltLevel);
    130          
    131          // Function to process Commisioning
    132          static void zclMultiSensor_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg);
    133          
    134          // Functions to process ZCL Foundation incoming Command/Response messages
    135          static void zclMultiSensor_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    136          #ifdef ZCL_READ
    137          static uint8 zclMultiSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    138          #endif
    139          #ifdef ZCL_WRITE
    140          static uint8 zclMultiSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    141          #endif
    142          
    143          // Functions to process ZCL REPORT message
    144          static void zclMultiSensor_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
    145          static uint8 zclMultiSensor_ProcessInConfigReportCmd( zclIncomingMsg_t *pInMsg );
    146          static uint8 zclMultiSensor_ProcessInReadReportCfgCmd( zclIncomingMsg_t *pInMsg );
    147          static void zclMultiSensor_CheckReportConfig(void);
    148          static uint8 SendZclAttrReport(uint8 srcEp, uint16 clusterId, zclReportCmd_t *pReportCmd, uint8 datalen);
    149          static void zclMultiSensor_CheckAndSendClusterAttrReport( uint8 endpoint, uint16 clusterId,
    150                                                                    zclConfigReportRecsList *pConfigReportRecsList );
    151          
    152          static uint8 zclMultiSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    153          
    154          // Functions to process UART interface
    155          static void zclMultiSensor_UART_Init(void);
    156          void uartEventApplicationCB(uint8 port, uint8 event);
    157          
    158          
    159          
    160          
    161          /*********************************************************************
    162           * STATUS STRINGS
    163           */
    164          
    165          /*********************************************************************
    166           * CONSTANTS
    167           */
    168          
    169          /*********************************************************************
    170           * ZCL General Profile Callback table
    171           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    172          static zclGeneral_AppCallbacks_t zclMultiSensor_CmdCallbacks =
   \                     zclMultiSensor_CmdCallbacks:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zclMultiSensor_CmdCallbacks>`
   \   000012                REQUIRE __INIT_XDATA_I
    173          {
    174          // ************************************ Callback List of PIR Sensor Endpoint *********************************************/  
    175              zclMultiSensor_BasicResetCB,         // Basic Cluster Reset command
    176              NULL,                                           // Identify Trigger Effect command
    177              NULL,             				                      // On/Off cluster command
    178              NULL,                                           // On/Off cluster enhanced command Off with Effect
    179              NULL,                                           // On/Off cluster enhanced command On with Recall Global Scene
    180              NULL,                                           // On/Off cluster enhanced command On with Timed Off
    181            #ifdef ZCL_LEVEL_CTRL
    182              NULL,                                           // Level Control Move to Level command
    183              NULL,                                           // Level Control Move command
    184              NULL,                                           // Level Control Step command
    185              NULL,                                           // Level Control Stop command
    186            #endif
    187            #ifdef ZCL_GROUPS
    188              NULL,                                           // Group Response commands
    189            #endif
    190            #ifdef ZCL_SCENES
    191              NULL,                                           // Scene Store Request command
    192              NULL,                                           // Scene Recall Request command
    193              NULL,                                           // Scene Response command
    194            #endif
    195            #ifdef ZCL_ALARMS
    196              NULL,                                           // Alarm (Response) commands
    197            #endif
    198            #ifdef SE_UK_EXT
    199              NULL,                                           // Get Event Log command
    200              NULL,                                           // Publish Event Log command
    201            #endif
    202              NULL,                                           // RSSI Location command
    203              NULL                                            // RSSI Location Response command
    204          };
    205          
    206          
    207          /*********************************************************************
    208           * @fn          zclMultiSensor_Init
    209           *
    210           * @brief       Initialization function for the zclGeneral layer.
    211           *
    212           * @param       none
    213          *
    214          * @return      none
    215          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    216          void zclMultiSensor_Init( byte task_id )
   \                     zclMultiSensor_Init:
    217          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
    218            zclMultiSensor_TaskID = task_id;
   \   00000B   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   00000E   F0           MOVX      @DPTR,A
    219            
    220            // Set destination address of PIR Sensor to indirect
    221            zclMultiSensor_dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00000F   90....       MOV       DPTR,#zclMultiSensor_dstAddr + 8
   \   000012   7402         MOV       A,#0x2
   \   000014   F0           MOVX      @DPTR,A
    222            //zclMultiSensor_dstAddr.endPoint = COOR_ENDPOINT_PIR;
    223            zclMultiSensor_dstAddr.addr.shortAddr = 0x0000;                //Adress of coordinator
   \   000015   90....       MOV       DPTR,#zclMultiSensor_dstAddr
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
    224            
    225            // Register the Simple Descriptor for this application
    226            bdb_RegisterSimpleDescriptor( &zclMultiSensor_SimpleDesc );
   \   00001C                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   00001C   7A..         MOV       R2,#zclMultiSensor_SimpleDesc & 0xff
   \   00001E   7B..         MOV       R3,#(zclMultiSensor_SimpleDesc >> 8) & 0xff
   \   000020   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    227            
    228            // Register the ZCL General Cluster Library callback functions
    229            zclGeneral_RegisterCmdCallbacks( MULTISENSOR_ENDPOINT, &zclMultiSensor_CmdCallbacks );
   \   000023                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000023   7A..         MOV       R2,#zclMultiSensor_CmdCallbacks & 0xff
   \   000025   7B..         MOV       R3,#(zclMultiSensor_CmdCallbacks >> 8) & 0xff
   \   000027   7908         MOV       R1,#0x8
   \   000029   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    230          
    231          
    232            // Register the application's attribute list
    233            zclMultiSensor_ResetAttributesToDefaultValues();
   \   00002C                ; Setup parameters for call to function zclMultiSensor_ResetAttributesToDefaultValues
   \   00002C   12....       LCALL     ??zclMultiSensor_ResetAttributesToDefaultValues; Banked call to: zclMultiSensor_ResetAttributesToDefaultValues
    234            zcl_registerAttrList( MULTISENSOR_ENDPOINT, zclMultiSensor_NumAttributes, zclMultiSensor_Attrs );    
   \   00002F                ; Setup parameters for call to function zcl_registerAttrList
   \   00002F   7C..         MOV       R4,#zclMultiSensor_Attrs & 0xff
   \   000031   7D..         MOV       R5,#(zclMultiSensor_Attrs >> 8) & 0xff
   \   000033   90....       MOV       DPTR,#zclMultiSensor_NumAttributes
   \   000036   E4           CLR       A
   \   000037   93           MOVC      A,@A+DPTR
   \   000038   FA           MOV       R2,A
   \   000039   7908         MOV       R1,#0x8
   \   00003B   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    235            
    236            // Register the Application to receive the unprocessed Foundation command/response messages
    237            zcl_registerForMsg( zclMultiSensor_TaskID );
   \   00003E                ; Setup parameters for call to function zcl_registerForMsg
   \   00003E   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    238              
    239            // Register low voltage NV memory protection application callback
    240            RegisterVoltageWarningCB( zclMultiSensor_BatteryWarningCB );
   \   000046                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   000046   7A..         MOV       R2,#`??zclMultiSensor_BatteryWarningCB::?relay` & 0xff
   \   000048   7B..         MOV       R3,#(`??zclMultiSensor_BatteryWarningCB::?relay` >> 8) & 0xff
   \   00004A   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    241            
    242            // Register for all key events - This app will handle all key events
    243            RegisterForKeys( zclMultiSensor_TaskID );
   \   00004D                ; Setup parameters for call to function RegisterForKeys
   \   00004D   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   000050   E0           MOVX      A,@DPTR
   \   000051   F9           MOV       R1,A
   \   000052   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    244            
    245            zclMultiSensor_UART_Init();
   \   000055   85..82       MOV       DPL,?XSP + 0
   \   000058   85..83       MOV       DPH,?XSP + 1
   \   00005B   7401         MOV       A,#0x1
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   7402         MOV       A,#0x2
   \   000063   F0           MOVX      @DPTR,A
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   E4           CLR       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069   7403         MOV       A,#0x3
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   7430         MOV       A,#0x30
   \   000070   F0           MOVX      @DPTR,A
   \   000071   A3           INC       DPTR
   \   000072   E4           CLR       A
   \   000073   F0           MOVX      @DPTR,A
   \   000074   740A         MOV       A,#0xa
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   744B         MOV       A,#0x4b
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   A3           INC       DPTR
   \   00007D   E4           CLR       A
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   7412         MOV       A,#0x12
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   7407         MOV       A,#0x7
   \   000086   F0           MOVX      @DPTR,A
   \   000087   A3           INC       DPTR
   \   000088   E4           CLR       A
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   7405         MOV       A,#0x5
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   7406         MOV       A,#0x6
   \   000091   F0           MOVX      @DPTR,A
   \   000092   7416         MOV       A,#0x16
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   7401         MOV       A,#0x1
   \   000099   F0           MOVX      @DPTR,A
   \   00009A   741B         MOV       A,#0x1b
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   74..         MOV       A,#`??uartEventApplicationCB::?relay` & 0xff
   \   0000A1   F0           MOVX      @DPTR,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   74..         MOV       A,#(`??uartEventApplicationCB::?relay` >> 8) & 0xff
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6                ; Setup parameters for call to function HalUARTOpen
   \   0000A6   AA..         MOV       R2,?XSP + 0
   \   0000A8   AB..         MOV       R3,?XSP + 1
   \   0000AA   7900         MOV       R1,#0x0
   \   0000AC   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    246             
    247            // Register the application's config report record list
    248            zcl_registerConfigReportRecList( MULTISENSOR_ENDPOINT,
    249                                             zclMultiSensor_NumConfigReportRecs, zclMultiSensor_ConfigReportRecs );
   \   0000AF                ; Setup parameters for call to function zcl_registerConfigReportRecList
   \   0000AF   7C..         MOV       R4,#zclMultiSensor_ConfigReportRecs & 0xff
   \   0000B1   7D..         MOV       R5,#(zclMultiSensor_ConfigReportRecs >> 8) & 0xff
   \   0000B3   90....       MOV       DPTR,#zclMultiSensor_NumConfigReportRecs
   \   0000B6   E4           CLR       A
   \   0000B7   93           MOVC      A,@A+DPTR
   \   0000B8   FA           MOV       R2,A
   \   0000B9   7908         MOV       R1,#0x8
   \   0000BB   12....       LCALL     `??zcl_registerConfigReportRecList::?relay`; Banked call to: zcl_registerConfigReportRecList
    250           
    251            
    252            // Register commissioning status callback
    253            bdb_RegisterCommissioningStatusCB( zclMultiSensor_ProcessCommissioningStatus );
   \   0000BE                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   0000BE   7A..         MOV       R2,#`??zclMultiSensor_ProcessCommissioningStatus::?r` & 0xff
   \   0000C0   7B..         MOV       R3,#(`??zclMultiSensor_ProcessCommissioningStatus::?r` >> 8) & 0xff
   \   0000C2   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    254            
    255            //Register for Endpoints
    256            afRegister( &multiSensor_Ep );
   \   0000C5                ; Setup parameters for call to function afRegister
   \   0000C5   7A..         MOV       R2,#multiSensor_Ep & 0xff
   \   0000C7   7B..         MOV       R3,#(multiSensor_Ep >> 8) & 0xff
   \   0000C9   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    257          
    258            bdb_StartCommissioning( BDB_COMMISSIONING_MODE_NWK_STEERING);
   \   0000CC                ; Setup parameters for call to function bdb_StartCommissioning
   \   0000CC   7902         MOV       R1,#0x2
   \   0000CE   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    259            zdpExternalStateTaskID = zclMultiSensor_TaskID;
   \   0000D1   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   0000D8   F0           MOVX      @DPTR,A
   \   0000D9   A3           INC       DPTR
   \   0000DA   E4           CLR       A
   \   0000DB   F0           MOVX      @DPTR,A
    260            
    261          }
   \   0000DC   741D         MOV       A,#0x1d
   \   0000DE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E1   7F01         MOV       R7,#0x1
   \   0000E3   02....       LJMP      ?BANKED_LEAVE_XDATA
    262          
    263          
    264          
    265          /*********************************************************************
    266           * @fn      zclMultiSensor_LcdDisplayMainMode
    267           *
    268           * @brief   Called to display the main screen on the LCD.
    269           *
    270           * @param   none
    271           *
    272           * @return  none
    273           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    274          static void zclMultiSensor_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg)
   \                     zclMultiSensor_ProcessCommissioningStatus:
    275          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    276              switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   14           DEC       A
   \   00000B   6015         JZ        ??zclMultiSensor_ProcessCommissioningStatus_0
   \   00000D   14           DEC       A
   \   00000E   7029         JNZ       ??zclMultiSensor_ProcessCommissioningStatus_1
    277              {
    278                case BDB_COMMISSIONING_FORMATION:
    279                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   E0           MOVX      A,@DPTR
   \   000015   7022         JNZ       ??zclMultiSensor_ProcessCommissioningStatus_1
    280                  {
    281                    //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
    282                    bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000017                ; Setup parameters for call to function bdb_StartCommissioning
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   4402         ORL       A,#0x2
   \   00001C   F9           MOV       R1,A
   \   00001D   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \   000020   8017         SJMP      ??zclMultiSensor_ProcessCommissioningStatus_1
    283                  }
    284                  else
    285                  {
    286                    //Want to try other channels?
    287                    //try with bdb_setChannelAttribute
    288                  }
    289                break;
    290              case BDB_COMMISSIONING_NWK_STEERING:
    291                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \                     ??zclMultiSensor_ProcessCommissioningStatus_0:
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   E0           MOVX      A,@DPTR
   \   000027   7010         JNZ       ??zclMultiSensor_ProcessCommissioningStatus_1
    292                {
    293                  //YOUR JOB:
    294                  //We are on the nwk, what now?
    295                  HalLedBlink(HAL_LED_1, 6, 50, 200);
   \   000029                ; Setup parameters for call to function HalLedBlink
   \   000029   7CC8         MOV       R4,#-0x38
   \   00002B   7D00         MOV       R5,#0x0
   \   00002D   7B32         MOV       R3,#0x32
   \   00002F   7A06         MOV       R2,#0x6
   \   000031   7901         MOV       R1,#0x1
   \   000033   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    296                  zclMultiSensor_CheckReportConfig( );
   \   000036                ; Setup parameters for call to function zclMultiSensor_CheckReportConfig
   \   000036   12....       LCALL     `??zclMultiSensor_CheckReportConfig::?relay`; Banked call to: zclMultiSensor_CheckReportConfig
    297          
    298                }
    299                  else
    300                  {
    301                    //See the possible errors for nwk steering procedure
    302                    //No suitable networks found
    303                    //Want to try other channels?
    304                    //try with bdb_setChannelAttribute
    305                      //bdb_StartCommissioning( BDB_COMMISSIONING_MODE_NWK_STEERING);
    306          
    307                  }
    308                break;
    309                case BDB_COMMISSIONING_FINDING_BINDING:
    310                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    311                  {
    312                    //YOUR JOB:
    313                  }
    314                  else
    315                  {
    316                    //YOUR JOB:
    317                    //retry?, wait for user interaction?
    318                  }
    319                break;
    320                case BDB_COMMISSIONING_INITIALIZATION:
    321                  //Initialization notification can only be successful. Failure on initialization 
    322                  //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    323                  
    324                  //YOUR JOB:
    325                  //We are on a network, what now?
    326                  
    327                break;
    328          #if ZG_BUILD_ENDDEVICE_TYPE    
    329              case BDB_COMMISSIONING_PARENT_LOST:
    330                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
    331                {
    332                  //We did recover from losing parent
    333                }
    334                else
    335                {
    336                  //Parent not found, attempt to rejoin again after a fixed delay
    337                  osal_start_timerEx(zclMultiSensor_TaskID, MULTISENSOR_END_DEVICE_REJOIN_EVT, MULTISENSOR_END_DEVICE_REJOIN_DELAY);
    338                }
    339              break;
    340          #endif 
    341              }
    342          }
   \                     ??zclMultiSensor_ProcessCommissioningStatus_1:
   \   000039                REQUIRE ?Subroutine0
   \   000039                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    343          
    344          /*********************************************************************
    345           * @fn          zclSample_event_loop
    346           *
    347           * @brief       Event Loop Processor for zclGeneral.
    348           *
    349           * @param       none
    350           *
    351           * @return      none
    352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          uint16 zclMultiSensor_event_loop( uint8 task_id, uint16 events )
   \                     zclMultiSensor_event_loop:
    354          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    355            afIncomingMSGPacket_t *MSGpkt;
    356          
    357            (void)task_id;  // Intentionally unreferenced parameter
    358          
    359            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV       A,R3
   \   00000A   5480         ANL       A,#0x80
   \   00000C   7024         JNZ       ??zclMultiSensor_event_loop_0
    360            {
    361              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclMultiSensor_TaskID )) )
    362              {
    363                switch ( MSGpkt->hdr.event )
    364                {
    365                  case ZCL_INCOMING_MSG:
    366                    // Incoming ZCL Foundation command/response messages
    367                    zclMultiSensor_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    368                    break;
    369          
    370                  case KEY_CHANGE:
    371                    zclMultiSensor_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    372                    break;
    373                    
    374                  case ZDO_STATE_CHANGE:
    375                    break;
    376          
    377                  default:
    378                    break;
    379                }
    380          
    381                // Release the memory
    382                osal_msg_deallocate( (uint8 *)MSGpkt );
    383              }
    384              
    385              // return unprocessed events
    386              return (events ^ SYS_EVENT_MSG);
    387            }
    388            
    389          #if ZG_BUILD_ENDDEVICE_TYPE    
    390            if ( events & MULTISENSOR_END_DEVICE_REJOIN_EVT )
    391            {
    392              bdb_ZedAttemptRecoverNwk();
    393              return ( events ^ MULTISENSOR_END_DEVICE_REJOIN_EVT );
    394            }
    395          #endif
    396            
    397              if ( events & MULTISENSOR_CHECK_REPORT__EVT )
   \   00000E   EA           MOV       A,R2
   \   00000F   5404         ANL       A,#0x4
   \   000011   603A         JZ        ??zclMultiSensor_event_loop_1
    398            {
    399              zclMultiSensor_CheckReportConfig();
   \   000013                ; Setup parameters for call to function zclMultiSensor_CheckReportConfig
   \   000013   12....       LCALL     `??zclMultiSensor_CheckReportConfig::?relay`; Banked call to: zclMultiSensor_CheckReportConfig
    400              return ( events ^ MULTISENSOR_CHECK_REPORT__EVT );
   \   000016   E5..         MOV       A,?V0
   \   000018   6404         XRL       A,#0x4
   \   00001A   FA           MOV       R2,A
   \   00001B   AB..         MOV       R3,?V1
   \   00001D   8032         SJMP      ??zclMultiSensor_event_loop_2
    401            }
   \                     ??zclMultiSensor_event_loop_3:
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6434         XRL       A,#0x34
   \   000026   7003         JNZ       ??zclMultiSensor_event_loop_4
   \   000028                ; Setup parameters for call to function zclMultiSensor_ProcessIncomingMsg
   \   000028   12....       LCALL     `??zclMultiSensor_ProcessIncomingMsg::?relay`; Banked call to: zclMultiSensor_ProcessIncomingMsg
   \                     ??zclMultiSensor_event_loop_4:
   \   00002B                ; Setup parameters for call to function osal_msg_deallocate
   \   00002B   AA..         MOV       R2,?V2
   \   00002D   EF           MOV       A,R7
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclMultiSensor_event_loop_0:
   \   000032                ; Setup parameters for call to function osal_msg_receive
   \   000032   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F9           MOV       R1,A
   \   000037   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00003A   8A..         MOV       ?V2,R2
   \   00003C   8B..         MOV       ?V3,R3
   \   00003E   AF..         MOV       R7,?V3
   \   000040   EA           MOV       A,R2
   \   000041   4F           ORL       A,R7
   \   000042   70DB         JNZ       ??zclMultiSensor_event_loop_3
   \   000044   AA..         MOV       R2,?V0
   \   000046   E5..         MOV       A,?V1
   \   000048   6480         XRL       A,#0x80
   \   00004A   FB           MOV       R3,A
   \   00004B   8004         SJMP      ??zclMultiSensor_event_loop_2
    402            
    403            // Discard unknown events
    404            return 0;
   \                     ??zclMultiSensor_event_loop_1:
   \   00004D   7A00         MOV       R2,#0x0
   \   00004F   7B00         MOV       R3,#0x0
   \                     ??zclMultiSensor_event_loop_2:
   \   000051   80..         SJMP      ??Subroutine36_0
    405          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    406          
    407          /*********************************************************************
    408           * @fn      zclMultiSensor_BasicResetCB
    409           *
    410           * @brief   Callback from the ZCL General Cluster Library
    411           *          to set all the Basic Cluster attributes to default values.
    412           *
    413           * @param   none
    414           *
    415           * @return  none
    416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          static void zclMultiSensor_BasicResetCB( void )
   \                     zclMultiSensor_BasicResetCB:
    418          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    419            zclMultiSensor_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclMultiSensor_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     ??zclMultiSensor_ResetAttributesToDefaultValues; Banked call to: zclMultiSensor_ResetAttributesToDefaultValues
    420          }
   \   000007   80..         SJMP      ?Subroutine0
    421          
    422          /*********************************************************************
    423           * @fn      zclMultiSensor_BatteryWarningCB
    424           *
    425           * @brief   Called to handle battery-low situation.
    426           *
    427           * @param   voltLevel - level of severity
    428           *
    429           * @return  none
    430           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          void zclMultiSensor_BatteryWarningCB( uint8 voltLevel )
   \                     zclMultiSensor_BatteryWarningCB:
    432          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    433            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
    434            {
    435              // Send warning message to the gateway and blink LED
    436            }
    437            else if ( voltLevel == VOLT_LEVEL_BAD )
    438            {
    439              // Shut down the system
    440            }
    441          }
   \   000000   02....       LJMP      ?BRET
    442          
    443          /******************************************************************************
    444           *
    445           *  Functions for processing ZCL Foundation incoming Command/Response messages
    446           *
    447           *****************************************************************************/
    448          
    449          /*********************************************************************
    450           * @fn      zclMultiSensor_ProcessIncomingMsg
    451           *
    452           * @brief   Process ZCL Foundation incoming message
    453           *
    454           * @param   pInMsg - pointer to the received message
    455           *
    456           * @return  none
    457           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine36_0
   \   000003                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    458          static void zclMultiSensor_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
   \                     zclMultiSensor_ProcessIncomingMsg:
    459          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    460            switch ( pInMsg->zclHdr.commandID )
   \   00000A   EA           MOV       A,R2
   \   00000B   2417         ADD       A,#0x17
   \   00000D   FE           MOV       R6,A
   \   00000E   E4           CLR       A
   \   00000F   3B           ADDC      A,R3
   \   000010   FF           MOV       R7,A
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   14           DEC       A
   \   00001E   6012         JZ        ??zclMultiSensor_ProcessIncomingMsg_0
   \   000020   24FD         ADD       A,#-0x3
   \   000022   601B         JZ        ??zclMultiSensor_ProcessIncomingMsg_1
   \   000024   24FE         ADD       A,#-0x2
   \   000026   6024         JZ        ??zclMultiSensor_ProcessIncomingMsg_2
   \   000028   24FE         ADD       A,#-0x2
   \   00002A   6035         JZ        ??zclMultiSensor_ProcessIncomingMsg_3
   \   00002C   24FE         ADD       A,#-0x2
   \   00002E   6036         JZ        ??zclMultiSensor_ProcessIncomingMsg_4
   \   000030   801D         SJMP      ??zclMultiSensor_ProcessIncomingMsg_5
    461            {
    462          #ifdef ZCL_READ
    463              case ZCL_CMD_READ_RSP:
    464                zclMultiSensor_ProcessInReadRspCmd( pInMsg );
   \                     ??zclMultiSensor_ProcessIncomingMsg_0:
   \   000032   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F9           MOV       R1,A
   \   000037   E8           MOV       A,R0
   \   000038   C3           CLR       C
   \   000039   99           SUBB      A,R1
   \   00003A   5013         JNC       ??zclMultiSensor_ProcessIncomingMsg_5
   \   00003C   08           INC       R0
   \   00003D   80F6         SJMP      ??CrossCallReturnLabel_23
    465                break;
    466          #endif
    467          #ifdef ZCL_WRITE
    468              case ZCL_CMD_WRITE_RSP:
    469                zclMultiSensor_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclMultiSensor_ProcessIncomingMsg_1:
   \   00003F   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F9           MOV       R1,A
   \   000044   E8           MOV       A,R0
   \   000045   C3           CLR       C
   \   000046   99           SUBB      A,R1
   \   000047   5006         JNC       ??zclMultiSensor_ProcessIncomingMsg_5
   \   000049   08           INC       R0
   \   00004A   80F6         SJMP      ??CrossCallReturnLabel_24
    470                break;
    471          #endif
    472          #ifdef ZCL_REPORT
    473              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    474              case ZCL_CMD_CONFIG_REPORT:
    475                zclMultiSensor_ProcessInConfigReportCmd( pInMsg );
   \                     ??zclMultiSensor_ProcessIncomingMsg_2:
   \   00004C                ; Setup parameters for call to function zclMultiSensor_ProcessInConfigReportCmd
   \   00004C   12....       LCALL     `??zclMultiSensor_ProcessInConfigReportCmd::?rel`; Banked call to: zclMultiSensor_ProcessInConfigReportCmd
    476                break;
    477                case ZCL_CMD_READ_REPORT_CFG:
    478                zclMultiSensor_ProcessInReadReportCfgCmd( pInMsg );
    479                break;
    480              case ZCL_CMD_CONFIG_REPORT_RSP:
    481                //zclMultiSensor_ProcessInConfigReportRspCmd( pInMsg );
    482                break;
    483              case ZCL_CMD_READ_REPORT_CFG_RSP:
    484                //zclMultiSensor_ProcessInReadReportCfgRspCmd( pInMsg );
    485                break;
    486          
    487              case ZCL_CMD_REPORT:
    488                zclMultiSensor_ProcessInReportCmd( pInMsg );
    489                break;
    490          #endif
    491              case ZCL_CMD_DEFAULT_RSP:
    492                zclMultiSensor_ProcessInDefaultRspCmd( pInMsg );
    493                break;
    494                
    495              default:
    496                break;
    497            }
    498          
    499            if ( pInMsg->attrCmd )
   \                     ??zclMultiSensor_ProcessIncomingMsg_5:
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000056   EA           MOV       A,R2
   \   000057   4B           ORL       A,R3
   \   000058   6003         JZ        ??zclMultiSensor_ProcessIncomingMsg_6
    500            {
    501              osal_mem_free( pInMsg->attrCmd );
   \   00005A                ; Setup parameters for call to function osal_mem_free
   \   00005A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    502            }
    503          }
   \                     ??zclMultiSensor_ProcessIncomingMsg_6:
   \   00005D   740C         MOV       A,#0xc
   \   00005F   80..         SJMP      ?Subroutine1
   \                     ??zclMultiSensor_ProcessIncomingMsg_3:
   \   000061                ; Setup parameters for call to function zclMultiSensor_ProcessInReadReportCfgCmd
   \   000061   12....       LCALL     `??zclMultiSensor_ProcessInReadReportCfgCmd::?re`; Banked call to: zclMultiSensor_ProcessInReadReportCfgCmd
   \   000064   80E9         SJMP      ??zclMultiSensor_ProcessIncomingMsg_5
   \                     ??zclMultiSensor_ProcessIncomingMsg_4:
   \   000066   8E82         MOV       DPL,R6
   \   000068   8F83         MOV       DPH,R7
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   F5..         MOV       ?V0,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F5..         MOV       ?V1,A
   \   000071   85..82       MOV       DPL,?XSP + 0
   \   000074   85..83       MOV       DPH,?XSP + 1
   \   000077   E4           CLR       A
   \   000078   F0           MOVX      @DPTR,A
   \   000079   A3           INC       DPTR
   \   00007A   F0           MOVX      @DPTR,A
   \   00007B   7408         MOV       A,#0x8
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   7402         MOV       A,#0x2
   \   000082   F0           MOVX      @DPTR,A
   \   000083   EA           MOV       A,R2
   \   000084   2408         ADD       A,#0x8
   \   000086   F8           MOV       R0,A
   \   000087   E4           CLR       A
   \   000088   3B           ADDC      A,R3
   \   000089   F9           MOV       R1,A
   \   00008A   E8           MOV       A,R0
   \   00008B   FA           MOV       R2,A
   \   00008C   E9           MOV       A,R1
   \   00008D   8882         MOV       DPL,R0
   \   00008F   F583         MOV       DPH,A
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F5..         MOV       ?V2,A
   \   000094   A3           INC       DPTR
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F5..         MOV       ?V3,A
   \   000098   78..         MOV       R0,#?V2
   \   00009A   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zclMultiSensor_ProcessIncoming_0`:
   \   00009D   0000         DW        0
   \   00009F   0600         DW        6
   \   0000A1   0004         DW        1024
   \   0000A3   ....         DW        ??zclMultiSensor_ProcessIncomingMsg_7
   \   0000A5   0204         DW        1026
   \   0000A7   ....         DW        ??zclMultiSensor_ProcessIncomingMsg_8
   \   0000A9   0504         DW        1029
   \   0000AB   ....         DW        ??zclMultiSensor_ProcessIncomingMsg_9
   \   0000AD   0604         DW        1030
   \   0000AF   ....         DW        ??zclMultiSensor_ProcessIncomingMsg_10
   \   0000B1   000C         DW        3072
   \   0000B3   ....         DW        ??zclMultiSensor_ProcessIncomingMsg_11
   \   0000B5   010C         DW        3073
   \   0000B7   ....         DW        ??zclMultiSensor_ProcessIncomingMsg_12
   \   0000B9   ....         DW        ??zclMultiSensor_ProcessIncomingMsg_13
   \                     ??zclMultiSensor_ProcessIncomingMsg_12:
   \   0000BB   7409         MOV       A,#0x9
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   7407         MOV       A,#0x7
   \   0000C2   802B         SJMP      ??zclMultiSensor_ProcessIncomingMsg_14
   \                     ??zclMultiSensor_ProcessIncomingMsg_11:
   \   0000C4   7409         MOV       A,#0x9
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   7406         MOV       A,#0x6
   \   0000CB   8022         SJMP      ??zclMultiSensor_ProcessIncomingMsg_14
   \                     ??zclMultiSensor_ProcessIncomingMsg_10:
   \   0000CD   7409         MOV       A,#0x9
   \   0000CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D2   7404         MOV       A,#0x4
   \   0000D4   8019         SJMP      ??zclMultiSensor_ProcessIncomingMsg_14
   \                     ??zclMultiSensor_ProcessIncomingMsg_9:
   \   0000D6   7409         MOV       A,#0x9
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   7403         MOV       A,#0x3
   \   0000DD   8010         SJMP      ??zclMultiSensor_ProcessIncomingMsg_14
   \                     ??zclMultiSensor_ProcessIncomingMsg_8:
   \   0000DF   7409         MOV       A,#0x9
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   7402         MOV       A,#0x2
   \   0000E6   8007         SJMP      ??zclMultiSensor_ProcessIncomingMsg_14
   \                     ??zclMultiSensor_ProcessIncomingMsg_7:
   \   0000E8   7409         MOV       A,#0x9
   \   0000EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000ED   7401         MOV       A,#0x1
   \                     ??zclMultiSensor_ProcessIncomingMsg_14:
   \   0000EF   F0           MOVX      @DPTR,A
   \                     ??zclMultiSensor_ProcessIncomingMsg_13:
   \   0000F0                ; Setup parameters for call to function zcl_SendReportCmd
   \   0000F0   75..00       MOV       ?V2,#0x0
   \   0000F3   78..         MOV       R0,#?V2
   \   0000F5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F8   78..         MOV       R0,#?V2
   \   0000FA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FD   75..01       MOV       ?V2,#0x1
   \   000100   78..         MOV       R0,#?V2
   \   000102   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000105   78..         MOV       R0,#?V0
   \   000107   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010A   8A82         MOV       DPL,R2
   \   00010C   8983         MOV       DPH,R1
   \   00010E   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000111   7405         MOV       A,#0x5
   \   000113   12....       LCALL     ?XSTACK_DISP101_8
   \   000116   7908         MOV       R1,#0x8
   \   000118   12....       LCALL     `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   00011B   7405         MOV       A,#0x5
   \   00011D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000120   E9           MOV       A,R1
   \   000121   7003         JNZ       $+5
   \   000123   02....       LJMP      ??zclMultiSensor_ProcessIncomingMsg_5 & 0xFFFF
   \                     ??zclMultiSensor_ProcessIncomingMsg_15:
   \   000126   80FE         SJMP      ??zclMultiSensor_ProcessIncomingMsg_15

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000007   8882         MOV       DPL,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   7800         MOV       R0,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    504          
    505          #ifdef ZCL_READ
    506          /*********************************************************************
    507           * @fn      zclMultiSensor_ProcessInReadRspCmd
    508           *
    509           * @brief   Process the "Profile" Read Response Command
    510           *
    511           * @param   pInMsg - incoming message to process
    512           *
    513           * @return  none
    514           */
    515          static uint8 zclMultiSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    516          {
    517            zclReadRspCmd_t *readRspCmd;
    518            uint8 i;
    519          
    520            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    521            for ( i = 0; i < readRspCmd->numAttr; i++ )
    522            {
    523              // Notify the originator of the results of the original read attributes
    524              // attempt and, for each successfull request, the value of the requested
    525              // attribute
    526            }
    527          
    528            return ( TRUE );
    529          }
    530          #endif // ZCL_READ
    531          
    532          #ifdef ZCL_WRITE
    533          /*********************************************************************
    534           * @fn      zclMultiSensor_ProcessInWriteRspCmd
    535           *
    536           * @brief   Process the "Profile" Write Response Command
    537           *
    538           * @param   pInMsg - incoming message to process
    539           *
    540           * @return  none
    541           */
    542          static uint8 zclMultiSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    543          {
    544            zclWriteRspCmd_t *writeRspCmd;
    545            uint8 i;
    546          
    547            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    548            for ( i = 0; i < writeRspCmd->numAttr; i++ )
    549            {
    550              // Notify the device of the results of the its original write attributes
    551              // command.
    552            }
    553          
    554            return ( TRUE );
    555          }
    556          #endif // ZCL_WRITE
    557          
    558          /*********************************************************************
    559           * @fn      zclMultiSensor_ProcessInDefaultRspCmd
    560           *
    561           * @brief   Process the "Profile" Default Response Command
    562           *
    563           * @param   pInMsg - incoming message to process
    564           *
    565           * @return  none
    566           */
    567          static uint8 zclMultiSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    568          {
    569            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    570          
    571            // Device is notified of the Default Response command.
    572            (void)pInMsg;
    573          
    574            return ( TRUE );
    575          }
    576          
    577          #ifdef ZCL_DISCOVER
    578          /*********************************************************************
    579           * @fn      zclMultiSensor_ProcessInDiscCmdsRspCmd
    580           *
    581           * @brief   Process the Discover Commands Response Command
    582           *
    583           * @param   pInMsg - incoming message to process
    584           *
    585           * @return  none
    586           */
    587          static uint8 zclMultiSensor_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
    588          {
    589            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
    590            uint8 i;
    591          
    592            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
    593            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
    594            {
    595              // Device is notified of the result of its attribute discovery command.
    596            }
    597          
    598            return ( TRUE );
    599          }
    600          
    601          /*********************************************************************
    602           * @fn      zclMultiSensor_ProcessInDiscAttrsRspCmd
    603           *
    604           * @brief   Process the "Profile" Discover Attributes Response Command
    605           *
    606           * @param   pInMsg - incoming message to process
    607           *
    608           * @return  none
    609           */
    610          static uint8 zclMultiSensor_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
    611          {
    612            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
    613            uint8 i;
    614          
    615            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
    616            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    617            {
    618              // Device is notified of the result of its attribute discovery command.
    619            }
    620          
    621            return ( TRUE );
    622          }
    623          
    624          /*********************************************************************
    625           * @fn      zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd
    626           *
    627           * @brief   Process the "Profile" Discover Attributes Extended Response Command
    628           *
    629           * @param   pInMsg - incoming message to process
    630           *
    631           * @return  none
    632           */
    633          static uint8 zclMultiSensor_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
    634          {
    635            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
    636            uint8 i;
    637          
    638            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
    639            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    640            {
    641              // Device is notified of the result of its attribute discovery command.
    642            }
    643          
    644            return ( TRUE );
    645          }
    646          #endif // ZCL_DISCOVER
    647          
    648          /*********************************************************************
    649           * @fn      zclSampleTemperatureSensor_HandleKeys
    650           *
    651           * @brief   Handles all key events for this device.
    652           *
    653           * @param   shift - true if in shift/alt.
    654           * @param   keys - bit field for key events. Valid entries:
    655           *                 HAL_KEY_SW_5
    656          *                 HAL_KEY_SW_4
    657          *                 HAL_KEY_SW_3
    658          *                 HAL_KEY_SW_2
    659          *                 HAL_KEY_SW_1
    660          *
    661          * @return  none
    662          */
    663          static void zclMultiSensor_HandleKeys( byte shift, byte keys )
    664          {
    665            if ( keys & HAL_KEY_SW_1 )
    666            {
    667          
    668              
    669          //    ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    670          //                         MULTISENSOR_ENDPOINT_PIR,
    671          //                         ZCL_HA_PROFILE_ID,
    672          //                         ZCLMULTISENSOR_PIR_MAX_INCLUSTERS,
    673          //                         (cId_t *)zclMultiSensor_Pir_InClusterList,
    674          //                         ZCLMULTISENSOR_PIR_MAX_OUTCLUSTERS,
    675          //                         (cId_t *)zclMultiSensor_Pir_OutClusterList,
    676          //                         FALSE );
    677              
    678            }
    679          }
    680          
    681          static void zclMultiSensor_UART_Init(void)
    682          {
    683            halUARTCfg_t uartConfig;
    684            
    685            // configure UART
    686            uartConfig.configured           = TRUE;
    687            uartConfig.baudRate             = HAL_UART_BR_38400;
    688            uartConfig.flowControl          = FALSE;
    689            uartConfig.flowControlThreshold = 48;
    690            uartConfig.rx.maxBufSize        = 75;
    691            uartConfig.tx.maxBufSize        = 7;
    692            uartConfig.idleTimeout          = 6;
    693            uartConfig.intEnable            = TRUE;
    694            uartConfig.callBackFunc         = uartEventApplicationCB;
    695            
    696            HalUARTOpen( HAL_UART_PORT_0, &uartConfig);
    697          }
    698          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    699          void uartEventApplicationCB(uint8 port, uint8 event)
   \                     uartEventApplicationCB:
    700          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
    701              int16 valueOfSensors[NUMBER_OF_SENSOR] = {0};
   \   00000C   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0}>`
   \   00000F   7401         MOV       A,#0x1
   \   000011   12....       LCALL     ?XSTACK_DISP102_8
   \   000014   740C         MOV       A,#0xc
   \   000016   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    702              int fieldIndex = 0;         // the current field being received
   \   000019   FE           MOV       R6,A
   \   00001A   FF           MOV       R7,A
    703          
    704              //osal_memset(valueOfSensors, 0, NUMBER_OF_SENSOR);
    705              
    706              if ( event & HAL_UART_RX_TIMEOUT)
   \   00001B   EA           MOV       A,R2
   \   00001C   A2E2         MOV       C,0xE0 /* A   */.2
   \   00001E   404D         JC        ??uartEventApplicationCB_0
    707              {
    708                while ( Hal_UART_RxBufLen(port) > 0 )
    709                {
    710                  uint8 ch;
    711                  HalUARTRead(port, &ch, 1);
    712                  if (ch >= '0' && ch <= '9')     // is this an ascii digit between 0 and 9 ?
    713                  {
    714                    //yes, accumulate the value
    715                    valueOfSensors[fieldIndex] = (valueOfSensors[fieldIndex] * 10) + (ch - '0');
    716                  }
    717                  else if (ch == ',')     // comma is our separator, so move on to the next field
    718                  {
    719                    if (fieldIndex < NUMBER_OF_SENSOR - 1)
    720                      fieldIndex++;       // increment field index
    721                  }
    722                  else
    723                  {
    724                    // any character not a digit or comma ends the acquisition of fields
    725                    // In this project, it's the newline character sent by the STM32 MCU
    726                    zclMultiSensor_Light_MeasuredValue = valueOfSensors[INDEX_LIGHT] ;
    727                    zclMultiSensor_Temperature_MeasuredValue = valueOfSensors[INDEX_TEMPERATURE];  
    728                    zclMultiSensor_Humidity_MeasuredValue = valueOfSensors[INDEX_HUMIDITY];
    729                    zclMultiSensor_Pir_Status = (uint8)valueOfSensors[INDEX_PIR];
    730                    zclMultiSensor_TVOC_MeasuredValue = valueOfSensors[INDEX_TVOC];
    731                    zclMultiSensor_CO2_MeasuredValue = valueOfSensors[INDEX_CO2];
    732          
    733                  }
    734                }
    735              }
    736          }
   \                     ??uartEventApplicationCB_1:
   \   000020   740D         MOV       A,#0xd
   \   000022   02....       LJMP      ?Subroutine1 & 0xFFFF
   \                     ??uartEventApplicationCB_2:
   \   000025   EE           MOV       A,R6
   \   000026   F8           MOV       R0,A
   \   000027   EF           MOV       A,R7
   \   000028   F9           MOV       R1,A
   \   000029   E8           MOV       A,R0
   \   00002A   28           ADD       A,R0
   \   00002B   F8           MOV       R0,A
   \   00002C   E9           MOV       A,R1
   \   00002D   33           RLC       A
   \   00002E   F9           MOV       R1,A
   \   00002F   7401         MOV       A,#0x1
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   E582         MOV       A,DPL
   \   000036   28           ADD       A,R0
   \   000037   F8           MOV       R0,A
   \   000038   E583         MOV       A,DPH
   \   00003A   39           ADDC      A,R1
   \   00003B   F9           MOV       R1,A
   \   00003C   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00003F   EA           MOV       A,R2
   \   000040   75F00A       MOV       B,#0xa
   \   000043   A4           MUL       AB
   \   000044   FA           MOV       R2,A
   \   000045   ACF0         MOV       R4,B
   \   000047   75F00A       MOV       B,#0xa
   \   00004A   EB           MOV       A,R3
   \   00004B   A4           MUL       AB
   \   00004C   2C           ADD       A,R4
   \   00004D   FB           MOV       R3,A
   \   00004E   85..82       MOV       DPL,?XSP + 0
   \   000051   85..83       MOV       DPH,?XSP + 1
   \   000054   E0           MOVX      A,@DPTR
   \   000055   FC           MOV       R4,A
   \   000056   EA           MOV       A,R2
   \   000057   2C           ADD       A,R4
   \   000058   FA           MOV       R2,A
   \   000059   E4           CLR       A
   \   00005A   3B           ADDC      A,R3
   \   00005B   FB           MOV       R3,A
   \   00005C   EA           MOV       A,R2
   \   00005D   24D0         ADD       A,#-0x30
   \   00005F   FA           MOV       R2,A
   \   000060   EB           MOV       A,R3
   \   000061   34FF         ADDC      A,#-0x1
   \   000063   FB           MOV       R3,A
   \   000064   8882         MOV       DPL,R0
   \   000066   8983         MOV       DPH,R1
   \   000068   EA           MOV       A,R2
   \   000069   F0           MOVX      @DPTR,A
   \   00006A   A3           INC       DPTR
   \   00006B   EB           MOV       A,R3
   \                     ??uartEventApplicationCB_3:
   \   00006C   F0           MOVX      @DPTR,A
   \                     ??uartEventApplicationCB_0:
   \   00006D                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   00006D   A9..         MOV       R1,?V1
   \   00006F   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000072   EA           MOV       A,R2
   \   000073   4B           ORL       A,R3
   \   000074   60AA         JZ        ??uartEventApplicationCB_1
   \   000076                ; Setup parameters for call to function HalUARTRead
   \   000076   7C01         MOV       R4,#0x1
   \   000078   7D00         MOV       R5,#0x0
   \   00007A   AA..         MOV       R2,?XSP + 0
   \   00007C   AB..         MOV       R3,?XSP + 1
   \   00007E   A9..         MOV       R1,?V1
   \   000080   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   000083   85..82       MOV       DPL,?XSP + 0
   \   000086   85..83       MOV       DPH,?XSP + 1
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   24D0         ADD       A,#-0x30
   \   00008C   C3           CLR       C
   \   00008D   940A         SUBB      A,#0xa
   \   00008F   4094         JC        ??uartEventApplicationCB_2
   \   000091   E0           MOVX      A,@DPTR
   \   000092   642C         XRL       A,#0x2c
   \   000094   7015         JNZ       ??uartEventApplicationCB_4
   \   000096   C3           CLR       C
   \   000097   EE           MOV       A,R6
   \   000098   9405         SUBB      A,#0x5
   \   00009A   EF           MOV       A,R7
   \   00009B   9400         SUBB      A,#0x0
   \   00009D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00009F   65D0         XRL       A,PSW
   \   0000A1   33           RLC       A
   \   0000A2   50C9         JNC       ??uartEventApplicationCB_0
   \   0000A4   0E           INC       R6
   \   0000A5   EE           MOV       A,R6
   \   0000A6   70C5         JNZ       ??uartEventApplicationCB_0
   \   0000A8   0F           INC       R7
   \   0000A9   80C2         SJMP      ??uartEventApplicationCB_0
   \                     ??uartEventApplicationCB_4:
   \   0000AB   7401         MOV       A,#0x1
   \   0000AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B0   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000B3   90....       MOV       DPTR,#zclMultiSensor_Light_MeasuredValue
   \   0000B6   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000B9   7403         MOV       A,#0x3
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000C1   90....       MOV       DPTR,#zclMultiSensor_Temperature_MeasuredValue
   \   0000C4   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0000C7   7405         MOV       A,#0x5
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000CF   90....       MOV       DPTR,#zclMultiSensor_Humidity_MeasuredValue
   \   0000D2   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000D5   7407         MOV       A,#0x7
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   90....       MOV       DPTR,#zclMultiSensor_Pir_Status
   \   0000DE   F0           MOVX      @DPTR,A
   \   0000DF   7409         MOV       A,#0x9
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000E7   90....       MOV       DPTR,#zclMultiSensor_TVOC_MeasuredValue
   \   0000EA   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000ED   740B         MOV       A,#0xb
   \   0000EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F2   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000F5   90....       MOV       DPTR,#zclMultiSensor_CO2_MeasuredValue
   \   0000F8   E8           MOV       A,R0
   \   0000F9   F0           MOVX      @DPTR,A
   \   0000FA   A3           INC       DPTR
   \   0000FB   E9           MOV       A,R1
   \   0000FC   02....       LJMP      ??uartEventApplicationCB_3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8882         MOV       DPL,R0
   \   000002   F583         MOV       DPH,A
   \   000004                REQUIRE ??Subroutine37_0
   \   000004                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    737          
    738          /*********************************************************************
    739          * @fn      zclMultiSensor_CheckAndSendClusterAttrReport
    740          *
    741          * @brief   Check if there is a reportable attribute in all cluster is timeout to report
    742          *
    743          * @param   none
    744          *
    745          * @return  none
    746          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    747          static void zclMultiSensor_CheckAndSendClusterAttrReport( uint8 endpoint, uint16 clusterId,
   \                     zclMultiSensor_CheckAndSendClusterAttrReport:
    748                                                                               zclConfigReportRecsList *pConfigReportRecsList )
    749          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V4,R1
   \   00000C   8A..         MOV       ?V12,R2
   \   00000E   8B..         MOV       ?V13,R3
   \   000010   8C..         MOV       ?V8,R4
   \   000012   8D..         MOV       ?V9,R5
    750            uint8 numAttr = 0;
   \   000014   75..00       MOV       ?V0,#0x0
    751            uint8 x;
    752            uint16 len;
    753            zclReportCmd_t *pReportCmd;
    754            zclConfigReportRec_t *pConfigReportRec = NULL;
    755            zclAttrRec_t attrRec;
    756            
    757            for (x = 0; x < pConfigReportRecsList->numConfigReportRec; x++)
   \   000017   75..00       MOV       ?V1,#0x0
   \   00001A   8044         SJMP      ??zclMultiSensor_CheckAndSendClusterAttrReport_0
    758            {
    759              pConfigReportRec = &(pConfigReportRecsList->configReportRecs[x]);
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_1:
   \   00001C   E5..         MOV       A,?V1
   \   00001E   75F012       MOV       B,#0x12
   \   000021   A4           MUL       AB
   \   000022   F8           MOV       R0,A
   \   000023   A9F0         MOV       R1,B
   \   000025   8C82         MOV       DPL,R4
   \   000027   8D83         MOV       DPH,R5
   \   000029   12....       LCALL     ?Subroutine13 & 0xFFFF
    760              
    761              if (pConfigReportRec->clusterId == clusterId &&
    762                  pConfigReportRec->cfgReportRec.maxReportInt != 0xFFFF)
   \                     ??CrossCallReturnLabel_14:
   \   00002C   6A           XRL       A,R2
   \   00002D   7003         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_2
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6B           XRL       A,R3
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_2:
   \   000032   702A         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_3
   \   000034   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000037   7003         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_4
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F4           CPL       A
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_4:
   \   00003C   6020         JZ        ??zclMultiSensor_CheckAndSendClusterAttrReport_3
    763              {
    764                if (pConfigReportRec->timeup == 0xFFFF || pConfigReportRec->timeup == gTimeCounter)
   \   00003E   85..82       MOV       DPL,?V2
   \   000041   85..83       MOV       DPH,?V3
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000049   7003         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_5
   \   00004B   74FF         MOV       A,#-0x1
   \   00004D   69           XRL       A,R1
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_5:
   \   00004E   600C         JZ        ??zclMultiSensor_CheckAndSendClusterAttrReport_6
   \   000050   90....       MOV       DPTR,#gTimeCounter
   \   000053   E0           MOVX      A,@DPTR
   \   000054   68           XRL       A,R0
   \   000055   7003         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_7
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   69           XRL       A,R1
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_7:
   \   00005A   7002         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_3
    765                {
    766                  numAttr++;
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_6:
   \   00005C   05..         INC       ?V0
    767                }
    768              }
    769            }
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_3:
   \   00005E   05..         INC       ?V1
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_0:
   \   000060   8C82         MOV       DPL,R4
   \   000062   8D83         MOV       DPH,R5
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F8           MOV       R0,A
   \   000069   E5..         MOV       A,?V1
   \   00006B   C3           CLR       C
   \   00006C   98           SUBB      A,R0
   \   00006D   40AD         JC        ??zclMultiSensor_CheckAndSendClusterAttrReport_1
    770            
    771            if (numAttr != 0)
   \   00006F   E5..         MOV       A,?V0
   \   000071   601F         JZ        ??zclMultiSensor_CheckAndSendClusterAttrReport_8
    772            {
    773              // we need to send a report - allocate space for it
    774              len = sizeof(zclReportCmd_t) + (numAttr * sizeof(zclReport_t));
   \   000073   75F005       MOV       B,#0x5
   \   000076   A4           MUL       AB
   \   000077   A9F0         MOV       R1,B
   \   000079   2401         ADD       A,#0x1
   \   00007B   FE           MOV       R6,A
   \   00007C   E4           CLR       A
   \   00007D   39           ADDC      A,R1
   \   00007E   FF           MOV       R7,A
    775              pReportCmd = (zclReportCmd_t *)zcl_mem_alloc( len );
   \   00007F                ; Setup parameters for call to function osal_mem_alloc
   \   00007F   EE           MOV       A,R6
   \   000080   FA           MOV       R2,A
   \   000081   EF           MOV       A,R7
   \   000082   FB           MOV       R3,A
   \   000083   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000086   85..82       MOV       DPL,?XSP + 0
   \   000089   85..83       MOV       DPH,?XSP + 1
   \   00008C   12....       LCALL     ?Subroutine4 & 0xFFFF
    776              pReportCmd->numAttr = numAttr;
    777            }
   \                     ??CrossCallReturnLabel_0:
   \   00008F   E5..         MOV       A,?V0
   \   000091   F0           MOVX      @DPTR,A
    778            
    779            numAttr = 0;
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_8:
   \   000092   75..00       MOV       ?V0,#0x0
    780            
    781            for (x = 0; x < pConfigReportRecsList->numConfigReportRec; x++ )
   \   000095   75..00       MOV       ?V1,#0x0
   \   000098   8012         SJMP      ??zclMultiSensor_CheckAndSendClusterAttrReport_9
    782            {
    783              zclReport_t *reportRec;
    784              pConfigReportRec = &(pConfigReportRecsList->configReportRecs[x]);
    785              
    786              if (pConfigReportRec->clusterId == clusterId && pConfigReportRec->cfgReportRec.maxReportInt != 0xFFFF)      // need report
    787              {
    788                if (pConfigReportRec->timeup == 0xFFFF || pConfigReportRec->timeup == gTimeCounter)       //timeup to report
    789                {
    790                  // fill the record in *pReportCmd
    791                  reportRec = &(pReportCmd->attrList[numAttr]);
    792                  zcl_memset( reportRec, 0, sizeof(zclReport_t));
    793                  numAttr++;
    794                  zclFindAttrRec(endpoint, pConfigReportRec->clusterId, pConfigReportRec->cfgReportRec.attrID, &attrRec);
    795                  
    796                  reportRec->attrID = attrRec.attr.attrId;
    797                  reportRec->dataType = attrRec.attr.dataType;
    798                  reportRec->attrData = attrRec.attr.dataPtr;
    799                  
    800                  if (pConfigReportRec->cfgReportRec.minReportInt == 0)
    801                    pConfigReportRec->timeup = gTimeCounter + pConfigReportRec->cfgReportRec.maxReportInt;
    802                  else
    803                    pConfigReportRec->timeup = gTimeCounter + pConfigReportRec->cfgReportRec.minReportInt;
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_10:
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   28           ADD       A,R0
   \   00009C   F8           MOV       R0,A
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   39           ADDC      A,R1
   \   0000A0   F9           MOV       R1,A
   \   0000A1   85..82       MOV       DPL,?V14
   \   0000A4   85..83       MOV       DPH,?V15
   \   0000A7   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000AA   05..         INC       ?V1
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_9:
   \   0000AC   85..82       MOV       DPL,?V8
   \   0000AF   85..83       MOV       DPH,?V9
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   F8           MOV       R0,A
   \   0000B7   E5..         MOV       A,?V1
   \   0000B9   C3           CLR       C
   \   0000BA   98           SUBB      A,R0
   \   0000BB   4003         JC        $+5
   \   0000BD   02....       LJMP      ??zclMultiSensor_CheckAndSendClusterAttrReport_11 & 0xFFFF
   \   0000C0   E5..         MOV       A,?V1
   \   0000C2   75F012       MOV       B,#0x12
   \   0000C5   A4           MUL       AB
   \   0000C6   F8           MOV       R0,A
   \   0000C7   A9F0         MOV       R1,B
   \   0000C9   85..82       MOV       DPL,?V8
   \   0000CC   85..83       MOV       DPH,?V9
   \   0000CF   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000D2   65..         XRL       A,?V12
   \   0000D4   7004         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_12
   \   0000D6   A3           INC       DPTR
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   65..         XRL       A,?V13
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_12:
   \   0000DA   70CE         JNZ       ??CrossCallReturnLabel_85
   \   0000DC   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000DF   7003         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_13
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F4           CPL       A
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_13:
   \   0000E4   60C4         JZ        ??CrossCallReturnLabel_85
   \   0000E6   E5..         MOV       A,?V2
   \   0000E8   2402         ADD       A,#0x2
   \   0000EA   F5..         MOV       ?V14,A
   \   0000EC   E4           CLR       A
   \   0000ED   35..         ADDC      A,?V3
   \   0000EF   F5..         MOV       ?V15,A
   \   0000F1   85..82       MOV       DPL,?V14
   \   0000F4   F583         MOV       DPH,A
   \   0000F6   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000F9   7003         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_14
   \   0000FB   74FF         MOV       A,#-0x1
   \   0000FD   69           XRL       A,R1
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_14:
   \   0000FE   600C         JZ        ??zclMultiSensor_CheckAndSendClusterAttrReport_15
   \   000100   90....       MOV       DPTR,#gTimeCounter
   \   000103   E0           MOVX      A,@DPTR
   \   000104   68           XRL       A,R0
   \   000105   7003         JNZ       ??zclMultiSensor_CheckAndSendClusterAttrReport_16
   \   000107   A3           INC       DPTR
   \   000108   E0           MOVX      A,@DPTR
   \   000109   69           XRL       A,R1
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_16:
   \   00010A   709E         JNZ       ??CrossCallReturnLabel_85
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_15:
   \   00010C   E5..         MOV       A,?V0
   \   00010E   75F005       MOV       B,#0x5
   \   000111   A4           MUL       AB
   \   000112   F8           MOV       R0,A
   \   000113   A9F0         MOV       R1,B
   \   000115   85..82       MOV       DPL,?XSP + 0
   \   000118   85..83       MOV       DPH,?XSP + 1
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   28           ADD       A,R0
   \   00011D   FA           MOV       R2,A
   \   00011E   A3           INC       DPTR
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   39           ADDC      A,R1
   \   000121   8A82         MOV       DPL,R2
   \   000123   F583         MOV       DPH,A
   \   000125   A3           INC       DPTR
   \   000126   8582..       MOV       ?V6,DPL
   \   000129   8583..       MOV       ?V7,DPH
   \   00012C                ; Setup parameters for call to function osal_memset
   \   00012C   7C05         MOV       R4,#0x5
   \   00012E   7D00         MOV       R5,#0x0
   \   000130   7900         MOV       R1,#0x0
   \   000132   AA..         MOV       R2,?V6
   \   000134   AB..         MOV       R3,?V7
   \   000136   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   000139   05..         INC       ?V0
   \   00013B                ; Setup parameters for call to function zclFindAttrRec
   \   00013B   7402         MOV       A,#0x2
   \   00013D   12....       LCALL     ?XSTACK_DISP100_8
   \   000140   88..         MOV       ?V10,R0
   \   000142   89..         MOV       ?V11,R1
   \   000144   78..         MOV       R0,#?V10
   \   000146   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000149   85..82       MOV       DPL,?V2
   \   00014C   85..83       MOV       DPH,?V3
   \   00014F   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000152   85..82       MOV       DPL,?V2
   \   000155   85..83       MOV       DPH,?V3
   \   000158   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00015B   A9..         MOV       R1,?V4
   \   00015D   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000160   7402         MOV       A,#0x2
   \   000162   12....       LCALL     ?DEALLOC_XSTACK8
   \   000165   7404         MOV       A,#0x4
   \   000167   12....       LCALL     ?XSTACK_DISP0_8
   \   00016A   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00016D   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000170   7406         MOV       A,#0x6
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   E0           MOVX      A,@DPTR
   \   000176   85..82       MOV       DPL,?V6
   \   000179   85..83       MOV       DPH,?V7
   \   00017C   A3           INC       DPTR
   \   00017D   A3           INC       DPTR
   \   00017E   F0           MOVX      @DPTR,A
   \   00017F   7408         MOV       A,#0x8
   \   000181   12....       LCALL     ?XSTACK_DISP0_8
   \   000184   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000187   A3           INC       DPTR
   \   000188   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00018B   85..82       MOV       DPL,?V2
   \   00018E   85..83       MOV       DPH,?V3
   \   000191   A3           INC       DPTR
   \   000192   A3           INC       DPTR
   \   000193   A3           INC       DPTR
   \   000194   A3           INC       DPTR
   \   000195   A3           INC       DPTR
   \   000196   A3           INC       DPTR
   \   000197   A3           INC       DPTR
   \   000198   A3           INC       DPTR
   \   000199   A3           INC       DPTR
   \   00019A   A3           INC       DPTR
   \   00019B   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00019E   E8           MOV       A,R0
   \   00019F   49           ORL       A,R1
   \   0001A0   90....       MOV       DPTR,#gTimeCounter
   \   0001A3   6003         JZ        $+5
   \   0001A5   02....       LJMP      ??zclMultiSensor_CheckAndSendClusterAttrReport_10 & 0xFFFF
   \   0001A8   12....       LCALL     ??Subroutine41_0 & 0xFFFF
    804                }
    805              }
    806            }
   \                     ??CrossCallReturnLabel_60:
   \   0001AB   E5..         MOV       A,?V2
   \   0001AD   240C         ADD       A,#0xc
   \   0001AF   F582         MOV       DPL,A
   \   0001B1   E4           CLR       A
   \   0001B2   35..         ADDC      A,?V3
   \   0001B4   F583         MOV       DPH,A
   \   0001B6   02....       LJMP      ??zclMultiSensor_CheckAndSendClusterAttrReport_10 & 0xFFFF
    807            
    808            if (numAttr != 0)
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_11:
   \   0001B9   E5..         MOV       A,?V0
   \   0001BB   7003         JNZ       $+5
   \   0001BD   02....       LJMP      ??zclMultiSensor_CheckAndSendClusterAttrReport_17 & 0xFFFF
    809            {
    810              SendZclAttrReport( endpoint, clusterId, pReportCmd, len);
   \   0001C0                ; Setup parameters for call to function osal_msg_allocate
   \   0001C0   EE           MOV       A,R6
   \   0001C1   2419         ADD       A,#0x19
   \   0001C3   FA           MOV       R2,A
   \   0001C4   E4           CLR       A
   \   0001C5   3400         ADDC      A,#0x0
   \   0001C7   FB           MOV       R3,A
   \   0001C8   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0001CB   EA           MOV       A,R2
   \   0001CC   4B           ORL       A,R3
   \   0001CD   6077         JZ        ??zclMultiSensor_CheckAndSendClusterAttrReport_17
   \   0001CF   8A82         MOV       DPL,R2
   \   0001D1   8B83         MOV       DPH,R3
   \   0001D3   7434         MOV       A,#0x34
   \   0001D5   F0           MOVX      @DPTR,A
   \   0001D6   A3           INC       DPTR
   \   0001D7   E4           CLR       A
   \   0001D8   12....       LCALL     ?Subroutine35 & 0xFFFF
    811            }
   \                     ??CrossCallReturnLabel_43:
   \   0001DB   F0           MOVX      @DPTR,A
   \   0001DC   A3           INC       DPTR
   \   0001DD   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0001E0   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0001E3   A3           INC       DPTR
   \   0001E4   740A         MOV       A,#0xa
   \   0001E6   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001E9   E5..         MOV       A,?V12
   \   0001EB   F0           MOVX      @DPTR,A
   \   0001EC   A3           INC       DPTR
   \   0001ED   E5..         MOV       A,?V13
   \   0001EF   F0           MOVX      @DPTR,A
   \   0001F0   EA           MOV       A,R2
   \   0001F1   2412         ADD       A,#0x12
   \   0001F3   F582         MOV       DPL,A
   \   0001F5   E4           CLR       A
   \   0001F6   3B           ADDC      A,R3
   \   0001F7   F583         MOV       DPH,A
   \   0001F9   7402         MOV       A,#0x2
   \   0001FB   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001FE   A3           INC       DPTR
   \   0001FF   A3           INC       DPTR
   \   000200   E4           CLR       A
   \   000201   F0           MOVX      @DPTR,A
   \   000202   A3           INC       DPTR
   \   000203   F0           MOVX      @DPTR,A
   \   000204   EA           MOV       A,R2
   \   000205   2414         ADD       A,#0x14
   \   000207   F582         MOV       DPL,A
   \   000209   E4           CLR       A
   \   00020A   3B           ADDC      A,R3
   \   00020B   F583         MOV       DPH,A
   \   00020D   E4           CLR       A
   \   00020E   F0           MOVX      @DPTR,A
   \   00020F   A3           INC       DPTR
   \   000210   F0           MOVX      @DPTR,A
   \   000211   EA           MOV       A,R2
   \   000212   2413         ADD       A,#0x13
   \   000214   F582         MOV       DPL,A
   \   000216   E4           CLR       A
   \   000217   3B           ADDC      A,R3
   \   000218   F583         MOV       DPH,A
   \   00021A   E5..         MOV       A,?V4
   \   00021C   F0           MOVX      @DPTR,A
   \   00021D   EA           MOV       A,R2
   \   00021E   2416         ADD       A,#0x16
   \   000220   F582         MOV       DPL,A
   \   000222   E4           CLR       A
   \   000223   3B           ADDC      A,R3
   \   000224   F583         MOV       DPH,A
   \   000226   E5..         MOV       A,?V4
   \   000228   F0           MOVX      @DPTR,A
   \   000229   85..82       MOV       DPL,?XSP + 0
   \   00022C   85..83       MOV       DPH,?XSP + 1
   \   00022F   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000232   EA           MOV       A,R2
   \   000233   2417         ADD       A,#0x17
   \   000235   F582         MOV       DPL,A
   \   000237   E4           CLR       A
   \   000238   3B           ADDC      A,R3
   \   000239   F583         MOV       DPH,A
   \   00023B   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00023E                ; Setup parameters for call to function osal_msg_send
   \   00023E   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   000241   E0           MOVX      A,@DPTR
   \   000242   F9           MOV       R1,A
   \   000243   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    812          }
   \                     ??zclMultiSensor_CheckAndSendClusterAttrReport_17:
   \   000246                REQUIRE ?Subroutine2
   \   000246                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   740A         MOV       A,#0xa
   \   000002                REQUIRE ??Subroutine38_0
   \   000002                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F10         MOV       R7,#0x10
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E5..         MOV       A,?V2
   \   000002   240C         ADD       A,#0xc
   \   000004   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000007   F4           CPL       A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   F9           MOV       R1,A
   \   000004   74FF         MOV       A,#-0x1
   \   000006   68           XRL       A,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007                REQUIRE ??Subroutine40_0
   \   000007                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   F9           MOV       R1,A
   \   000004   85..82       MOV       DPL,?V6
   \   000007   85..83       MOV       DPH,?V7
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   28           ADD       A,R0
   \   000006   F5..         MOV       ?V2,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   39           ADDC      A,R1
   \   00000B   F5..         MOV       ?V3,A
   \   00000D   85..82       MOV       DPL,?V2
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine45_0
   \   000002                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000007   F583         MOV       DPH,A
   \   000009   8882         MOV       DPL,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V3
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET
    813          
    814          /*********************************************************************
    815          * @fn      SendZclAttrReport
    816          *
    817          * @brief   Send the attr report. Let ZCL_CMD_REPORT event handler handle this
    818          *
    819          * @param   srcEp - source endpoint
    820          *          clusterID - cluster id
    821          *          pReportCmd - pointer to the report command packet
    822          *          dataLen - data length of the report command
    823          *
    824          * @return  none
    825          */
    826          static uint8 SendZclAttrReport(uint8 srcEp, uint16 clusterId, zclReportCmd_t *pReportCmd,
    827                                         uint8 datalen)
    828          {
    829            // this is for the inner-app osal msg, not OTA msg, thus some fields are not important
    830            zclIncomingMsg_t *pMsg;       
    831            
    832            // pMsg will be released by zclMultiSensor_event_loop()
    833            pMsg = (zclIncomingMsg_t *)osal_msg_allocate(sizeof(zclIncomingMsg_t) + (datalen));
    834            
    835            if (pMsg == NULL)
    836            {
    837              return FALSE;
    838            }
    839            
    840            if (pMsg)
    841            {
    842                pMsg->hdr.event = ZCL_INCOMING_MSG;
    843                pMsg->hdr.status = 0;
    844                //pMsg->zclHdr.fc = NULL;         // not important
    845                pMsg->zclHdr.manuCode = 0;        // not important
    846                pMsg->zclHdr.transSeqNum = 0;     // not important
    847                pMsg->zclHdr.commandID = ZCL_CMD_REPORT;
    848                pMsg->clusterId = clusterId;
    849                pMsg->srcAddr.addrMode = (afAddrMode_t)Addr16Bit;
    850                pMsg->srcAddr.addr.shortAddr = 0; // not important
    851                pMsg->srcAddr.panId = 0;          // inner-PAN, not important
    852                pMsg->srcAddr.endPoint = srcEp;   // src ep, SAMPLELIGHT_ENDPOINT send to himself
    853                pMsg->endPoint = srcEp;           // dest ep, send to SAMPLELIGHT_ENDPOINT himself
    854                pMsg->attrCmd = (zclReportCmd_t *)pReportCmd;
    855            }
    856            
    857            osal_msg_send( zclMultiSensor_TaskID, (uint8 *)pMsg);
    858            return TRUE;
    859          }
    860          
    861          static void zclMultiSensor_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
    862          {
    863            zclReportCmd_t *pReportCmd;                           // numAttr, attrList[] : (zclReport_t) attrID, dataType, *attrData
    864            pReportCmd = (zclReportCmd_t *)pInMsg->attrCmd;       // *pReportCmd will be free by handle
    865            afAddrType_t dstAddr;
    866            
    867            dstAddr.addr.shortAddr = 0x0000;
    868            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    869            switch ( pInMsg->clusterId )
    870            {
    871            case ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT:
    872              dstAddr.endPoint = 1;
    873              break;
    874            case ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT:
    875              dstAddr.endPoint = 2;
    876              break;
    877            case ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY:
    878              dstAddr.endPoint = 3;
    879              break;
    880            case ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING:
    881              dstAddr.endPoint = 4;
    882              break;
    883            case ZCL_CLUSTER_ID_MS_TVOC_MEASUREMENT:
    884              dstAddr.endPoint = 6;
    885              break;
    886            case ZCL_CLUSTER_ID_MS_CO2_MEASUREMENT:
    887              dstAddr.endPoint = 7;
    888              break;
    889            default:
    890              break;
    891            }
    892            
    893            if( zcl_SendReportCmd( MULTISENSOR_ENDPOINT, &dstAddr, pInMsg->clusterId, pReportCmd, ZCL_REPORT_RECEIVE, FALSE, NULL) != ZSuccess )
    894            {
    895              while(1);
    896            }  
    897          }
    898          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine39_0
   \   000001                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    899          static uint8 zclMultiSensor_ProcessInConfigReportCmd( zclIncomingMsg_t *pInMsg )
   \                     zclMultiSensor_ProcessInConfigReportCmd:
    900          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    901            zclCfgReportCmd_t *pCfgReportCmd;             // this is used to look up table
    902            zclCfgReportRspCmd_t *pCfgReportRspCmd;       // This is used to send responde message
    903            uint8 sendRsp = FALSE;                        // status of initialize dynamic memory for responde message
   \   00000E   C2..         CLR       ?VB.0
    904            uint16 len;
    905            uint8 j = 0;
   \   000010   75..00       MOV       ?V6,#0x0
    906            uint8 i;
    907            
    908            //1. Initialize message responde ( using structure zclCfgReportRspCmd_t )
    909            pCfgReportCmd = (zclCfgReportCmd_t *)pInMsg->attrCmd;
   \   000013   EA           MOV       A,R2
   \   000014   2417         ADD       A,#0x17
   \   000016   F582         MOV       DPL,A
   \   000018   E4           CLR       A
   \   000019   35..         ADDC      A,?V1
   \   00001B   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00001E   7402         MOV       A,#0x2
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   12....       LCALL     ??Subroutine45_0 & 0xFFFF
    910            
    911            if ( pInMsg->zclHdr.commandID == ZCL_CMD_CONFIG_REPORT )
   \                     ??CrossCallReturnLabel_88:
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   6406         XRL       A,#0x6
   \   000034   702F         JNZ       ??zclMultiSensor_ProcessInConfigReportCmd_0
    912            {
    913              // We need to send a response back - allocate space for it
    914              len = sizeof( zclCfgReportRspCmd_t ) + (pCfgReportCmd->numAttr * sizeof( zclCfgReportStatus_t ));
    915              pCfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( len );
   \   000036                ; Setup parameters for call to function osal_mem_alloc
   \   000036   7402         MOV       A,#0x2
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00003E   F5..         MOV       ?V2,A
   \   000040   75..00       MOV       ?V3,#0x0
   \   000043   7402         MOV       A,#0x2
   \   000045   78..         MOV       R0,#?V2
   \   000047   12....       LCALL     ?S_SHL
   \   00004A   E5..         MOV       A,?V2
   \   00004C   2401         ADD       A,#0x1
   \   00004E   FA           MOV       R2,A
   \   00004F   E4           CLR       A
   \   000050   35..         ADDC      A,?V3
   \   000052   FB           MOV       R3,A
   \   000053   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000056   8A..         MOV       ?V2,R2
   \   000058   8B..         MOV       ?V3,R3
    916              
    917              if ( pCfgReportRspCmd == NULL )
   \   00005A   EA           MOV       A,R2
   \   00005B   4B           ORL       A,R3
   \   00005C   7005         JNZ       ??zclMultiSensor_ProcessInConfigReportCmd_1
    918              {
    919                return FALSE;     // embedded return
   \   00005E   7900         MOV       R1,#0x0
   \   000060   02....       LJMP      ??zclMultiSensor_ProcessInConfigReportCmd_2 & 0xFFFF
    920              }
    921              sendRsp = TRUE;     // sendRsp is active when we got correct commandID
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_1:
   \   000063   D2..         SETB      ?VB.0
    922            }
    923            
    924            for ( i = 0; i < pCfgReportCmd->numAttr; i++ )
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_0:
   \   000065   75..00       MOV       ?V7,#0x0
   \   000068   8026         SJMP      ??zclMultiSensor_ProcessInConfigReportCmd_3
    925            {
    926              
    927              //2. Look up config. report record of the incomming message in table "config. Report Record List"
    928              zclConfigReportRec_t *pConfigReportRec = NULL;      // find the rec and store here
    929              zclAttrRec_t attrRec;
    930              
    931              zclCfgReportStatus_t *statusRec = &(pCfgReportRspCmd->attrList[i]);
    932              zcl_memset( statusRec, 0, sizeof( zclCfgReportStatus_t ));
    933              
    934              if ( zclFindConfigReportRec( pInMsg->endPoint, pInMsg->clusterId,
    935                                          pCfgReportCmd->attrList[i].attrID, &pConfigReportRec))
    936              {
    937                
    938                //3. Check "dataType" of variable to variable in incomming message
    939                uint8 status = ZCL_STATUS_SUCCESS;
    940                
    941                if (pCfgReportCmd->attrList[i].dataType != pConfigReportRec->cfgReportRec.dataType )
    942                {        
    943                  status = ZCL_STATUS_INVALID_DATA_TYPE;
    944                }
    945                else 
    946                {
    947                  
    948                  //4. Look up Attribute record of incomming message in tabel "attribute list"
    949                  if ( zclFindAttrRec( pInMsg->endPoint, pInMsg->clusterId,
    950                                      pCfgReportCmd->attrList[i].attrID, &attrRec))
    951                  {
    952                    //5. Check "dataType" of variable to variable in incomming message
    953                    if (pCfgReportCmd->attrList[i].dataType != attrRec.attr.dataType )
    954                    {
    955                      status = ZCL_STATUS_INVALID_DATA_TYPE;
    956                    }
    957                    else
    958                    {
    959                      //6. Check Access control type of each attribute in incomming message to attribute in table "attribute list"
    960                      if ( !zcl_AccessCtrlRead(attrRec.attr.accessControl))
    961                      {
    962                        status = ZCL_STATUS_WRITE_ONLY;
    963                      }
    964                    }
    965                  }
    966                }
    967                
    968                //7. Write config. value into variable in table "config. report record list"
    969                // If successful, store the record, and a CfgReportStatus record shall NOT be generated
    970                if ( sendRsp && status != ZCL_STATUS_SUCCESS )
    971                {
    972                  //Attribute is write only or invalid data type - move on to the next record
    973                  statusRec->status = status;
    974                  statusRec->direction = pCfgReportCmd->attrList[i].direction;
    975                  statusRec->attrID = pCfgReportCmd->attrList[i].attrID;
    976                  j++;
    977                }
    978                else    // Success, set the config report rec
    979                {
    980                  pConfigReportRec->cfgReportRec.direction = pCfgReportCmd->attrList[i].direction;
    981                  pConfigReportRec->cfgReportRec.minReportInt = pCfgReportCmd->attrList[i].minReportInt;
    982                  pConfigReportRec->cfgReportRec.maxReportInt = pCfgReportCmd->attrList[i].maxReportInt;
    983                  pConfigReportRec->cfgReportRec.timeoutPeriod = pCfgReportCmd->attrList[i].timeoutPeriod;
    984                  pConfigReportRec->timeup = 0xFFFF;
    985                }
    986              }
    987              else
    988              {
    989                //Attribute is not supported - move on to the next configReportRec record
    990                if (sendRsp)
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_4:
   \   00006A   A2..         MOV       C,?VB.0
   \   00006C   5020         JNC       ??zclMultiSensor_ProcessInConfigReportCmd_5
    991                {
    992                  statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   00006E   85..82       MOV       DPL,?V4
   \   000071   85..83       MOV       DPH,?V5
   \   000074   7486         MOV       A,#-0x7a
   \   000076   12....       LCALL     ?Subroutine6 & 0xFFFF
    993                  statusRec->status = pCfgReportCmd->attrList[i].direction;
   \                     ??CrossCallReturnLabel_4:
   \   000079   F0           MOVX      @DPTR,A
    994                  statusRec->attrID = pCfgReportCmd->attrList[i].attrID;
   \   00007A   85..82       MOV       DPL,?V8
   \   00007D   85..83       MOV       DPH,?V9
   \   000080   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000083   85..82       MOV       DPL,?V4
   \   000086   85..83       MOV       DPH,?V5
   \   000089   12....       LCALL     ?Subroutine7 & 0xFFFF
    995                  j++;
   \                     ??CrossCallReturnLabel_91:
   \   00008C   05..         INC       ?V6
    996                }
    997              }
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_5:
   \   00008E   05..         INC       ?V7
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_3:
   \   000090   7402         MOV       A,#0x2
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000098   F8           MOV       R0,A
   \   000099   E5..         MOV       A,?V7
   \   00009B   C3           CLR       C
   \   00009C   98           SUBB      A,R0
   \   00009D   4003         JC        $+5
   \   00009F   02....       LJMP      ??zclMultiSensor_ProcessInConfigReportCmd_6 & 0xFFFF
   \   0000A2   85..82       MOV       DPL,?XSP + 0
   \   0000A5   85..83       MOV       DPH,?XSP + 1
   \   0000A8   E4           CLR       A
   \   0000A9   F0           MOVX      @DPTR,A
   \   0000AA   A3           INC       DPTR
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   AE..         MOV       R6,?V7
   \   0000AE   8E..         MOV       ?V4,R6
   \   0000B0   F5..         MOV       ?V5,A
   \   0000B2   7402         MOV       A,#0x2
   \   0000B4   78..         MOV       R0,#?V4
   \   0000B6   12....       LCALL     ?S_SHL
   \   0000B9   E5..         MOV       A,?V2
   \   0000BB   25..         ADD       A,?V4
   \   0000BD   F582         MOV       DPL,A
   \   0000BF   E5..         MOV       A,?V3
   \   0000C1   35..         ADDC      A,?V5
   \   0000C3   F583         MOV       DPH,A
   \   0000C5   A3           INC       DPTR
   \   0000C6   8582..       MOV       ?V4,DPL
   \   0000C9   8583..       MOV       ?V5,DPH
   \   0000CC                ; Setup parameters for call to function osal_memset
   \   0000CC   7C04         MOV       R4,#0x4
   \   0000CE   7D00         MOV       R5,#0x0
   \   0000D0   7900         MOV       R1,#0x0
   \   0000D2   AA..         MOV       R2,?V4
   \   0000D4   AB..         MOV       R3,?V5
   \   0000D6   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000D9   EE           MOV       A,R6
   \   0000DA   75F00C       MOV       B,#0xc
   \   0000DD   A4           MUL       AB
   \   0000DE   FE           MOV       R6,A
   \   0000DF   AFF0         MOV       R7,B
   \   0000E1   7402         MOV       A,#0x2
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   2E           ADD       A,R6
   \   0000E8   FE           MOV       R6,A
   \   0000E9   A3           INC       DPTR
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   3F           ADDC      A,R7
   \   0000EC   FF           MOV       R7,A
   \   0000ED   8E82         MOV       DPL,R6
   \   0000EF   F583         MOV       DPH,A
   \   0000F1   A3           INC       DPTR
   \   0000F2   8582..       MOV       ?V12,DPL
   \   0000F5   8583..       MOV       ?V13,DPH
   \   0000F8   EE           MOV       A,R6
   \   0000F9   2402         ADD       A,#0x2
   \   0000FB   F5..         MOV       ?V8,A
   \   0000FD   E4           CLR       A
   \   0000FE   3F           ADDC      A,R7
   \   0000FF   F5..         MOV       ?V9,A
   \   000101                ; Setup parameters for call to function zclFindConfigReportRec
   \   000101   A8..         MOV       R0,?XSP + 0
   \   000103   A9..         MOV       R1,?XSP + 1
   \   000105   88..         MOV       ?V10,R0
   \   000107   89..         MOV       ?V11,R1
   \   000109   78..         MOV       R0,#?V10
   \   00010B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010E   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000111   12....       LCALL     `??zclFindConfigReportRec::?relay`; Banked call to: zclFindConfigReportRec
   \   000114   7402         MOV       A,#0x2
   \   000116   12....       LCALL     ?DEALLOC_XSTACK8
   \   000119   E9           MOV       A,R1
   \   00011A   7003         JNZ       $+5
   \   00011C   02....       LJMP      ??zclMultiSensor_ProcessInConfigReportCmd_4 & 0xFFFF
   \   00011F   EE           MOV       A,R6
   \   000120   2404         ADD       A,#0x4
   \   000122   F5..         MOV       ?V14,A
   \   000124   E4           CLR       A
   \   000125   3F           ADDC      A,R7
   \   000126   F5..         MOV       ?V15,A
   \   000128   85..82       MOV       DPL,?V14
   \   00012B   F583         MOV       DPH,A
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   F9           MOV       R1,A
   \   00012F   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000132   C8           XCH       A,R0
   \   000133   2409         ADD       A,#0x9
   \   000135   F582         MOV       DPL,A
   \   000137   E4           CLR       A
   \   000138   38           ADDC      A,R0
   \   000139   F583         MOV       DPH,A
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   69           XRL       A,R1
   \   00013D   702D         JNZ       ??zclMultiSensor_ProcessInConfigReportCmd_7
   \   00013F                ; Setup parameters for call to function zclFindAttrRec
   \   00013F   7404         MOV       A,#0x4
   \   000141   12....       LCALL     ?XSTACK_DISP100_8
   \   000144   88..         MOV       ?V10,R0
   \   000146   89..         MOV       ?V11,R1
   \   000148   78..         MOV       R0,#?V10
   \   00014A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014D   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000150   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000153   7402         MOV       A,#0x2
   \   000155   12....       LCALL     ?DEALLOC_XSTACK8
   \   000158   E9           MOV       A,R1
   \   000159   6032         JZ        ??zclMultiSensor_ProcessInConfigReportCmd_8
   \   00015B   85..82       MOV       DPL,?V14
   \   00015E   85..83       MOV       DPH,?V15
   \   000161   E0           MOVX      A,@DPTR
   \   000162   F8           MOV       R0,A
   \   000163   7408         MOV       A,#0x8
   \   000165   12....       LCALL     ?XSTACK_DISP0_8
   \   000168   E0           MOVX      A,@DPTR
   \   000169   68           XRL       A,R0
   \   00016A   6004         JZ        ??zclMultiSensor_ProcessInConfigReportCmd_9
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_7:
   \   00016C   748D         MOV       A,#-0x73
   \   00016E   800C         SJMP      ??zclMultiSensor_ProcessInConfigReportCmd_10
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_9:
   \   000170   7409         MOV       A,#0x9
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   E0           MOVX      A,@DPTR
   \   000176   A2E0         MOV       C,0xE0 /* A   */.0
   \   000178   4013         JC        ??zclMultiSensor_ProcessInConfigReportCmd_8
   \   00017A   748F         MOV       A,#-0x71
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_10:
   \   00017C   A2..         MOV       C,?VB.0
   \   00017E   500D         JNC       ??zclMultiSensor_ProcessInConfigReportCmd_8
   \   000180   85..82       MOV       DPL,?V4
   \   000183   85..83       MOV       DPH,?V5
   \   000186   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000189   A3           INC       DPTR
   \   00018A   02....       LJMP      ??CrossCallReturnLabel_4 & 0xFFFF
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_8:
   \   00018D   85..82       MOV       DPL,?V12
   \   000190   85..83       MOV       DPH,?V13
   \   000193   E0           MOVX      A,@DPTR
   \   000194   C0E0         PUSH      A
   \   000196   12....       LCALL     ?Subroutine31 & 0xFFFF
    998            }//for loop
   \                     ??CrossCallReturnLabel_75:
   \   000199   C8           XCH       A,R0
   \   00019A   2406         ADD       A,#0x6
   \   00019C   F582         MOV       DPL,A
   \   00019E   E4           CLR       A
   \   00019F   38           ADDC      A,R0
   \   0001A0   F583         MOV       DPH,A
   \   0001A2   D0E0         POP       A
   \   0001A4   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0001A7   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0001AA   240A         ADD       A,#0xa
   \   0001AC   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0001AF   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0001B2   240C         ADD       A,#0xc
   \   0001B4   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001B7   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0001BA   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0001BD   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0001C0   A3           INC       DPTR
   \   0001C1   A3           INC       DPTR
   \   0001C2   74FF         MOV       A,#-0x1
   \   0001C4   F0           MOVX      @DPTR,A
   \   0001C5   A3           INC       DPTR
   \   0001C6   F0           MOVX      @DPTR,A
   \   0001C7   02....       LJMP      ??zclMultiSensor_ProcessInConfigReportCmd_5 & 0xFFFF
    999            //8. Send respond message with function "zcl_SendConfigReportRspCmd"
   1000            if ( sendRsp )
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_6:
   \   0001CA   A2..         MOV       C,?VB.0
   \   0001CC   506B         JNC       ??zclMultiSensor_ProcessInConfigReportCmd_11
   1001            {
   1002              pCfgReportRspCmd->numAttr = j;
   \   0001CE   85..82       MOV       DPL,?V2
   \   0001D1   85..83       MOV       DPH,?V3
   \   0001D4   E5..         MOV       A,?V6
   \   0001D6   F0           MOVX      @DPTR,A
   1003              if (pCfgReportRspCmd->numAttr == 0)
   \   0001D7   700B         JNZ       ??zclMultiSensor_ProcessInConfigReportCmd_12
   1004              {
   1005                //Since all records were written successful, include a single status record
   1006                // in the response command with the status field set to SUCCESS and the
   1007                // attribute ID and direction fields omitted.
   1008                pCfgReportRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   0001D9   A3           INC       DPTR
   \   0001DA   E4           CLR       A
   \   0001DB   F0           MOVX      @DPTR,A
   1009                pCfgReportRspCmd->numAttr = 1;
   \   0001DC   85..82       MOV       DPL,?V2
   \   0001DF   85..83       MOV       DPH,?V3
   \   0001E2   04           INC       A
   \   0001E3   F0           MOVX      @DPTR,A
   1010              }
   1011              
   1012              zcl_SendConfigReportRspCmd(pInMsg->endPoint, &(pInMsg->srcAddr),
   1013                                         pInMsg->clusterId, pCfgReportRspCmd,
   1014                                         !pInMsg->zclHdr.fc.direction, TRUE,
   1015                                         pInMsg->zclHdr.transSeqNum );
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_12:
   \   0001E4                ; Setup parameters for call to function zcl_SendConfigReportRspCmd
   \   0001E4   85..82       MOV       DPL,?V0
   \   0001E7   85..83       MOV       DPH,?V1
   \   0001EA   A3           INC       DPTR
   \   0001EB   A3           INC       DPTR
   \   0001EC   A3           INC       DPTR
   \   0001ED   A3           INC       DPTR
   \   0001EE   A3           INC       DPTR
   \   0001EF   A3           INC       DPTR
   \   0001F0   E0           MOVX      A,@DPTR
   \   0001F1   F5..         MOV       ?V4,A
   \   0001F3   78..         MOV       R0,#?V4
   \   0001F5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001F8   75..01       MOV       ?V4,#0x1
   \   0001FB   78..         MOV       R0,#?V4
   \   0001FD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000200   85..82       MOV       DPL,?V0
   \   000203   85..83       MOV       DPH,?V1
   \   000206   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000209   F5..         MOV       ?V4,A
   \   00020B   78..         MOV       R0,#?V4
   \   00020D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000210   78..         MOV       R0,#?V2
   \   000212   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000215   85..82       MOV       DPL,?V0
   \   000218   85..83       MOV       DPH,?V1
   \   00021B   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00021E   E5..         MOV       A,?V0
   \   000220   240A         ADD       A,#0xa
   \   000222   FA           MOV       R2,A
   \   000223   E4           CLR       A
   \   000224   35..         ADDC      A,?V1
   \   000226   FB           MOV       R3,A
   \   000227   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00022A   12....       LCALL     `??zcl_SendConfigReportRspCmd::?relay`; Banked call to: zcl_SendConfigReportRspCmd
   \   00022D   7405         MOV       A,#0x5
   \   00022F   12....       LCALL     ?DEALLOC_XSTACK8
   1016              zcl_mem_free ( pCfgReportRspCmd );
   \   000232                ; Setup parameters for call to function osal_mem_free
   \   000232   AA..         MOV       R2,?V2
   \   000234   AB..         MOV       R3,?V3
   \   000236   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1017            }
   1018            
   1019            //9. When configured, check report config immediately with function "xxx_CheckReportConfig()"
   1020            // when configured, check report config immediately
   1021            zclMultiSensor_CheckReportConfig();
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_11:
   \   000239                ; Setup parameters for call to function zclMultiSensor_CheckReportConfig
   \   000239   12....       LCALL     `??zclMultiSensor_CheckReportConfig::?relay`; Banked call to: zclMultiSensor_CheckReportConfig
   1022            // The MULTISENSOR_CHECK_REPORT_EVT will then be triggered again and again
   1023            // if we never received the ConfiReportCmd, the MULTISENSOR_CHECK_REPORT_EVT
   1024            // has no change to be triggered.
   1025            
   1026            // We think this makes sense, since there is no reason for your app to perform
   1027            // constantly report unless the app is configured to report.
   1028            // if your app just need to automatically report after bootup, you can trigger
   1029            // MULTISENSOR_CHECK_REPORT_EVT in zclXXX_Init().
   1030            return TRUE;
   \   00023C   7901         MOV       R1,#0x1
   \                     ??zclMultiSensor_ProcessInConfigReportCmd_2:
   \   00023E   740C         MOV       A,#0xc
   \   000240   02....       LJMP      ??Subroutine38_0 & 0xFFFF
   1031          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine41_0
   \   000002                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine42_0
   \   000006                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine43_0
   \   000002                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000006   C8           XCH       A,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FC           MOV       R4,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FD           MOV       R5,A
   \   00000B   85..82       MOV       DPL,?V0
   \   00000E   85..83       MOV       DPH,?V1
   \   000011   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000014   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E5..         MOV       A,?V0
   \   000002   2416         ADD       A,#0x16
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008                REQUIRE ??Subroutine44_0
   \   000008                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V12
   \   000004   85..83       MOV       DPH,?V13
   \   000007   E0           MOVX      A,@DPTR
   \   000008   85..82       MOV       DPL,?V4
   \   00000B   85..83       MOV       DPH,?V5
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   EA           MOV       A,R2
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   EB           MOV       A,R3
   \   00000A   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   13           RRC       A
   \   000004   13           RRC       A
   \   000005   13           RRC       A
   \   000006   541F         ANL       A,#0x1f
   \   000008   6401         XRL       A,#0x1
   \   00000A   5401         ANL       A,#0x1
   \   00000C   22           RET
   1032          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1033          static uint8 zclMultiSensor_ProcessInReadReportCfgCmd( zclIncomingMsg_t *pInMsg )
   \                     zclMultiSensor_ProcessInReadReportCfgCmd:
   1034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   1035          //1. Get zclReadReportCfgCmd_t from incomming message
   1036            zclReadReportCfgCmd_t *pReadReportCfgCmd; 
   1037            zclReadReportCfgRspCmd_t *pReadReportCfgRspCmd;
   1038            
   1039            uint8 sendRsp = FALSE;
   \   00000E   C2..         CLR       ?VB.0
   1040            uint16 len;
   1041            uint8 i;
   1042            
   1043            pReadReportCfgCmd = (zclReadReportCfgCmd_t *)pInMsg->attrCmd;
   \   000010   EA           MOV       A,R2
   \   000011   2417         ADD       A,#0x17
   \   000013   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000016   F5..         MOV       ?V8,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V9,A
   1044            
   1045          //2. Check command in message == ZCL_CMD_READ_REPORT_CFG and allocate memory for respond message
   1046            if (pInMsg->zclHdr.commandID == ZCL_CMD_READ_REPORT_CFG )
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   8B83         MOV       DPH,R3
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6408         XRL       A,#0x8
   \   00002A   7025         JNZ       ??zclMultiSensor_ProcessInReadReportCfgCmd_0
   1047            {
   1048              // We need to send a response back - allocate for it
   1049              len = sizeof(zclReadReportCfgCmd_t) + (pReadReportCfgCmd->numAttr * sizeof(zclReportCfgRspRec_t));
   1050              pReadReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc(len);
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   85..82       MOV       DPL,?V8
   \   00002F   85..83       MOV       DPH,?V9
   \   000032   E0           MOVX      A,@DPTR
   \   000033   75F00D       MOV       B,#0xd
   \   000036   A4           MUL       AB
   \   000037   A9F0         MOV       R1,B
   \   000039   2401         ADD       A,#0x1
   \   00003B   FA           MOV       R2,A
   \   00003C   E4           CLR       A
   \   00003D   39           ADDC      A,R1
   \   00003E   FB           MOV       R3,A
   \   00003F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000042   8A..         MOV       ?V14,R2
   \   000044   8B..         MOV       ?V15,R3
   1051              
   1052              if ( pReadReportCfgRspCmd == NULL )
   \   000046   EA           MOV       A,R2
   \   000047   4B           ORL       A,R3
   \   000048   7005         JNZ       ??zclMultiSensor_ProcessInReadReportCfgCmd_1
   1053              {
   1054                return FALSE;
   \   00004A   7900         MOV       R1,#0x0
   \   00004C   02....       LJMP      ??zclMultiSensor_ProcessInReadReportCfgCmd_2 & 0xFFFF
   1055              }
   1056              sendRsp = TRUE;     // sendRsp is active when we got correct commandID
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_1:
   \   00004F   D2..         SETB      ?VB.0
   1057            }
   1058            
   1059          //3. Find config. report record in table "config. report record list"
   1060            for (i = 0; i < pReadReportCfgCmd->numAttr; i++)
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_0:
   \   000051   75..00       MOV       ?V4,#0x0
   \   000054   8045         SJMP      ??zclMultiSensor_ProcessInReadReportCfgCmd_3
   1061            {
   1062              zclConfigReportRec_t *pConfigReportRec = NULL;       // find the rec and store here
   1063              zclReportCfgRspRec_t *pReportCfgRspRec = &(pReadReportCfgRspCmd->attrList[i]);
   1064              zclAttrRec_t attrRec;
   1065              
   1066              zcl_memset( pReportCfgRspRec, 0, sizeof( zclReportCfgRspRec_t ));
   1067              
   1068              if ( zclFindConfigReportRec (pInMsg->endPoint, pInMsg->clusterId,
   1069                                           pReadReportCfgCmd->attrList[i].attrID, &pConfigReportRec))
   1070              {
   1071          //4. If found configReportRec in table, write value to ReportCfgRspRec
   1072                if ( sendRsp )
   1073                {
   1074                   pReportCfgRspRec->status = ZCL_STATUS_SUCCESS;
   1075                      pReportCfgRspRec->direction = pConfigReportRec->cfgReportRec.direction;
   1076                      pReportCfgRspRec->attrID = pConfigReportRec->cfgReportRec.attrID;
   1077                      pReportCfgRspRec->dataType = pConfigReportRec->cfgReportRec.dataType;
   1078                      pReportCfgRspRec->minReportInt = pConfigReportRec->cfgReportRec.minReportInt;
   1079                      pReportCfgRspRec->maxReportInt = pConfigReportRec->cfgReportRec.maxReportInt;
   1080                      pReportCfgRspRec->timeoutPeriod = pConfigReportRec->cfgReportRec.timeoutPeriod;
   1081                      pReportCfgRspRec->reportableChange = pConfigReportRec->cfgReportRec.reportableChange;
   1082                }
   1083              }
   1084              else 
   1085              {
   1086          //5. If not found configReportRec, check if the attribute is an un-reportable or an un support one
   1087                uint8 status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_4:
   \   000056   7E86         MOV       R6,#-0x7a
   1088                
   1089                if ( zclFindAttrRec( pInMsg->endPoint, pInMsg->clusterId, pReadReportCfgCmd->attrList[i].attrID, &attrRec))
   \   000058                ; Setup parameters for call to function zclFindAttrRec
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?XSTACK_DISP100_8
   \   00005D   88..         MOV       ?V12,R0
   \   00005F   89..         MOV       ?V13,R1
   \   000061   78..         MOV       R0,#?V12
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000069   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   00006C   7402         MOV       A,#0x2
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000071   E9           MOV       A,R1
   \   000072   6002         JZ        ??zclMultiSensor_ProcessInReadReportCfgCmd_5
   1090                {
   1091                  // if found the attr rec, it is there bu un-reportale
   1092                  status = ZCL_STATUS_UNREPORTABLE_ATTRIBUTE;
   \   000074   7E8C         MOV       R6,#-0x74
   1093                }
   1094                // Attribute is not supported - move on to the next configReportRec record
   1095                if ( sendRsp )
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_5:
   \   000076   A2..         MOV       C,?VB.0
   \   000078   501F         JNC       ??CrossCallReturnLabel_89
   1096                {
   1097                  pReportCfgRspRec->status = status;
   \   00007A   EE           MOV       A,R6
   \   00007B   85..82       MOV       DPL,?V0
   \   00007E   85..83       MOV       DPH,?V1
   \   000081   F0           MOVX      @DPTR,A
   1098                  pReportCfgRspRec->direction = pReadReportCfgCmd->attrList[i].direction;
   \   000082   85..82       MOV       DPL,?V10
   \   000085   85..83       MOV       DPH,?V11
   \   000088   A3           INC       DPTR
   \   000089   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00008C   F0           MOVX      @DPTR,A
   1099                  pReportCfgRspRec->attrID = pReadReportCfgCmd->attrList[i].attrID;
   \   00008D   85..82       MOV       DPL,?V6
   \   000090   85..83       MOV       DPH,?V7
   \   000093   12....       LCALL     ?Subroutine14 & 0xFFFF
   1100                }
   1101              }
   \                     ??CrossCallReturnLabel_16:
   \   000096   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000099   05..         INC       ?V4
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_3:
   \   00009B   85..82       MOV       DPL,?V8
   \   00009E   85..83       MOV       DPH,?V9
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F8           MOV       R0,A
   \   0000A3   E5..         MOV       A,?V4
   \   0000A5   C3           CLR       C
   \   0000A6   98           SUBB      A,R0
   \   0000A7   4003         JC        $+5
   \   0000A9   02....       LJMP      ??zclMultiSensor_ProcessInReadReportCfgCmd_6 & 0xFFFF
   \   0000AC   85..82       MOV       DPL,?XSP + 0
   \   0000AF   85..83       MOV       DPH,?XSP + 1
   \   0000B2   E4           CLR       A
   \   0000B3   F0           MOVX      @DPTR,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   F0           MOVX      @DPTR,A
   \   0000B6   AE..         MOV       R6,?V4
   \   0000B8   EE           MOV       A,R6
   \   0000B9   75F00D       MOV       B,#0xd
   \   0000BC   A4           MUL       AB
   \   0000BD   F8           MOV       R0,A
   \   0000BE   A9F0         MOV       R1,B
   \   0000C0   E5..         MOV       A,?V14
   \   0000C2   28           ADD       A,R0
   \   0000C3   F582         MOV       DPL,A
   \   0000C5   E5..         MOV       A,?V15
   \   0000C7   39           ADDC      A,R1
   \   0000C8   F583         MOV       DPH,A
   \   0000CA   A3           INC       DPTR
   \   0000CB   8582..       MOV       ?V0,DPL
   \   0000CE   8583..       MOV       ?V1,DPH
   \   0000D1                ; Setup parameters for call to function osal_memset
   \   0000D1   7C0D         MOV       R4,#0xd
   \   0000D3   7D00         MOV       R5,#0x0
   \   0000D5   7900         MOV       R1,#0x0
   \   0000D7   AA..         MOV       R2,?V0
   \   0000D9   AB..         MOV       R3,?V1
   \   0000DB   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000DE   EE           MOV       A,R6
   \   0000DF   75F003       MOV       B,#0x3
   \   0000E2   A4           MUL       AB
   \   0000E3   FE           MOV       R6,A
   \   0000E4   AFF0         MOV       R7,B
   \   0000E6   E5..         MOV       A,?V8
   \   0000E8   2E           ADD       A,R6
   \   0000E9   F5..         MOV       ?V10,A
   \   0000EB   E5..         MOV       A,?V9
   \   0000ED   3F           ADDC      A,R7
   \   0000EE   F5..         MOV       ?V11,A
   \   0000F0   E5..         MOV       A,?V10
   \   0000F2   2402         ADD       A,#0x2
   \   0000F4   F5..         MOV       ?V6,A
   \   0000F6   E4           CLR       A
   \   0000F7   35..         ADDC      A,?V11
   \   0000F9   F5..         MOV       ?V7,A
   \   0000FB                ; Setup parameters for call to function zclFindConfigReportRec
   \   0000FB   A8..         MOV       R0,?XSP + 0
   \   0000FD   A9..         MOV       R1,?XSP + 1
   \   0000FF   88..         MOV       ?V12,R0
   \   000101   89..         MOV       ?V13,R1
   \   000103   78..         MOV       R0,#?V12
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000108   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00010B   12....       LCALL     `??zclFindConfigReportRec::?relay`; Banked call to: zclFindConfigReportRec
   \   00010E   7402         MOV       A,#0x2
   \   000110   12....       LCALL     ?DEALLOC_XSTACK8
   \   000113   E9           MOV       A,R1
   \   000114   7003         JNZ       $+5
   \   000116   02....       LJMP      ??zclMultiSensor_ProcessInReadReportCfgCmd_4 & 0xFFFF
   \   000119   A2..         MOV       C,?VB.0
   \   00011B   4003         JC        $+5
   \   00011D   02....       LJMP      ??CrossCallReturnLabel_89 & 0xFFFF
   \   000120   85..82       MOV       DPL,?V0
   \   000123   85..83       MOV       DPH,?V1
   \   000126   E4           CLR       A
   \   000127   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   1102            } // for loop
   \                     ??CrossCallReturnLabel_103:
   \   00012A   2406         ADD       A,#0x6
   \   00012C   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00012F   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000132   2407         ADD       A,#0x7
   \   000134   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000137   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00013A   2409         ADD       A,#0x9
   \   00013C   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00013F   A3           INC       DPTR
   \   000140   A3           INC       DPTR
   \   000141   A3           INC       DPTR
   \   000142   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000145   240A         ADD       A,#0xa
   \   000147   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00014A   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00014D   240C         ADD       A,#0xc
   \   00014F   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000152   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000155   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000158   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00015B   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00015E   2410         ADD       A,#0x10
   \   000160   F582         MOV       DPL,A
   \   000162   E4           CLR       A
   \   000163   38           ADDC      A,R0
   \   000164   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000167   E5..         MOV       A,?V0
   \   000169   240B         ADD       A,#0xb
   \   00016B   F582         MOV       DPL,A
   \   00016D   E4           CLR       A
   \   00016E   35..         ADDC      A,?V1
   \   000170   F583         MOV       DPH,A
   \   000172   02....       LJMP      ??CrossCallReturnLabel_16 & 0xFFFF
   1103           
   1104          //6. Send cfg. respond message 
   1105            if (sendRsp)
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_6:
   \   000175   A2..         MOV       C,?VB.0
   \   000177   5058         JNC       ??zclMultiSensor_ProcessInReadReportCfgCmd_7
   1106            {
   1107              pReadReportCfgCmd->numAttr = pReadReportCfgCmd->numAttr;
   \   000179   E8           MOV       A,R0
   \   00017A   F0           MOVX      @DPTR,A
   1108              
   1109              zcl_SendReadReportCfgRspCmd( pInMsg->endPoint, &(pInMsg->srcAddr), pInMsg->clusterId,
   1110                                           pReadReportCfgRspCmd, !pInMsg->zclHdr.fc.direction, true, pInMsg->zclHdr.transSeqNum);
   \   00017B                ; Setup parameters for call to function zcl_SendReadReportCfgRspCmd
   \   00017B   85..82       MOV       DPL,?V2
   \   00017E   85..83       MOV       DPH,?V3
   \   000181   A3           INC       DPTR
   \   000182   A3           INC       DPTR
   \   000183   A3           INC       DPTR
   \   000184   A3           INC       DPTR
   \   000185   A3           INC       DPTR
   \   000186   A3           INC       DPTR
   \   000187   E0           MOVX      A,@DPTR
   \   000188   F5..         MOV       ?V0,A
   \   00018A   78..         MOV       R0,#?V0
   \   00018C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00018F   75..01       MOV       ?V0,#0x1
   \   000192   78..         MOV       R0,#?V0
   \   000194   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000197   85..82       MOV       DPL,?V2
   \   00019A   85..83       MOV       DPH,?V3
   \   00019D   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0001A0   F5..         MOV       ?V0,A
   \   0001A2   78..         MOV       R0,#?V0
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A7   78..         MOV       R0,#?V14
   \   0001A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AC   85..82       MOV       DPL,?V2
   \   0001AF   85..83       MOV       DPH,?V3
   \   0001B2   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0001B5   E5..         MOV       A,?V2
   \   0001B7   240A         ADD       A,#0xa
   \   0001B9   FA           MOV       R2,A
   \   0001BA   E4           CLR       A
   \   0001BB   35..         ADDC      A,?V3
   \   0001BD   FB           MOV       R3,A
   \   0001BE   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   0001C1   F9           MOV       R1,A
   \   0001C2   12....       LCALL     `??zcl_SendReadReportCfgRspCmd::?relay`; Banked call to: zcl_SendReadReportCfgRspCmd
   \   0001C5   7405         MOV       A,#0x5
   \   0001C7   12....       LCALL     ?DEALLOC_XSTACK8
   1111              zcl_mem_free( pReadReportCfgRspCmd );
   \   0001CA                ; Setup parameters for call to function osal_mem_free
   \   0001CA   AA..         MOV       R2,?V14
   \   0001CC   AB..         MOV       R3,?V15
   \   0001CE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1112            }
   1113            return TRUE;
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_7:
   \   0001D1   7901         MOV       R1,#0x1
   \                     ??zclMultiSensor_ProcessInReadReportCfgCmd_2:
   \   0001D3   02....       LJMP      ?Subroutine2 & 0xFFFF
   1114          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E5..         MOV       A,?V2
   \   000002   2416         ADD       A,#0x16
   \   000004                REQUIRE ??Subroutine46_0
   \   000004                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine47_0
   \   000006                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FC           MOV       R4,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FD           MOV       R5,A
   \   00000B   85..82       MOV       DPL,?V2
   \   00000E   85..83       MOV       DPH,?V3
   \   000011   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000014   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000017   F9           MOV       R1,A
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine48_0
   \   000002                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine49_0
   \   000003                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E8           MOV       A,R0
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   E9           MOV       A,R1
   \   000006                REQUIRE ??Subroutine50_0
   \   000006                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET
   1115          
   1116          
   1117          /*********************************************************************
   1118          * @fn      zclMultiSensor_CheckReportConfig
   1119          *
   1120          * @brief   Check if there is a reportable attribute in all cluster is timeout to report
   1121          *
   1122          * @param   none
   1123          *
   1124          * @return  none
   1125          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1126          static void zclMultiSensor_CheckReportConfig(void)
   \                     zclMultiSensor_CheckReportConfig:
   1127          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   1128            uint8 x, y;
   1129            uint8 stopChecking = TRUE;
   \   000005   75..01       MOV       ?V4,#0x1
   1130            
   1131            // Fill the "config. report rec list" for this endpoint
   1132            zclConfigReportRecsList *pConfigReportRecsList = zclFindConfigReportRecsList( MULTISENSOR_ENDPOINT );
   \   000008                ; Setup parameters for call to function zclFindConfigReportRecsList
   \   000008   7908         MOV       R1,#0x8
   \   00000A   12....       LCALL     `??zclFindConfigReportRecsList::?relay`; Banked call to: zclFindConfigReportRecsList
   \   00000D   8A..         MOV       ?V0,R2
   \   00000F   8B..         MOV       ?V1,R3
   1133            
   1134            if ( pConfigReportRecsList != NULL )
   \   000011   EA           MOV       A,R2
   \   000012   4B           ORL       A,R3
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??zclMultiSensor_CheckReportConfig_0 & 0xFFFF
   1135            {
   1136              /* This piece of code will classify each luster in the list of endpoint, then send report
   1137               * command coressponding cluster 
   1138               */
   1139              for ( x = 0; x < pConfigReportRecsList->numConfigReportRec; x++)
   \   000018   75..00       MOV       ?V5,#0x0
   \   00001B   EA           MOV       A,R2
   \   00001C   2404         ADD       A,#0x4
   \   00001E   F5..         MOV       ?V2,A
   \   000020   E4           CLR       A
   \   000021   35..         ADDC      A,?V1
   \   000023   F5..         MOV       ?V3,A
   \   000025   8076         SJMP      ??zclMultiSensor_CheckReportConfig_1
   1140              {
   1141                uint8 cIDuplicate = 0;
   1142                
   1143                for (y = 0; y < x; y++)
   1144                {
   1145                  if ( pConfigReportRecsList->configReportRecs[x].clusterId == 
   1146                      pConfigReportRecsList->configReportRecs[y].clusterId)
   \                     ??zclMultiSensor_CheckReportConfig_2:
   \   000027   E8           MOV       A,R0
   \   000028   2E           ADD       A,R6
   \   000029   F582         MOV       DPL,A
   \   00002B   E9           MOV       A,R1
   \   00002C   3F           ADDC      A,R7
   \   00002D   F583         MOV       DPH,A
   \   00002F   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000032   EB           MOV       A,R3
   \   000033   75F012       MOV       B,#0x12
   \   000036   A4           MUL       AB
   \   000037   F5..         MOV       ?V6,A
   \   000039   85F0..       MOV       ?V8,B
   \   00003C   E5..         MOV       A,?V8
   \   00003E   F5..         MOV       ?V7,A
   \   000040   E8           MOV       A,R0
   \   000041   25..         ADD       A,?V6
   \   000043   F582         MOV       DPL,A
   \   000045   E9           MOV       A,R1
   \   000046   35..         ADDC      A,?V7
   \   000048   F583         MOV       DPH,A
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   6C           XRL       A,R4
   \   00004C   7003         JNZ       ??zclMultiSensor_CheckReportConfig_3
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   6D           XRL       A,R5
   \                     ??zclMultiSensor_CheckReportConfig_3:
   \   000051   7002         JNZ       ??zclMultiSensor_CheckReportConfig_4
   1147                  {
   1148                    cIDuplicate = 1;
   \   000053   7A01         MOV       R2,#0x1
   1149                  }
   1150                }
   \                     ??zclMultiSensor_CheckReportConfig_4:
   \   000055   0B           INC       R3
   \                     ??zclMultiSensor_CheckReportConfig_5:
   \   000056   EB           MOV       A,R3
   \   000057   C3           CLR       C
   \   000058   95..         SUBB      A,?V5
   \   00005A   40CB         JC        ??zclMultiSensor_CheckReportConfig_2
   1151                
   1152                if (!cIDuplicate)
   \   00005C   EA           MOV       A,R2
   \   00005D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00005F   4018         JC        ??zclMultiSensor_CheckReportConfig_6
   1153                {
   1154                  zclMultiSensor_CheckAndSendClusterAttrReport( MULTISENSOR_ENDPOINT, pConfigReportRecsList->configReportRecs[x].clusterId, pConfigReportRecsList);
   \   000061                ; Setup parameters for call to function zclMultiSensor_CheckAndSendClusterAttrReport
   \   000061   AC..         MOV       R4,?V0
   \   000063   AD..         MOV       R5,?V1
   \   000065   85..82       MOV       DPL,?V2
   \   000068   85..83       MOV       DPH,?V3
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   2E           ADD       A,R6
   \   00006D   F8           MOV       R0,A
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   3F           ADDC      A,R7
   \   000071   12....       LCALL     ?Subroutine21 & 0xFFFF
   1155                }
   \                     ??CrossCallReturnLabel_48:
   \   000074   7908         MOV       R1,#0x8
   \   000076   12....       LCALL     `??zclMultiSensor_CheckAndSendClusterAttrReport:`; Banked call to: zclMultiSensor_CheckAndSendClusterAttrReport
   1156                
   1157                if (pConfigReportRecsList->configReportRecs[x].cfgReportRec.maxReportInt != 0xFFFF)
   \                     ??zclMultiSensor_CheckReportConfig_6:
   \   000079   85..82       MOV       DPL,?V2
   \   00007C   85..83       MOV       DPH,?V3
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   2E           ADD       A,R6
   \   000081   F8           MOV       R0,A
   \   000082   A3           INC       DPTR
   \   000083   E0           MOVX      A,@DPTR
   \   000084   3F           ADDC      A,R7
   \   000085   F9           MOV       R1,A
   \   000086   E8           MOV       A,R0
   \   000087   240C         ADD       A,#0xc
   \   000089   F582         MOV       DPL,A
   \   00008B   E4           CLR       A
   \   00008C   39           ADDC      A,R1
   \   00008D   F583         MOV       DPH,A
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   F4           CPL       A
   \   000091   7003         JNZ       ??zclMultiSensor_CheckReportConfig_7
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F4           CPL       A
   \                     ??zclMultiSensor_CheckReportConfig_7:
   \   000096   6003         JZ        ??zclMultiSensor_CheckReportConfig_8
   1158                {
   1159                  stopChecking = FALSE;   // If there is any attribute setting to report, don't stop checking
   \   000098   75..00       MOV       ?V4,#0x0
   1160                }
   \                     ??zclMultiSensor_CheckReportConfig_8:
   \   00009B   05..         INC       ?V5
   \                     ??zclMultiSensor_CheckReportConfig_1:
   \   00009D   85..82       MOV       DPL,?V0
   \   0000A0   85..83       MOV       DPH,?V1
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   F8           MOV       R0,A
   \   0000A8   E5..         MOV       A,?V5
   \   0000AA   C3           CLR       C
   \   0000AB   98           SUBB      A,R0
   \   0000AC   5018         JNC       ??zclMultiSensor_CheckReportConfig_0
   \   0000AE   7A00         MOV       R2,#0x0
   \   0000B0   7B00         MOV       R3,#0x0
   \   0000B2   E5..         MOV       A,?V5
   \   0000B4   75F012       MOV       B,#0x12
   \   0000B7   A4           MUL       AB
   \   0000B8   FE           MOV       R6,A
   \   0000B9   AFF0         MOV       R7,B
   \   0000BB   85..82       MOV       DPL,?V2
   \   0000BE   85..83       MOV       DPH,?V3
   \   0000C1   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   1161              }
   1162            }
   \                     ??CrossCallReturnLabel_63:
   \   0000C4   8090         SJMP      ??zclMultiSensor_CheckReportConfig_5
   1163            
   1164            gTimeCounter++;         // time ticks every second for checking attr report
   \                     ??zclMultiSensor_CheckReportConfig_0:
   \   0000C6   90....       MOV       DPTR,#gTimeCounter
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   2401         ADD       A,#0x1
   \   0000CC   F0           MOVX      @DPTR,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   3400         ADDC      A,#0x0
   \   0000D1   F0           MOVX      @DPTR,A
   1165            if (!stopChecking)
   \   0000D2   E5..         MOV       A,?V4
   \   0000D4   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000D6   4017         JC        ??zclMultiSensor_CheckReportConfig_9
   1166            {
   1167                osal_start_timerEx( zclMultiSensor_TaskID, MULTISENSOR_CHECK_REPORT__EVT, 1000); 
   \   0000D8                ; Setup parameters for call to function osal_start_timerEx
   \   0000D8   90....       MOV       DPTR,#__Constant_3e8
   \   0000DB   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000DE   7A04         MOV       R2,#0x4
   \   0000E0   7B00         MOV       R3,#0x0
   \   0000E2   90....       MOV       DPTR,#zclMultiSensor_TaskID
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   F9           MOV       R1,A
   \   0000E7   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000EA   7404         MOV       A,#0x4
   \   0000EC   12....       LCALL     ?DEALLOC_XSTACK8
   1168            }
   1169          }
   \                     ??zclMultiSensor_CheckReportConfig_9:
   \   0000EF   7F09         MOV       R7,#0x9
   \   0000F1   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclMultiSensor_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for multiSensor_Ep>`:
   \   000000   08           DB 8
   \   000001   00           DB 0
   \   000002   ....         DW zclMultiSensor_TaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclMultiSensor_CmdCallbacks>`:
   \   000000   ....         DW `??zclMultiSensor_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_ProcessCommissioningStatus::?r`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_ProcessCommissioningStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_BatteryWarningCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_BatteryWarningCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_ProcessIncomingMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_ProcessIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uartEventApplicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartEventApplicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_CheckAndSendClusterAttrReport:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_CheckAndSendClusterAttrReport

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_ProcessInConfigReportCmd::?rel`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_ProcessInConfigReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_ProcessInReadReportCfgCmd::?re`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_ProcessInReadReportCfgCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclMultiSensor_CheckReportConfig::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclMultiSensor_CheckReportConfig

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0}>`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
   1170          /****************************************************************************
   1171          ****************************************************************************/
   1172          
   1173          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     25   uartEventApplicationCB
        0     25   -> HalUARTRead
        0     25   -> Hal_UART_RxBufLen
      2      0   zclMultiSensor_BasicResetCB
        2      0   -> zclMultiSensor_ResetAttributesToDefaultValues
      0      0   zclMultiSensor_BatteryWarningCB
      1     53   zclMultiSensor_CheckAndSendClusterAttrReport
        0     34   -> osal_mem_alloc
        0     34   -> osal_memset
        0     34   -> osal_msg_allocate
        0     34   -> osal_msg_send
        0     36   -> zclFindAttrRec
      0     57   zclMultiSensor_CheckReportConfig
        0     21   -> osal_start_timerEx
        0     17   -> zclFindConfigReportRecsList
        0     17   -> zclMultiSensor_CheckAndSendClusterAttrReport
      0     38   zclMultiSensor_Init
        0     38   -> HalUARTOpen
        0     38   -> RegisterForKeys
        0     38   -> RegisterVoltageWarningCB
        0     38   -> afRegister
        0     38   -> bdb_RegisterCommissioningStatusCB
        0     38   -> bdb_RegisterSimpleDescriptor
        0     38   -> bdb_StartCommissioning
        0     38   -> zclGeneral_RegisterCmdCallbacks
        0     38   -> zclMultiSensor_ResetAttributesToDefaultValues
        0     38   -> zcl_registerAttrList
        0     38   -> zcl_registerConfigReportRecList
        0     38   -> zcl_registerForMsg
      2      0   zclMultiSensor_ProcessCommissioningStatus
        2      0   -> HalLedBlink
        2      0   -> bdb_StartCommissioning
        2      0   -> zclMultiSensor_CheckReportConfig
      1     65   zclMultiSensor_ProcessInConfigReportCmd
        0     36   -> osal_mem_alloc
        0     36   -> osal_mem_free
        0     36   -> osal_memset
        0     38   -> zclFindAttrRec
        0     38   -> zclFindConfigReportRec
        0     36   -> zclMultiSensor_CheckReportConfig
        0     41   -> zcl_SendConfigReportRspCmd
      1     63   zclMultiSensor_ProcessInReadReportCfgCmd
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
        0     36   -> zclFindAttrRec
        0     36   -> zclFindConfigReportRec
        0     39   -> zcl_SendReadReportCfgRspCmd
      0     41   zclMultiSensor_ProcessIncomingMsg
        0     24   -> osal_mem_free
        0     24   -> zclMultiSensor_ProcessInConfigReportCmd
        0     24   -> zclMultiSensor_ProcessInReadReportCfgCmd
        0     29   -> zcl_SendReportCmd
      0     12   zclMultiSensor_event_loop
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> zclMultiSensor_CheckReportConfig
        0     12   -> zclMultiSensor_ProcessIncomingMsg


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant {0, 0, 0, 0, 0, 0}>
       7  ?<Initializer for multiSensor_Ep>
      18  ?<Initializer for zclMultiSensor_CmdCallbacks>
       1  ?<Initializer for zclMultiSensor_NwkState>
       5  ??Subroutine36_0
       4  ??Subroutine37_0
       8  ??Subroutine38_0
       7  ??Subroutine39_0
       6  ??Subroutine40_0
       5  ??Subroutine41_0
       5  ??Subroutine42_0
       8  ??Subroutine43_0
       6  ??Subroutine44_0
       6  ??Subroutine45_0
       9  ??Subroutine46_0
       9  ??Subroutine47_0
       3  ??Subroutine48_0
       6  ??Subroutine49_0
       5  ??Subroutine50_0
       7  ?Subroutine0
       3  ?Subroutine1
      25  ?Subroutine10
      24  ?Subroutine11
       2  ?Subroutine12
      20  ?Subroutine13
       6  ?Subroutine14
      10  ?Subroutine15
       6  ?Subroutine16
      11  ?Subroutine17
       1  ?Subroutine18
      14  ?Subroutine19
       2  ?Subroutine2
      13  ?Subroutine20
       4  ?Subroutine21
       9  ?Subroutine22
       8  ?Subroutine23
       2  ?Subroutine24
       9  ?Subroutine25
       9  ?Subroutine26
       6  ?Subroutine27
      12  ?Subroutine28
       9  ?Subroutine29
       2  ?Subroutine3
      12  ?Subroutine30
       6  ?Subroutine31
       8  ?Subroutine32
       4  ?Subroutine33
      14  ?Subroutine34
      10  ?Subroutine35
      12  ?Subroutine4
      18  ?Subroutine5
      15  ?Subroutine6
       2  ?Subroutine7
       6  ?Subroutine8
       4  ?Subroutine9
       4  __Constant_3e8
       2  gTimeCounter
       7  multiSensor_Ep
     255  uartEventApplicationCB
       6  uartEventApplicationCB::?relay
       9  zclMultiSensor_BasicResetCB
       6  zclMultiSensor_BasicResetCB::?relay
       3  zclMultiSensor_BatteryWarningCB
       6  zclMultiSensor_BatteryWarningCB::?relay
     582  zclMultiSensor_CheckAndSendClusterAttrReport
       6  zclMultiSensor_CheckAndSendClusterAttrReport::?relay
     244  zclMultiSensor_CheckReportConfig
       6  zclMultiSensor_CheckReportConfig::?relay
      18  zclMultiSensor_CmdCallbacks
     230  zclMultiSensor_Init
       6  zclMultiSensor_Init::?relay
       1  zclMultiSensor_NwkState
      57  zclMultiSensor_ProcessCommissioningStatus
       6  zclMultiSensor_ProcessCommissioningStatus::?relay
     579  zclMultiSensor_ProcessInConfigReportCmd
       6  zclMultiSensor_ProcessInConfigReportCmd::?relay
     470  zclMultiSensor_ProcessInReadReportCfgCmd
       6  zclMultiSensor_ProcessInReadReportCfgCmd::?relay
     296  zclMultiSensor_ProcessIncomingMsg
       6  zclMultiSensor_ProcessIncomingMsg::?relay
       1  zclMultiSensor_TaskID
      12  zclMultiSensor_dstAddr
      83  zclMultiSensor_event_loop
       6  zclMultiSensor_event_loop::?relay

 
 3 225 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
    26 bytes in segment XDATA_I
    26 bytes in segment XDATA_ID
    16 bytes in segment XDATA_ROM_C
    15 bytes in segment XDATA_Z
 
    92 bytes of CODE     memory
    12 bytes of CONST    memory (+ 4 bytes shared)
 3 225 bytes of HUGECODE memory
    41 bytes of XDATA    memory

Errors: none
Warnings: none
